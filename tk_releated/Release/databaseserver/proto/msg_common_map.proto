syntax = "proto3";
package protomsg;
import "msg_common.proto";
import "msg_common_guild.proto";

enum RegionType
{
    kRegionType_None        = 0;
    kRegionType_Kingdom     = 1;    // 王国
    kRegionType_KVK         = 2;    // kvk
    kRegionType_Expedition  = 3;    // 远征副本
    kRegionType_Pompeii     = 4;   // 庞贝城(埃及之战)
    kRegionType_Guide       = 65534;   // 客户端新手引导用
}

message GridData
{
    uint32 index    = 1;
    uint32 status   = 2;
}

enum EntityMonitorType
{
    kEntityMonitorType_None     = 0;
    kEntityMonitorType_View     = 1;
    kEntityMonitorType_World    = 2;
    kEntityMonitorType_Player   = 3;
    kEntityMonitorType_Guild    = 4;
    kEntityMonitorType_Alarm    = 5;
}

enum EntityType
{
    kEntityType_None                    = 0;

    kEntityType_March                   = 1;    // 行军
    kEntityType_GuildMarch              = 2;    // 集结

    kEntityType_Castle                  = 101;  // 主堡
    kEntityType_Collect                 = 103;  // 采集物
    kEntityType_GuildFort               = 104;  // 联盟要塞
    kEntityType_GuildFlag               = 105;  // 联盟旗帜
    kEntityType_Temple                  = 106;  // 神庙
    kEntityType_Pass                    = 107;  // 关卡
    kEntityType_PompeiiBuildPoint       = 108;  // 庞贝积分建筑
    kEntityType_PompeiiBuildRelocate    = 109;  // 庞贝迁城建筑
    kEntityType_PompeiiLab              = 110;  // 庞贝生化实验室
    kEntityType_PompeiiCultureTank      = 111;  // 庞贝培养槽
    kEntityType_PompeiiTrainStation     = 112;  // 庞贝火车站
    kEntityType_PompeiiRailwayPlatform  = 113;  // 庞贝月台
    kEntityType_Train                   = 114;  // 火车

    kEntityType_Scout                   = 200;  // 斥候
    kEntityType_Summon                  = 201;  // 召唤物
    kEntityType_Trap                    = 202;  // 陷阱
    kEntityType_GuildResourceField      = 203;  // 联盟资源点
    kEntityType_GuildCollect            = 204;  // 联盟资源中心
    kEntityType_Cave                    = 205;  // 洞窟
    kEntityType_Village                 = 206;  // 村庄
    kEntityType_Carriage                = 207;  // 运输车

    // 各种怪物 (1000 ~ 1999)
    kEntityType_GenericMonster          = 1000; // 通用怪
    kEntityType_SummonMonster           = 1001; // 召唤怪
    kEntityType_ExpeStronghold          = 1002; // 特殊怪物-副本据点
    kEntityType_Barbarians              = 1003; // 野蛮人
    kEntityType_BarbarianFort           = 1004; // 野蛮人山寨
    kEntityType_ExpeEnemyFort           = 1005; // 特殊怪物-副本敌方碉堡
    kEntityType_ExpeGroupMarch          = 1006; // 远征集结部队
    kEntityType_TrafficUnit             = 1007; // 运输队-非战斗NPC

    kEntityType_PompeiiMonster          = 1008; // 庞贝普通野怪
    kEntityType_PompeiiBoss             = 1009; // 庞贝BOSS

    kEntityType_PrivateRadarMonster     = 1010;  // 雷达系统专属怪
    kEntityType_PublicRadarMonster      = 1011;  // 雷达系统普通怪

	kEntityType_VirtualQueue      		= 10007;  // 虚拟队列


    //kEntityType_HumanoidMonster         = 1050; // 人形怪(规划中)

    kEntityType_TempleGuardMonster      = 1101; // 奇观守卫怪

    kEntityType_MonsterEnd              = 1999; // 怪结束

    kEntityType_TempleWall              = 2000; // 奇观城墙
    kEntityType_Drop                    = 2001; // 掉落
    kEntityType_StrongHold              = 2002; // 据点

}

// 掉落物类型
enum DropItemType
{
    kDropItemType_None  = 0;    
    kDropItemType_Rune  = 1;    // 符文
}

message EventData
{
    uint32 event_type           = 1;
    uint64 int_param_1          = 2;
    uint64 int_param_2          = 3;
    uint64 int_param_3          = 4;
    uint64 int_param_4          = 5;

    string str_param_1          = 6;
    string str_param_2          = 7;
    string str_param_3          = 8;
    string str_param_4          = 9;

    repeated uint64 int_param_n = 10;
}

// enum SyncDataType
// {
// kSyncDataType_None 	      = 0;
// kSyncDataType_Map         = 1;  // MapData
// kSyncDataType_Owner       = 2;  // PlayerBaseData
// kSyncDataType_Effect      = 3;  // EffectData
// kSyncDataType_March       = 4;  // MarchCommand
// kSyncDataType_Move        = 5;  // MoveData
// kSyncDataType_Army				= 6;
// kSyncDataType_MainCastleData   = 7;  // MainCastleData
// kSyncDataType_Barbarians					= 8;  // 野蛮人
// kSyncDataType_Collect = 9;     //采集
// kSyncDataType_Resource = 10;
// kSyncDataType_Hero      = 11;     //英雄
// kSyncDataType_BarbariansLv      = 12;     //打野等级
// kSyncDataType_Garrison      = 13;    //同步驻扎英雄
// kSyncDataType_CityWall      = 14;    //同步城墙
// kSyncDataType_GuildBuilding = 15;    //同步联盟建筑
// kSyncDataType_Temple      = 16;    //同步奇观
// kSyncDataType_GuildBase     = 17;    //公会数据
// kSyncDataType_Pass     = 18;    //同步关卡
// }

enum EntityPropertyType
{
    kEntityPropertyType_None                = 0;

    kEntityPropertyType_Map                 = 1;    // MapData kSyncDataType_Map
    kEntityPropertyType_Owner               = 2;    // EntityOwnerData kSyncDataType_Owner
    kEntityPropertyType_Move                = 4;    // MoveData kSyncDataType_Move
    kEntityPropertyType_GuildBuilding       = 5;    // 联盟建筑 GuildBuildingData
    kEntityPropertyType_Army                = 6;    // ArmyData kSyncDataType_Army
    kEntityPropertyType_Pass                = 7;    // PassData kSyncDataType_Pass
    kEntityPropertyType_Temple              = 8;    // TempleData kSyncDataType_Temple
    kEntityPropertyType_Collect             = 9;    // CollectData kSyncDataType_Collect
    kEntityPropertyType_Reenforce           = 10;   // DBReenforceData
    kEntityPropertyType_BarbarianFort       = 11;   // BarbarianFortData
    kEntityPropertyType_Barbarian           = 12;   // BarbariansData kSyncDataType_Barbarians
    // kEntityPropertyType_KillBarbarian = 13;
    kEntityPropertyType_CityWall            = 14;   // CityWallData kSyncDataType_MainCastleData
    kEntityPropertyType_EntityType          = 15;   // EntityTypeData
    kEntityPropertyType_MarchCommand        = 16;   // MarchCommand kSyncDataType_March
    kEntityPropertyType_March               = 17;   // EntityMarchData
    kEntityPropertyType_Resource            = 18;   // ResourceData kSyncDataType_Resource
    kEntityPropertyType_GuildMarch          = 19;   // GuildMarchData
    kEntityPropertyType_CastleExtendData    = 20;   // CastleExtendData
    kEntityPropertyType_AttackTarget        = 21;   // AttackTargetData
    kEntityPropertyType_MoveSpeed           = 22;   // MoveSpeedData
    kEntityPropertyType_Alarm               = 23;   // MapAlarmSyncDatas
    kEntityPropertyType_SkillStatus         = 24;   // SkillStatusData
    kEntityPropertyType_MultiStrike         = 26;   // 夹击MultiStrikeData
    kEntityPropertyType_BattleStatus        = 27;   // BattleStatusData
    kEntityPropertyType_ScoutCommand        = 28;   // 侦查 ScoutCommand
    kEntityPropertyType_Scout               = 29;   // EntityScoutData
    kEntityPropertyType_Summon              = 30;   // 召唤物
    kEntityPropertyType_Trap                = 31;   // 陷阱
    kEntityPropertyType_GuildCollect        = 32;   // 联盟资源中心 GuildCollectBuildingData
    kEntityPropertyType_GenericMonster      = 33;   // 通用怪 GenericMonsterData
    kEntityPropertyType_SummonMonster       = 34;   // 召唤怪 SummonMonsterData
    kEntityPropertyType_ExpeStronghold      = 35;   // 特殊怪物-副本据点 ExpeStrongholdData
    kEntityPropertyType_ReenforceData       = 36;   // 增援简略数据 ReenforceData
    kEntityPropertyType_ExpeEnemyFort       = 37;   // 特殊怪物-副本敌方碉堡 ExpeEnemyFortData
    kEntityPropertyType_MovePath            = 38;   // 寻路路径 MovePathData
    kEntityPropertyType_PompeiiBuild        = 39;   // 庞贝的建筑数据
    kEntityPropertyType_Static_Enemy        = 40;   // 粘着

    kEntityPropertyType_ExpeGroupMarch      = 41;   // 远征集结部队 ExpeGroupMarchData
    kEntityPropertyType_TrafficUnit         = 42;   // 运输队-非战斗NPC TrafficUnitData

    kEntityPropertyType_CarriageData        = 43;   // 运输车数据  EntityCarriageData
    kEntityPropertyType_GarrisonHero        = 44;   // 驻防英雄

    kEntityPropertyType_PompeiiMonster      = 45;   // 庞贝普通野怪  EntityPompeiiMonsterData
    kEntityPropertyType_PompeiiBoss         = 46;   // 庞贝BOSS  EntityPompeiiBossData

    kEntityPropertyType_GuildMarchLimit     = 47;   // GuildMarchLimit

    kEntityPropertyType_KingdomTitle        = 48;   // 头衔 主堡属性 EntityKingdomTitle

    kEntityPropertyType_ScoutExtendData     = 49;   // 斥候扩展数据 ScoutExtendData
    kEntityPropertyType_BaseArmy            = 50;   // 基础兵量 ArmyData

    kEntityPropertyType_PompeiiLab          = 51;   // PompeiiLabData 庞贝生化实验室 kEntityType_PompeiiLab
    kEntityPropertyType_PompeiiCultureTank  = 52;   // PompeiiCultureTankData 庞贝培养槽 kEntityType_PompeiiCultureTank
    kEntityPropertyType_PickUp              = 53;   // MarchPickUpData 军队采集培养槽数据

    kEntityPropertyType_TrainStation        = 54;   // TrainStationEntityData 火车站 kEntityType_PompeiiTrainStation
    kEntityPropertyType_RailwayPlatform     = 55;   // RailwayPlatformEntityData 月台 kEntityType_PompeiiRailwayPlatform
    kEntityPropertyType_Train               = 56;   // TrainEntityData 火车 kEntityType_Train


    kEntityPropertyType_PrivateRadarMonster  = 57;   // 雷达系统专属怪 PrivateRadarMonsterData
    kEntityPropertyType_PublicRadarMonster   = 58;   // 雷达系统普通怪 PublicRadarMonsterData

    kEntityPropertyType_TempleWall          = 59;   // 奇观城墙
    kEntityPropertyType_Drop                = 60;   // 掉落
    kEntityPropertyType_TempleMonsterGuard  = 61;   // 奇怪守卫怪
    kEntityPropertyType_StrongHold          = 62;   // 据点

}

// 领土归属建筑类型
enum MapTerritoryType
{
    kMapTerritoryType_None = 0;
    kMapTerritoryType_Temple  = 1;      // 奇观     
    kMapTerritoryType_Pass  = 2;        // 关卡
    kMapTerritoryType_Stronghold = 3;   // 据点
}

message EntityTypeData
{
    uint32 config_id    = 1;
    uint32 level        = 2;
}

message EntityOwnerData
{
    uint64 player_id        = 1;
    string player_name      = 2;
    string player_head      = 3;

    uint64 guild_id         = 4;
    string guild_name       = 5;
    string guild_short_name = 6;
    uint32 guild_icon       = 7;

    uint32 kingdom_id       = 10;
    uint32 force_id         = 11;
}

message EntityMarchData
{
    uint32 march_index              = 1;
    uint32 return_ap                = 2;
    uint32 kill_barbarians_count    = 3;
    int64 march_speed               = 4;
    int64 pick_end_time             = 5;
}

message EntitySimpleData
{
    EntityType entity_type  = 1;
    uint64 entity_id        = 2;
    uint32 config_id        = 3;
    uint32 level            = 4;
    uint64 player_id        = 5;
    uint64 guild_id         = 6;
}

message StatePathData
{
    uint64 pass_id          = 1;
    repeated vector2d paths = 2;
}

message StatePathDatas
{
    repeated StatePathData datas    = 1;
}

message PathData
{
    repeated vector2d cur_kingdom_path  = 2;
}

enum TroopType
{
    kTroopType_None         = 0;
    kTroopType_Infantry     = 1;    // 步
    kTroopType_Cavalry      = 2;    // 骑
    kTroopType_Archer       = 3;    // 弓
    kTroopType_Siege        = 4;    // 车
    kTroopType_WatchTower   = 5;    // 警戒塔
}

message TroopData
{
    uint32 troop_id     = 1;    // id
    uint32 troop_uints  = 2;    // 兵团数量
}

message GuildMarchData
{
    int64 start_march_time  = 1;
    int64 end_march_time    = 2;
    GuildMarchStatus status = 3;
    vector2d start_pos      = 4;

    uint32 target_type      = 5;
}

message GuildMarchLimit
{
    uint32   troop_type_limit = 1;
    uint32   troop_rank_limit = 2;
}

message GuildMarchInfo
{
    uint64 entity_id                = 1;
    GuildMarchData base_data        = 2;
    ReenforceInfo reenforce_info    = 3;
    MarchCommand command            = 4;
    EntityBaseData target_data      = 5;
    vector2d cur_pos                = 6;
    int64 move_speed                = 7;
    MoveData move_data              = 8;    // 路径
}

message GuildMarchAttackInfo
{
    uint64 entity_id                        = 1;
    repeated GuildMarchAlarmData alarm_data = 2;
}

message PlayerCastle
{
    uint64 id                       = 1;    // id

    MarchArmyData army_data         = 30;
    EffectData effect_data          = 40;
    MainCastleData main_castle_data = 50;
    MarchArmyData watch_tower_data  = 51;
}

message BarbariansMeta
{
    uint64 id                               = 1;    // id

    MapData map_data                        = 20;
    protomsg.BarbariansData barbarians_data = 21;
    protomsg.EffectData effect_data         = 22;
    protomsg.MarchArmyData army_data        = 23;
}

message CollectResource
{
    uint32 collect_id       = 1;
    protomsg.vector2d pos   = 2;
    protomsg.Resource res   = 3;
    int64 collect_time      = 4;
    EntityType entity_type  = 5;
}

message ResourceData
{
    repeated protomsg.CollectResource collect_res   = 2;    // 已经采集的资源
    repeated protomsg.Resource battle_res           = 3;
    repeated protomsg.Resource construct_res        = 4;
}

message CollectData
{
    uint32 remain_resource_count    = 4;    // 剩余资源数量
    uint64 march_entity_id          = 5;    // 占领部队的entity_id;
    int64 start_time                = 6;    // 开始采集时间
    int64 end_time                  = 7;    // 结束采集时间
    uint32 already_collect          = 8;    // 已经采集的数量
    uint32 speed                    = 9;    // 采集的速度
    uint32 max_collect_count        = 10;   // 最大采集的数量
}

// 公会城战数据
message GuildTempleWarData
{
    uint64 guild_id = 1;    // 公会ID
    uint32 point = 2;       // 得分
    string guild_name       = 3;
    string guild_short_name = 4;
    uint32 guild_icon       = 5;
    
}
message GuildTempleWarDBData
{
    uint64 guild_id = 1;    // 公会ID
    uint32 point = 2;       // 得分
}

// 奇观同步数据
message TempleData
{
    uint32 status           = 5;    // 当前的状态(未占领,占领中,休息)
    int64 start_time        = 6;    // 状态的持续时间
    int64 end_time          = 7;    // 状态的消失时间
    bool is_active          = 8;    // 是否激活中
    bool is_captured        = 9;    // 是否被占领过
    bool is_battle          = 10;   // 是否在战斗中
    repeated protomsg.GuildTempleWarData war_guilds  = 11;   // 宣战公会
    int64 war_end_time          = 12;   // 战争结束时间
}

// 奇观入库数据
message TempleDbData
{
    uint32 status               = 5;    // 当前的状态(未占领,占领中,休息)
    int64 start_time            = 6;    // 状态的持续时间
    int64 end_time              = 7;    // 状态的消失时间
    bool is_active              = 8;    // 是否激活中
    bool is_captured            = 9;    // 是否被占领过
    bool is_battle              = 10;   // 是否在战斗中
    uint64 first_capture_id     = 14;
    repeated protomsg.GuildTempleWarDBData war_guilds  = 15;   // 宣战公会
    int64 war_end_time          = 16;   // 战争结束时间
}

// 奇观数据
message PassData
{
    uint32 status           = 5;    // 当前的状态(未占领,占领中)
    bool is_captured        = 6;    // 是否被占领过
    bool is_active          = 8;    // 是否激活中
    bool is_battle          = 9;    // 是否在战斗中
    uint64 first_capture_id = 10;
    int64 start_time        = 11;   // 状态的持续时间
    int64 end_time          = 12;   // 状态的消失时间
}

enum MarchCommandStatus
{
    kMarchCommandStatus_None        = 0;
    kMarchCommandStatus_Moving      = 2;
    kMarchCommandStatus_Moveback    = 4;
    kMarchCommandStatus_Collect     = 6;
    kMarchCommandStatus_Reenforce   = 7;    // 增援中
    kMarchCommandStatus_Station     = 3;    // 驻扎
    kMarchCommandStatus_EndCommand  = 5;    // 停止中
    kMarchCommandStatus_PickUp      = 8;    // 拾取中
    kMarchCommandStatus_Pick        = 9;    // 拾取中
}

enum MarchCommandTarget
{
    kMarchCommandTarget_None                = 0;
    kMarchCommandTarget_Position            = 1;
    kMarchCommandTarget_Battle              = 2;
    kMarchCommandTarget_MoveBack            = 3;
    kMarchCommandTarget_ForceMoveBack       = 4;
    kMarchCommandTarget_Collect             = 5;
    kMarchCommandTarget_JoinMarch           = 6;
    kMarchCommandTarget_CreateGuildMarch    = 7;
    kMarchCommandTarget_JoinReenforce       = 8;
    kMarchCommandTarget_Station             = 9;
    kMarchCommandTarget_Follow              = 10;
    kMarchCommandTarget_CarriageSend        = 11;
    kMarchCommandTarget_PickUp              = 12;
    kMarchCommandTarget_Pick                = 13;
}

message MarchCommand
{
    vector2d position                   = 2;    // 位置

    MarchCommandTarget target_type      = 3;
    uint64 target_id                    = 4;    // 目标的entity id

    int32 is_quarter                    = 5;

    MarchCommandStatus command_status   = 99;   // 指令状态
}

message CastleCreateData
{
    protomsg.MarchArmyData army_data        = 1;
    protomsg.MarchArmyData watch_tower_data = 2;

    uint32 area_id                          = 3;
    vector2d init_pos                       = 4;
}

message CastleCreateResultData
{
    uint64 entity_id                    = 1;
    protomsg.vector2d position          = 2;
    protomsg.ArmyData army_data         = 3;
}

message MarchCreateData
{
    MarchArmyData army_data = 1;
    MarchCommand command    = 2;
    bool from_castle        = 3;
    vector2d init_pos       = 4;
    vector2d init_dir       = 5;
}

message MarchCreateResultData
{
    uint64 entity_id            = 1;
    protomsg.ArmyData army_data = 2;
    uint32 march_index          = 3;
}

message MapPlayerExtandData
{
    MapMiscData       misc       = 1;
    PlayerExploreInfo explore    = 2;
}

message MapPlayerPresbyterData
{
   repeated protomsg.Presbyter presbyters = 1;
}

message MapPlayerRegisterData
{
    uint64 player_id                                = 1;
    protomsg.MapPlayerData player_data              = 2;
    bool init_castle                                = 3;
    protomsg.CastleCreateData castle_data           = 4;
    repeated protomsg.MarchCreateData march_datas   = 5;
    MapPlayerExtandData extand_data                 = 6;
    MapPlayerPresbyterData presbyter_data           = 7; // 可以放主动技能的英雄数量不同server可能不同
    bool is_new_player                              = 8;
}

message MapPlayerRegisterResultData
{
    uint64 player_id                                    = 2;
    CastleCreateResultData castle_result_data           = 3;
    repeated MarchCreateResultData march_result_datas   = 4;
    bool                           is_new               = 5;

}

message MapPlayerUnRegisterResultData
{
    uint64 player_id        = 1;
    uint32 state_id         = 2;
    uint32 ap               = 3;// 行动力
    int64 last_ap_add_time  = 4;// 行动力 v0
    MapPlayerPresbyterData presbyter_data = 5; // 可以放主动技能的英雄数量不同server可能不同
}

message MapPlayerUpdateData
{
    bool is_reset_data = 1;
    protomsg.MapPlayerData player_data   = 2;
    protomsg.ArmyHeroData  garrison_data = 3;
    repeated protomsg.MarchHeroData march_heros   = 4;
}

message BarbariansData
{
    uint32 time             = 2;
    uint32 barbarians_id    = 3;
}

message SummonData
{
    uint32 summon_id    = 1;
}

message TrapData
{
    uint32 trap_id  = 1;
}

message ArmyData
{
    uint32 hero1                            = 1;    // 主将ID
    uint32 hero2                            = 2;    // 副将ID

    repeated TroopData init_troops          = 3;    // 初始兵团

    uint32 hero1_level                      = 4;    // 主将ID 等级
    uint32 hero2_level                      = 6;    // 副将ID 等级

    repeated TroopData current_troops       = 8;    // 剩余（存活）兵团
    repeated TroopData slight_wood_troops   = 9;    // 轻伤的兵量
    uint32 radius                           = 22;   // 部队半径*1000
}

message MarchArmyData
{
    HeroInfo hero1                          = 1;    // 主将ID
    HeroInfo hero2                          = 2;    // 副将ID

    repeated TroopData init_troops          = 3;    // 初始兵团

    repeated TroopData current_troops       = 4;    // 剩余（存活）兵团
    repeated TroopData slight_wood_troops   = 5;    // 轻伤兵团
    repeated TroopData dead_troops          = 6;    // 死亡兵团
}

message ArmyComponentData
{
    protomsg.MarchArmyData army_data        = 1;
    protomsg.MarchArmyData watch_tower_data = 2;
    repeated TroopData init_troops          = 3;    // 初始兵团
}

// 增援队伍时间数据
message ReenforceArmyData
{
    int64 arrived_time  = 1;    // 增援入驻时间戳，未到达为0
    ArmyData army       = 2;
    uint64 player_id    = 3;
    string player_name  = 4;
    string head         = 5;
    vector2d pos        = 6;    // 当前位置
    uint64 entity_id    = 7;    // 地图entity id
    int64 speed         = 8;    // 行军速度
    MoveData move_data  = 9;    // 路径
}

// 增援信息
message ReenforceInfo
{
    uint64 entity_id                        = 1;    // 自身（建筑、集结）的entity id
    EntityType entity_type                  = 2;    // entity类型
    uint64 leader_entity_id                 = 3;
    repeated ReenforceArmyData reenforces   = 4;
    uint32 capacity                         = 5;    // 援军上限
}

// 增援入驻时间信息
message ReenforceJoinTimeInfo
{
    uint64 entity_id    = 1;
    int64 time          = 2;
}

// 数据库存储的增援数据
message DBReenforceData
{
    repeated ReenforceJoinTimeInfo infos    = 1;
}

message ArmyHeroData
{
    HeroInfo hero1  = 1;    // 主将ID
    HeroInfo hero2  = 2;    // 副将ID
}

// 驻扎英雄数据
message GarrisonData
{
    HeroInfo hero1  = 1;    // 主将ID
    HeroInfo hero2  = 2;    // 副将ID
}

// 行军英雄数据
message MarchHeroData
{
    uint32 march_index      = 1;
    ArmyHeroData hero_data  = 2;
}

// 打野信息
message KillBarbariansData
{
    int32 barbarians_lv = 4;
}

message EffectData
{
    repeated EffectInfo effect  = 1;
}

message CastleExtendData
{
    uint64 kill_count       = 1;
    uint64 battle_power     = 2;
    bool in_peace_shield    = 3;
    uint32 camp_id          = 4;
}

message AttackTargetData
{
    uint64 tar_entity_id    = 1;
}

message AttackStickEnemyData
{
    uint64 tar_entity_id    = 1;    // 目标entity_id
    bool is_stick           = 2;    // 释放粘着.
}

message MoveSpeedData
{
    int64 move_speed    = 1;
}

message SkillStatus
{
    uint64 caster_entity_id     = 1;    // 授予者id，可能为0
    int32 status_id             = 2;    // status id
    uint64 status_expire_time   = 3;    // status到期时间
    uint32 overlap              = 4;    // status层数
    uint32 caster_hero_id       = 5;    // 释放的英雄id
}

message SkillStatusData
{
    repeated SkillStatus status_set = 1;
}

message MultiStrikeData
{
    int32 multi_strike  = 1;    // 触发的夹击数
}

message BattleStatusData
{
    uint32 is_battle    = 1;
}

// MapServer持有的玩家建筑信息
message MapBuildingInfo
{
    uint32 id       = 1;    // 建筑动态ID
    uint32 type     = 2;    // 建筑类型
    uint32 level    = 3;    // 等级
}

message MapBuildingData
{
    repeated MapBuildingInfo buildings  = 1;
}

message MapData
{
    bool is_in_map      = 1;
    vector2d position   = 2;
    vector2d direction  = 3;
}

message MoveData
{
    uint32 move_status  = 1;
    vector2d position   = 3;    // 位置
    PathData path_find  = 4;
}

message MovePathData
{
    repeated vector2d paths = 2;
}

message MapPlayerBaseData
{
    uint64 player_id    = 1;
    uint32 level        = 2;
    string name         = 3;
    string head         = 4;

    uint64 kill_count   = 5;
    uint64 battle_power = 6;
    uint32 camp_id      = 7;
    uint32 kill_barbarians_lv = 8;

    uint64 guild_id     = 10;
    GuildPosition guild_position	= 11;

    uint32 ap = 15;// 行动力
	int64 last_ap_add_time = 16;// 行动力 v0

    uint32 kingdom_id   = 20;
    uint32 force_id     = 21;

    uint64 last_login_time   = 30;
    uint64 last_logout_time = 31;

    uint64 other_power = 32;

    repeated uint32 stronghold_ids = 33;
}

message MainCastleData
{
    CityWallData city_wall  = 1;
}

message CityWallData
{
    int64 start_burn_time   = 1;
    int64 end_burn_time     = 2;
    uint32 speed            = 3;    // （燃烧）速度
}

message CityWallAllData
{
    int64 start_burn_time       = 1;
    int64 end_burn_time         = 2;
    uint32 lost_durable_count   = 5;    // 丢失耐久度
    int64 repair_interval_time  = 6;    // 维修间隔时间
    uint32 notice_move          = 7;
    uint32 speed                = 8;
}

message GarrisonHeroData
{
  uint32 select_main_hero_id = 1;    //选择的驻防主将英雄
  uint32 select_second_hero_id = 2;  //选择的驻防副将英雄
  uint32 cur_main_hero_id = 3;       //当前的驻防主将英雄
  uint32 cur_second_hero_id = 4;     //当前的驻防副将英雄
}

message PlayerMarch
{
    uint64 id                               = 1;    // id
    uint32 march_index                      = 2;    // 
    uint64 player_id                        = 3;    // 玩家ID
    uint64 guild_id                         = 4;    // 公会ID

    MapData map_data                        = 20;
    MarchCommand command_data               = 30;
    MarchArmyData army_data                 = 40;
    EffectData effect_data                  = 50;
    MoveData move_data                      = 60;
    KillBarbariansData kill_barbarians_data = 70;
    protomsg.ResourceData resource_data     = 80;
}

message MapViewerData
{
    uint64 player_id            = 1;
    ServerAddressInfo address   = 2;

    vector2d view_position      = 4;

    uint32 view_lod             = 5;
}

// message SyncCastleData
// {
// uint64 id = 1;        // id
// uint32 kingdom_id = 2; //岛屿ID
// vector2d position = 3; // 位置
// uint64 owner_id = 4;
// uint32 level = 5;
// string name = 6;
// }

// message SyncMarchData
// {
// uint64 id = 1; // id
// uint32 kingdom_id = 2; //岛屿ID
// vector2d position = 3; // 位置
// uint64 owner_id = 4;
// uint32 level = 5;
// string name = 6;
// int64 spped = 7;

// MarchCommand command = 10;
// PathData path_find = 11;
// }

message SyncData
{
    uint32 type     = 1;
    bytes content   = 2;
}

message SyncEntityData
{
    EntityType entity_type  = 1;
    uint64 entity_id        = 2;
    repeated SyncData data  = 3;
}

message MarchData
{
    uint32 march_index      = 1;
    uint64 entity_id        = 3;
    vector2d position       = 4;    // 位置
    uint32 status           = 5;

    MarchCommand command    = 10;
    ArmyData army           = 20;
}

message CastleData
{
    uint64 entity_id    = 2;
    vector2d position   = 3;    // 位置
    ArmyData army       = 4;
}

enum CollectType
{
    kCollectTypeNone        = 0;
    kCollectTypeFood        = 1;
    kCollectTypeWood        = 2;
    kCollectTypeSteel       = 3;
    kCollectTypeOil         = 4;
    kCollectTypeGemStone    = 5;
    kCollectTypePompeii     = 6;
}

enum GuildResourceFieldType
{
    kResourceFieldTypeNone  = 0;
    kResourceFieldTypeFood  = 1;    // 食物
    kResourceFieldTypeWood  = 2;    // 木材
    kResourceFieldTypeSteel = 3;    // 钢材
    kResourceFieldTypeOil   = 4;    // 石油
}

message GuildBaseData
{
    uint64 guild_id     = 1;
    string guild_name   = 2;
}

enum GuildMarchMemberStatus
{
    kGuildMarchMemberStatus_None    = 0;
    kGuildMarchMemberStatus_Arrival = 1;
}

enum GuildMarchStatus
{
    kGuildMarchStatus_None          = 0;
    kGuildMarchStatus_BuildUp       = 1;
    kGuildMarchStatus_WaitArrival   = 2;
    // kGuildMarchStatus_Creating    = 3;
    kGuildMarchStatus_Moving        = 4;
    kGuildMarchStatus_Battle        = 5;
    kGuildMarchStatus_Disband       = 6;
}

message EntityBaseData
{
    EntityType type         = 1;
    uint64 entity_id        = 2;
    uint32 config_id        = 3;

    uint64 id               = 4;
    string name             = 5;
    string head             = 6;

    uint64 guild_id         = 7;
    string guild_name       = 8;
    string guild_short_name = 9;

    vector2d position       = 10;
}

message MarchTargetData
{
    EntityType type             = 1;
    uint64 entity_id            = 2;
    uint32 config_id            = 3;

    EntityOwnerData owner_data  = 4;
    uint32 main_hero_id         = 5;
    CollectData collect_data    = 6;

    vector2d position           = 10;
}

message ScoutPlayerBase
{
    uint64 player_id    = 1;
    string head         = 2;
    string player_name  = 3;
    MapGuildData guild  = 4;
}

message PlayerGuildMarch
{
    uint64 entity_id        = 1;

    uint64 player_id        = 2;
    uint64 guild_id         = 3;
    uint32 status           = 4;
    int64 end_time          = 5;
    uint32 max_army_count   = 6;
    int64 start_time        = 7;

    MapData map_data        = 8;
    MarchCommand command    = 9;
}

message MapPlayerData
{
    uint64 player_id                = 1;    // id
    MapPlayerBaseData base_data     = 2;
    EffectData effect_data          = 3;
    MapBuildingData building_data   = 4;
}

message PlayerMapData
{
    uint64 player_id                = 1;    // id
    MapPlayerBaseData base_data     = 2;
    protomsg.CastleData castle      = 3;
    repeated protomsg.MarchData marchs = 4;
    repeated protomsg.CarriageData carriages = 5;
}

message PlayerPresbyter
{
  repeated protomsg.Presbyter presbyters = 1;
}

//////////////////////////////////////////////////////////////////////////
///  战斗模块 开始
//////////////////////////////////////////////////////////////////////////
message BattleSkill
{
    int32 skill_id  = 1;

    int64 cd_time   = 2;

    int32 skill_lv  = 3;
}

message TroopDelta
{
    int32 troop_id      = 1;    // id
    int32 troop_uints   = 2;    // 兵团数量
}

message SkillImpact
{
    uint64 tar_entity_id                = 1;    // 目标方id
    int32 tar_troop_mod                 = 2;    // 目标方兵力变化
    repeated TroopData tar_remain_troop = 3;    // 目标方剩余总兵力
    bool tar_dead                       = 4;    // 目标方是否死亡（是否死亡即溃败，请以此标志状态判断是否死亡）
    int32 durable                       = 5;    // 耐久值变化
    bool miss                           = 6;    // 是否闪避
}


// 技能效果
message SkillResult
{
    uint64 src_entity_id                = 1;    // 发起方id
    uint32 skill_id                     = 2;    // 技能ID
    int32 counterattack_troop_mod       = 3;    // 反击兵力变化
    repeated TroopData src_remain_troop = 4;    // 发起方剩余兵力
    bool src_dead                       = 5;    // 发起方是否死亡(1.4版本启用暂时保留逻辑)
    int32 remain_rage                   = 6;    // 剩余怒气(1.4版本启用暂时保留逻辑)
    int32 herocfgid                     = 7;    // 技能关联的英雄配置id

    repeated SkillImpact skill_impacts  = 9;

    uint32 skill_lv                     = 21;   // 技能等级
    uint32 status_id                    = 22;   // 状态id
    uint32 status_overlap               = 23;   // 状态叠加数
}

//////////////////////////////////////////////////////////////////////////
///  战斗模块 结束
//////////////////////////////////////////////////////////////////////////


enum MoveCastleType
{
    kMoveCastleType_None        = 0;
    kMoveCastleType_Position    = 1;
    kMoveCastleType_Domain      = 2;
    kMoveCastleType_NewPlayer   = 3;
    kMoveCastleType_Random      = 4;
    kMoveCastleType_Pompeii     = 5;
    kMoveCastleType_Burn        = 6;
    kMoveCastleType_GuildMaster = 7;

    kMoveCastleType_PM          = 99;
}

//////////////////////////////////////////////////////////////////////////
///  联盟建筑模块 开始
//////////////////////////////////////////////////////////////////////////

message GuildCollectBuildingData
{
    uint64 remain_resource_count            = 1;
    uint64 total_speed                      = 2;    // 总采集速度
    uint64 arrived_count                    = 3;    // 到达人数
    uint64 not_leave_remain_resource_count  = 4;
}

message GenericMonsterData
{
    uint32 monster_id   = 1;
    uint64 death_time   = 2;    // 死亡时间
    uint32 index        = 3;    // 索引, 多用途字段, 用于标注某种顺序
}
message SummonMonsterData
{
    uint32 monster_id   = 1;
    uint64 death_time   = 2;    // 死亡时间
    uint32 index        = 3;    // 索引, 多用途字段, 用于标注某种顺序
}
message ExpeStrongholdData
{
    uint32 monster_id   = 1;
    uint64 death_time   = 2;    // 死亡时间
    uint32 index        = 3;    // 索引, 多用途字段, 用于标注某种顺序
}

message ExpeEnemyFortData
{
    uint32 monster_id   = 1;
    uint64 death_time   = 2;    // 死亡时间
    uint32 index        = 3;    // 索引, 多用途字段, 用于标注某种顺序
}

message ExpeGroupMarchData
{
    uint32 monster_id   = 1;
    uint64 death_time   = 2;    // 死亡时间
    bool is_home_side   = 3;    // 是否本方
    uint32 index        = 4;    // 索引, 多用途字段, 用于标注某种顺序
}

message TrafficUnitData
{
    uint32 monster_id   = 1;
    uint64 death_time   = 2;    // 死亡时间
    uint32 index        = 3;    // 索引, 多用途字段, 用于标注某种顺序
}

message MapGuildBuildingRequestData
{
    uint64 guild_id                 = 1;
    uint32 config_id                = 2;
    protomsg.vector2d position      = 3;
    uint64 player_id                = 4;
    uint32 record_count             = 5;
    protomsg.ResourceSet resources  = 6;
}

// 创建据点请求
message MapCreateStrongHoldRequestData
{
    uint64 guild_id                 = 1;
    uint32 config_id                = 2;
    uint32 strong_hold_id           = 3;
    uint64 player_id                = 4;
    uint32 record_count             = 5;
    protomsg.ResourceSet resources  = 6;
}

message GuildCollectMarchData
{
    uint64 march_entity_id      = 1;    // 所属部队的entity_id;
    uint64 start_time           = 2;    // 开始采集时间
    uint64 end_time             = 3;    // 结束采集时间
    uint64 already_collect      = 4;    // 已经采集的数量
    uint64 speed                = 5;    // 采集的速度
    uint64 max_collect_count    = 6;    // 最大采集的数量
    uint64 collect_time         = 7;    // 采集时间
}

message MapGuildBuildingDB
{
    GuildBuildingData building              = 1;

    uint64 last_calculat_time               = 4;
    uint64 construct_player_id              = 5;    // (发起)建造者
    uint64 construct_speed                  = 6;
    uint32 record_count                     = 7;
    protomsg.ResourceSet record_resources   = 8;
    uint64 last_attack_guild_id             = 9;
}

message MapGuildCollectDB
{
    GuildCollectBuildingData building_data              = 1;
    repeated GuildCollectMarchData collect_march_data   = 2;
}

//////////////////////////////////////////////////////////////////////////
///  联盟建筑模块 结束
//////////////////////////////////////////////////////////////////////////


enum TempleStatusType
{
    kTempleStatusType_NotOpen   = 0;    // 未开启
    kTempleStatusType_Open      = 1;    // 开启
    kTempleStatusType_Capture   = 2;    // 占领
    kTempleStatusType_Protect   = 3;    // 保护
}

// 奇观被占领状态
enum TempleIsCapturedStatus
{
    kTempleIsCapturedStatus_Not = 0;
    kTempleIsCapturedStatus_Yes = 1;
}

// 关卡转态
enum PassStatusType
{
    kPassStatusType_NotOpen = 0;    // 未开启
    kPassStatusType_Open    = 1;    // 开启
    kPassStatusType_Capture = 2;    // 占领
    kPassStatusType_Protect = 3;    // 保护
}

// 关卡被占领状态
enum PassIsCapturedStatus
{
    kPassIsCapturedStatus_Not   = 0;
    kPassIsCapturedStatus_Yes   = 1;
}

//////////////////////////////////////////////////////////////////////////
///  野蛮人城寨
//////////////////////////////////////////////////////////////////////////
message BarbarianFortData
{
    int64 generate_time = 1;    // 城寨产生时间
    int64 monster_id    = 2;    // 对应怪物表的id
}

//////////////////////////////////////////////////////////////////////////
///  奇观开始
//////////////////////////////////////////////////////////////////////////

// 公会奇观和关卡数据
message GuildTempleData
{
    uint32 config_id            = 2;
    bool is_battle              = 3;
    vector2d pos                = 4;
    uint32 status               = 5;
    uint64 city_lord_id         = 6;
    int64 appoint_reset_time    = 7;
    uint32 level = 8;
}

// 公会奇观和关卡数据
message GuildPassData
{
    uint32 config_id    = 2;
    bool is_battle      = 3;
    vector2d pos        = 4;
    uint32 status       = 5;
    uint32 level = 8;
}

// 公会据点数据
message GuildStrongholdData
{
    uint32 config_id    = 1;
    bool is_battle      = 2;
    vector2d pos        = 3;
    uint32 status       = 4;
    uint32 level        = 5;
    uint32 durability   = 6;
    uint32 durability_max = 7;
    int64 reward_time = 8;
    int64 capture_time = 9;
}

enum GuildBuildingBagType
{
    kGuildBuildingBagNone       = 0;
    kGuildBuildingBagFort       = 1;
    kGuildBuildingBagCollect    = 2;
    kGuildBuildingBagFlag       = 3;
}

message TempleResource
{
    repeated protomsg.Resource res  = 1;
}

//////////////////////////////////////////////////////////////////////////
///  奇观结束
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///  地图搜索模块 开始
//////////////////////////////////////////////////////////////////////////

enum MapSearchType
{
    option allow_alias = true;
    kMapSearchType_Start                = 0;
    kMapSearchType_Barbarians           = 0;
    kMapSearchType_Food                 = 1;
    kMapSearchType_Wood                 = 2;
    kMapSearchType_Steel                = 3;
    kMapSearchType_Oil                  = 4;
    kMapSearchType_GemStone             = 5;
    kMapSearchType_AdvanceBarbarians    = 6;
    kMapSearchType_End                  = 6;

    kMapSearchType_PerformanceTestStart = 10;
    kMapSearchType_Castle               = 10;
    kMapSearchType_March                = 11;
    kMapSearchType_BarbarianFort        = 12;
    kMapSearchType_Pompeii              = 13;
    kMapSearchType_PerformanceTestEnd   = 13;
}

enum MapSearchCreateEntityType
{
    kMapSearchCreateEntityType_None             = 0;    // 不创建
    kMapSearchCreateEntityType_NotSearch        = 1;    // 未找到就创建
    kMapSearchCreateEntityType_SearchSameEntity = 2;    // 找到相同的对象,就创建
    kMapSearchCreateEntityType_CreateByPos      = 3;    // 根据坐标直接创建
    kMapSearchCreateEntityType_CreateByRange    = 4;    // 根据坐标范围直接创建
}

//////////////////////////////////////////////////////////////////////////
///  地图搜索模块 结束
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
///  预警模块 开始
//////////////////////////////////////////////////////////////////////////

enum MapAlarmType
{
    kMapAlarm_MarchAttack       = 0;
    kMapAlarm_Reenforce         = 1;
    kMapAlarm_Scout             = 2;
    kMapAlarm_GuildMarchAttack  = 3;
    kMapAlarm_Carriage          = 4;
}

message MarchAlarmData
{
    uint64 entity_id            = 1;
    EntityOwnerData owner_data  = 2;
    ArmyData army_data          = 3;
    vector2d pos                = 4;
}

message GuildMarchAlarmData
{
    uint64 entity_id            = 1;
    EntityOwnerData owner_data  = 2;
    ArmyData army_data          = 3;
    int64 start_march_time      = 4;
    int64 end_march_time        = 5;
    vector2d start_pos          = 6;
    GuildMarchStatus status     = 7;
    uint32 march_capacity       = 8;
    int64 march_speed           = 9;
    vector2d cur_pos            = 10;
}

message ScoutAlarmData
{
    uint64 player_id    = 1;
    string player_name  = 2;
    uint64 entity_id    = 3;
}

message MapAlarmData
{
    MapAlarmType alarm_type = 1;
    bytes alarm_content     = 2;
}

message MapAlarmDatas
{
    uint64 target_entity_id     = 1;
    repeated MapAlarmData datas = 2;
}

message MapAlarmSyncData
{
    uint64 entity_id    = 1;
    vector2d src_pos    = 2;
}

message MapAlarmSyncDatas
{
    repeated MapAlarmSyncData datas = 1;
}

message CarriageAlarmData
{
    uint64 player_id    = 1;
    string player_name  = 2;
    vector2d pos        = 3;
    uint64 entity_id    = 4;
}

//////////////////////////////////////////////////////////////////////////
///  预警模块 结束
//////////////////////////////////////////////////////////////////////////

message EntityScoutData
{
    uint32 scout_index  = 1;
    int64 scout_speed   = 2;
}

message ScoutExtendData
{
    vector2d castle_pos = 1;
}

//////////////////////////////////////////////////////////////////////
message MistData
{
    bool all_open   = 1;    // 迷雾是否全开
    bytes data      = 2;    // 迷雾二进制zip压缩数据
}

message MapMiscData
{
    uint64 carriage_send_count = 2;
    uint64 carriage_receive_count = 3;
    int64 last_reset_time = 4;
}

enum ExploreStatus
{
    kExploreStatus_Hiden    = 0;    // 隐藏
    kExploreStatus_Found    = 1;    // 已发现
    kExploreStatus_Visited  = 2;    // 已访问
    kExploreStatus_Awarded  = 3;    // 已领奖
}

// 村庄数据
message VillageInfo
{
    bool is_all_awarded         = 1;    // 是否已全部领奖
    bool is_all_found           = 2;    // 是否已全部发现
    repeated uint64 founds      = 3;    // 已发现
    repeated uint64 awardeds    = 4;    // 已领奖
}

// 山洞数据
message CaveInfo
{
    uint64 id       = 1;
    uint32 status   = 2;    // 参见ExploreStatus
    uint32 scout    = 3;    // 哪个斥候访问的
    bool  extra    = 4;     // 是否已经领取额外奖励
}

// 山洞组
message CaveGroupInfo
{
    uint32 group_id         = 1;
    repeated CaveInfo caves = 2;
}

// 探索其他建筑信息
message ExploreBuildingInfo
{
    bool is_all_visited         = 1;    // 是否已全部访问
    bool is_all_found           = 2;    // 是否已全部发现
    repeated uint64 founds      = 3;    // 已发现
    repeated uint64 visiteds    = 4;    // 已访问
    uint32 found_temple_count   = 5;    // 已发现奇观数量
    uint32 found_pass_count     = 6;    // 已发现关卡数量
}

//自动探索状态
enum  AutoExploreStateType
{
    KExplpore_None      = 0;        //未开始
    KExplpore_Doing     = 1;        //进行中
    KExplpore_Finish    = 2;        //结束
}

//自动探索信息
message AutoExplporeInfo
{
    uint32 scout_id             = 1;    //斥候id
    uint32 end_time             = 2;    //结束时间
    uint32 explore_state        = 3;    //状态
}

// 玩家个人探索信息
message PlayerExploreInfo
{
    VillageInfo villages                = 1;
    repeated CaveGroupInfo cave_groups  = 2;
    ExploreBuildingInfo buildings       = 3;

    uint32 explore_level                = 4;    //探索等级
    uint32 explore_exp                  = 5;    //探索经验
    repeated AutoExplporeInfo auto_infos  = 6;  //自动探索信息
}

message ReenforceData
{
    uint64 arrived_count    = 1;    // 已达到部队数
    uint64 waiting_count    = 2;    // 在路上的部队数
    uint64 capacity         = 3;    // 容量
    uint64 leader_id        = 4;    // 队长玩家ID
    string leader_name      = 5;
}


//////////////////////////////////////////////////////////////////////////
///  庞贝建筑模块 开始
//////////////////////////////////////////////////////////////////////////

enum PompeiiBuildStatus
{
    kPompeiiBuildStatus_NotOpen     = 0;    // 未开启
    kPompeiiBuildStatus_CanSnatch   = 1;    // 可抢夺
    kPompeiiBuildStatus_Snatching   = 2;    // 抢夺中
    kPompeiiBuildStatus_Occupied    = 3;    // 占领中
}

// 庞贝的复仇建筑数据
message PompeiiBuildData
{
    PompeiiBuildStatus status   = 1;    // 建筑的状态
    int64 start_time            = 2;    // 开始时间
    int64 end_time              = 3;    // 结束时间
    uint64 first_occupid_id     = 4;    // 首次占领的公会ID
    bool is_battle = 5;   //是否在战斗
}

// 建筑类型
enum PompeiiBuildType
{
    kPompeiiBuildType_None      = 0;    // 
    kPompeiiBuildType_Point     = 1;    // 积分建筑
    kPompeiiBuildType_Relocate  = 2;    // 迁城建筑
    kPompeiiBuildType_TrainStation  = 3;    // 火车站
    kPompeiiBuildType_StartRailwayPlatform  = 4;    // 起始月台
    kPompeiiBuildType_EndRailwayPlatform  = 5;    // 终点月台
    kPompeiiBuildType_Lab       = 7;    // 生化实验室
}

//////////////////////////////////////////////////////////////////////////
///  庞贝建筑模块 结束
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
///  庞贝怪模块 开始
//////////////////////////////////////////////////////////////////////////

message EntityPompeiiMonsterData
{
    uint32 monster_id   = 1;
    int64 generate_time = 2; // 生成时间
}

message EntityPompeiiBossData
{
    uint32 monster_id   = 1;
    int64 generate_time = 2; // 生成时间
}

//////////////////////////////////////////////////////////////////////////
///  庞贝怪模块 结束
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
///  运输车模块 开始
//////////////////////////////////////////////////////////////////////////

message EntityCarriageData
{
    uint32 march_index              = 1;
    int64 speed               = 4;
}

message CarriageCreateData
{
    MarchCommand command    = 1;
    ResourceSet resources = 2;
}

message CarriageCreateResultData
{
    uint64 entity_id            = 1;
    uint32 march_index          = 2;
}

message CarriageDetailedData
{
    uint32 march_index      = 1;
    uint64 entity_id        = 3;
    vector2d position       = 4; // 位置
    uint32 tax              = 5; // 税率   
    ResourceSet resource    = 6;  
    MarchCommand command    = 10;
}

message CarriageCapacityData
{
    uint64 carriage_send_count = 2; // 剩余发送数量
    uint64 carriage_receive_count = 3; // 剩余接收数量
    uint64 player_id = 4;
    uint32 trading_post_level = 5;   // 贸易站等级
}

message CarriageCapacityInfo
{
  repeated CarriageCapacityData datas = 1;
}

//////////////////////////////////////////////////////////////////////////
///  运输车模块 结束
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
///  国王模块 开始
//////////////////////////////////////////////////////////////////////////

message EntityKingdomTitle
{
  uint32 title = 1; // 头衔
}

message KingBaseData
{
    uint64 king_player_id = 1; // 国王
    uint64 king_guild_id = 2;
    string name = 3;
    uint64 kingdom_id = 4;
}


//////////////////////////////////////////////////////////////////////////
///  国王模块 结束
//////////////////////////////////////////////////////////////////////////

enum AddArmySourceType
{
    kAddArmySourceType_None    = 0;
    kAddArmySourceType_Train   = 1;    // 训练
    kAddArmySourceType_Cure    = 2;    // 治疗
    kAddArmySourceType_Pm      = 3;    // pm
    kAddArmySourceType_Resource      = 4;    // 资源
    kAddArmySourceType_MarchIntoHome = 5; // 部队回城
}

// 奇观城墙入库数据
message TempleWallDbData
{
    uint32 durability   = 1;    // 耐久度
}


// 奇观城墙同步数据
message TempleWallData
{
    uint32 durability   = 1;    // 耐久度
    uint32 durability_max = 2;  // 耐久度上限
}

// 掉落入库数据
message DropDBData
{
    DropItemType drop_item_type = 1;    // 掉落物类型
    uint32 drop_item_id         = 2;    // 掉落物ID
    int64 end_time              = 3;    // 掉落消失时间
}

// 掉落同步数据
message DropSyncData
{
    DropItemType drop_item_type = 1;    // 掉落物类型
    uint32 drop_item_id         = 2;    // 掉落物ID
    int64 end_time              = 3;    // 掉落消失时间
}

// 奇怪守卫怪同步数据
message TempleGuardMonsterData
{
    uint32 monster_id   = 1;
    uint64 death_time   = 2;    // 死亡时间
    uint32 index        = 3;    // 索引, 多用途字段, 用于标注某种顺序
}

//////////////////////////////////////////////////////////////////////////
///  庞贝生化实验室模块 开始
//////////////////////////////////////////////////////////////////////////

// 庞贝生化实验室
message PompeiiLabData
{
    uint64 culture_tank_entity_id = 1; // 培养槽的entity_id
    uint32 last_index = 2; // 上一个培养槽索引
    int64 refresh_time = 3; // 上个培养槽的刷新时间
    bool in_lab = 4; // 是否培养槽在实验室里
}

// 庞贝培养槽
message PompeiiCultureTankData
{
    uint64 march_entity_id = 1; // 被采集的军队
    uint32 index = 2;  // 培养槽索引
    uint64 lab_entity_id = 3; // 实验室的entity_id
}

message MarchPickUpData
{
    int64 start_time = 2;  // 采集开始时间
    int64 end_time = 3; // 采集结束时间
}

//////////////////////////////////////////////////////////////////////////
///  庞贝生化实验室模块 结束
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
///  火车模块 开始
//////////////////////////////////////////////////////////////////////////

enum TrainStatus
{
    kTrainStatus_None     = 0;
    kTrainStatus_Waiting  = 1; // 等待中
    kTrainStatus_Running  = 2; // 行驶中
}

// 火车站
message TrainStationEntityData
{
}

// 月台
message RailwayPlatformEntityData
{
    uint64 train_entity_id = 1;
}

// 火车
message TrainEntityData
{
    TrainStatus status = 1;
    int64 start_time = 2;  // 发车时间
    int64 end_time = 3;    // 到站时间
    uint64 from_platform = 4; // 出发月台
    uint64 to_platform = 5; // 到站月台
    bool first_wait = 6;
}

//////////////////////////////////////////////////////////////////////////
///  火车模块 结束
//////////////////////////////////////////////////////////////////////////


message PrivateRadarMonsterData
{
    uint32 monster_id   = 1;
    uint64 death_time   = 2;    // 死亡时间
    uint32 index        = 3;    // 索引, 多用途字段, 用于标注某种顺序
    uint64 owner_player_id = 4; // 所属玩家id
    uint64 owner_radar_id = 5;  // 所属雷达id
    string owner_player_name = 6;  // 所属玩家名字
}

message PublicRadarMonsterData
{
    uint32 monster_id   = 1;
    uint64 death_time   = 2;    // 死亡时间
    uint32 index        = 3;    // 索引, 多用途字段, 用于标注某种顺序
    uint64 owner_player_id = 4; // 所属玩家id
    uint64 owner_radar_id = 5;  // 所属雷达id
}

// 据点状态
enum StrongholdStatusType
{
    kStrongholdStatusType_Open   = 0;    // 开放
    kStrongholdStatusType_Protect   = 1; // 保护
}

// 据点同步数据
message StrongholdData
{
    uint32 status           = 1;    // 当前的状态(未占领,占领中,休息)
    int64 start_time        = 2;    // 状态的持续时间
    int64 end_time          = 3;    // 状态的消失时间
    int64 reward_time       = 4;    // 下次领取奖励时间
    uint32 durability       = 5;    // 耐久度
    uint32 durability_max   = 6;    // 耐久度上限
    bool is_active          = 7;    // 是否激活中
    bool is_captured        = 8;    // 是否被占领过
    bool is_battle          = 9;   // 是否在战斗中
    int64 capture_time      = 10;    // 占领时间
}

// 据点入库数据
message StrongholdDbData
{
    uint32 status           = 1;    // 当前的状态(未占领,占领中,休息)
    int64 start_time        = 2;    // 状态的持续时间
    int64 end_time          = 3;    // 状态的消失时间
    int64 reward_time       = 4;    // 下次领取奖励时间
    uint32 durability       = 5;    // 耐久度
    int64 capture_time      = 6;    // 占领时间
}

