// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg_common_task.proto

package protomsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 任务类型
type TaskType int32

const (
	TaskType_kTaskTypeNone          TaskType = 0
	TaskType_kTaskTypeMain          TaskType = 1
	TaskType_kTaskTypeBranch        TaskType = 2
	TaskType_kTaskTypeDaily         TaskType = 3
	TaskType_kTaskTypeActivity      TaskType = 4
	TaskType_kTaskTypeGuildActivity TaskType = 5
	TaskType_kTaskTypeGuildDerby    TaskType = 6
	TaskType_kTaskTypeHonor         TaskType = 7
	TaskType_kTaskTypeGlobalServer  TaskType = 8
	TaskType_kTaskTypeGuild         TaskType = 9
	TaskType_kTaskTypePlayer        TaskType = 10
)

var TaskType_name = map[int32]string{
	0:  "kTaskTypeNone",
	1:  "kTaskTypeMain",
	2:  "kTaskTypeBranch",
	3:  "kTaskTypeDaily",
	4:  "kTaskTypeActivity",
	5:  "kTaskTypeGuildActivity",
	6:  "kTaskTypeGuildDerby",
	7:  "kTaskTypeHonor",
	8:  "kTaskTypeGlobalServer",
	9:  "kTaskTypeGuild",
	10: "kTaskTypePlayer",
}
var TaskType_value = map[string]int32{
	"kTaskTypeNone":          0,
	"kTaskTypeMain":          1,
	"kTaskTypeBranch":        2,
	"kTaskTypeDaily":         3,
	"kTaskTypeActivity":      4,
	"kTaskTypeGuildActivity": 5,
	"kTaskTypeGuildDerby":    6,
	"kTaskTypeHonor":         7,
	"kTaskTypeGlobalServer":  8,
	"kTaskTypeGuild":         9,
	"kTaskTypePlayer":        10,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}
func (TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor57, []int{0} }

// 任务状态
type TaskStatus int32

const (
	TaskStatus_kTaskStatusNone     TaskStatus = 0
	TaskStatus_kTaskStatusExecute  TaskStatus = 1
	TaskStatus_kTaskStatusAward    TaskStatus = 2
	TaskStatus_kTaskStatusComplete TaskStatus = 3
)

var TaskStatus_name = map[int32]string{
	0: "kTaskStatusNone",
	1: "kTaskStatusExecute",
	2: "kTaskStatusAward",
	3: "kTaskStatusComplete",
}
var TaskStatus_value = map[string]int32{
	"kTaskStatusNone":     0,
	"kTaskStatusExecute":  1,
	"kTaskStatusAward":    2,
	"kTaskStatusComplete": 3,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}
func (TaskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor57, []int{1} }

type TaskConditionType int32

const (
	TaskConditionType_kTaskCondition_None                             TaskConditionType = 0
	TaskConditionType_kTaskCondition_QualityHeroCount                 TaskConditionType = 1
	TaskConditionType_kTaskCondition_HeroCount                        TaskConditionType = 2
	TaskConditionType_kTaskCondition_HeroLevel                        TaskConditionType = 3
	TaskConditionType_kTaskCondition_LevelHeroCount                   TaskConditionType = 4
	TaskConditionType_kTaskCondition_LevelArmyCount                   TaskConditionType = 5
	TaskConditionType_kTaskCondition_BattlePower                      TaskConditionType = 6
	TaskConditionType_kTaskCondition_BuildingLevel                    TaskConditionType = 7
	TaskConditionType_kTaskCondition_CollectResource                  TaskConditionType = 8
	TaskConditionType_kTaskCondition_TechLevel                        TaskConditionType = 9
	TaskConditionType_kTaskCondition_JoinGuild                        TaskConditionType = 10
	TaskConditionType_kTaskCondition_CompleteChapter                  TaskConditionType = 11
	TaskConditionType_kTaskCondition_CityStrategyLevel                TaskConditionType = 12
	TaskConditionType_kTaskCondition_AnyHeroStar                      TaskConditionType = 13
	TaskConditionType_kTaskCondition_StrategyBuilding                 TaskConditionType = 14
	TaskConditionType_kTaskCondition_AnyTechLevel                     TaskConditionType = 15
	TaskConditionType_kTaskCondition_AwakenHeroCount                  TaskConditionType = 16
	TaskConditionType_kTaskCondition_ExpeditionPassCount              TaskConditionType = 17
	TaskConditionType_kTaskCondition_LevelBuildingCount               TaskConditionType = 18
	TaskConditionType_kTaskCondition_ResourceBuildingLevel            TaskConditionType = 19
	TaskConditionType_kTaskCondition_StarHeroCount                    TaskConditionType = 20
	TaskConditionType_kTaskCondition_TechCount                        TaskConditionType = 21
	TaskConditionType_kTaskCondition_OpenMistCount                    TaskConditionType = 22
	TaskConditionType_kTaskCondition_WearQualityEquipmentCount        TaskConditionType = 23
	TaskConditionType_kTaskCondition_VipLevel                         TaskConditionType = 25
	TaskConditionType_kTaskCondition_HadAddHeroPoint                  TaskConditionType = 27
	TaskConditionType_kTaskCondition_HasCityTheme                     TaskConditionType = 28
	TaskConditionType_kTaskCondition_HadRename                        TaskConditionType = 29
	TaskConditionType_kTaskCondition_AchievementComplete              TaskConditionType = 30
	TaskConditionType_kTaskCondition_MaxBattlePower                   TaskConditionType = 31
	TaskConditionType_kTaskCondition_FoundTempleCount                 TaskConditionType = 32
	TaskConditionType_kTaskCondition_FoundPassCount                   TaskConditionType = 33
	TaskConditionType_kTaskCondition_Session_Begin                    TaskConditionType = 1000
	TaskConditionType_kTaskCondition_Session_TechUpgradeTimes         TaskConditionType = 1001
	TaskConditionType_kTaskCondition_Session_ItemUseTimes             TaskConditionType = 1002
	TaskConditionType_kTaskCondition_Session_AccelateMiniutes         TaskConditionType = 1003
	TaskConditionType_kTaskCondition_Session_GuildAssistTimes         TaskConditionType = 1004
	TaskConditionType_kTaskCondition_Session_SpendEmoney              TaskConditionType = 1005
	TaskConditionType_kTaskCondition_Session_KillEnemy                TaskConditionType = 1006
	TaskConditionType_kTaskCondition_Session_LoginDayCount            TaskConditionType = 1007
	TaskConditionType_kTaskCondition_Session_TrainingArmy             TaskConditionType = 1008
	TaskConditionType_kTaskCondition_Session_UpgradeHeroSkillTimes    TaskConditionType = 1009
	TaskConditionType_kTaskCondition_Session_KillBarbarians           TaskConditionType = 1011
	TaskConditionType_kTaskCondition_Session_IncreaseBattlePower      TaskConditionType = 1012
	TaskConditionType_kTaskCondition_Session_BuildingUpgradeTimes     TaskConditionType = 1013
	TaskConditionType_kTaskCondition_Session_ActivityScore            TaskConditionType = 1014
	TaskConditionType_kTaskCondition_Session_ActivityStageScore       TaskConditionType = 1015
	TaskConditionType_kTaskCondition_Session_ActivityTrainScore       TaskConditionType = 1016
	TaskConditionType_kTaskCondition_Session_ActivityBarbarianScore   TaskConditionType = 1017
	TaskConditionType_kTaskCondition_Session_ActivityMapCollectScore  TaskConditionType = 1018
	TaskConditionType_kTaskCondition_Session_ActivityBattlePowerScore TaskConditionType = 1019
	TaskConditionType_kTaskCondition_Session_ActivityKillEnemyScore   TaskConditionType = 1020
	TaskConditionType_kTaskCondition_Session_DailyScore               TaskConditionType = 1021
	TaskConditionType_kTaskCondition_Session_HeroActiveSkillTimes     TaskConditionType = 1023
	TaskConditionType_kTaskCondition_Session_MapCollectCount          TaskConditionType = 1024
	TaskConditionType_kTaskCondition_Session_CityCollectCount         TaskConditionType = 1025
	TaskConditionType_kTaskCondition_Session_BarbarianFortCount       TaskConditionType = 1026
	TaskConditionType_kTaskCondition_Session_GuildShopBuyCount        TaskConditionType = 1027
	TaskConditionType_kTaskCondition_Session_CityShopBuyCount         TaskConditionType = 1028
	TaskConditionType_kTaskCondition_Session_CommandCenterHero        TaskConditionType = 1029
	TaskConditionType_kTaskCondition_Session_JoinGuildMarch           TaskConditionType = 1030
	TaskConditionType_kTaskCondition_Session_AttackTemple             TaskConditionType = 1031
	TaskConditionType_kTaskCondition_Session_RecruitTimes             TaskConditionType = 1032
	TaskConditionType_kTaskCondition_Session_CreateRoleTime           TaskConditionType = 1033
	TaskConditionType_kTaskCondition_Session_GuildTechDonateTimes     TaskConditionType = 1035
	TaskConditionType_kTaskCondition_Session_CureTroopCount           TaskConditionType = 1036
	TaskConditionType_kTaskCondition_Session_VillageAwardCount        TaskConditionType = 1038
	TaskConditionType_kTaskCondition_Session_TrainTroopCount          TaskConditionType = 1040
	TaskConditionType_kTaskCondition_Session_MapCollectTypeCount      TaskConditionType = 1041
	TaskConditionType_kTaskCondition_Session_GuildGiftClaimCount      TaskConditionType = 1042
	TaskConditionType_kTaskCondition_Session_IncreaseBuildingPower    TaskConditionType = 1043
	TaskConditionType_kTaskCondition_Session_IncreaseTechPower        TaskConditionType = 1044
	TaskConditionType_kTaskCondition_Session_IncreaseArmyPower        TaskConditionType = 1045
	TaskConditionType_kTaskCondition_Session_AccelateTypeMinutes      TaskConditionType = 1046
	TaskConditionType_kTaskCondition_Session_CityCollectResource      TaskConditionType = 1049
	TaskConditionType_kTaskCondition_Session_SpendAP                  TaskConditionType = 1053
	TaskConditionType_kTaskCondition_Session_ReenforceMemberCount     TaskConditionType = 1054
	TaskConditionType_kTaskCondition_Session_JoinGuildMarchTimes      TaskConditionType = 1055
	TaskConditionType_kTaskCondition_Session_MapCollectMineCount      TaskConditionType = 1057
	TaskConditionType_kTaskCondition_Session_KillEnemyCount           TaskConditionType = 1058
	TaskConditionType_kTaskCondition_Session_PlunderResourceCount     TaskConditionType = 1059
	TaskConditionType_kTaskCondition_Session_TypeArmyTrainCount       TaskConditionType = 1060
	TaskConditionType_kTaskCondition_Session_RecruitQualityHeroCount  TaskConditionType = 1061
	TaskConditionType_kTaskCondition_Session_SpendCurrency            TaskConditionType = 1062
	TaskConditionType_kTaskCondition_Session_SendGuildGiftCount       TaskConditionType = 1063
	TaskConditionType_kTaskCondition_Session_UpgradeEquipmentTimes    TaskConditionType = 1064
	TaskConditionType_kTaskCondition_Session_CarrageResources         TaskConditionType = 1065
	TaskConditionType_kTaskCondition_Session_HeroAddExp               TaskConditionType = 1066
	TaskConditionType_kTaskCondition_Session_CureLevelTroopCount      TaskConditionType = 1068
	TaskConditionType_kTaskCondition_Session_ActivityOpenDayCount     TaskConditionType = 1069
	TaskConditionType_kTaskCondition_Session_MultiItemUseTimes        TaskConditionType = 1070
	TaskConditionType_kTaskCondition_Session_StartTrainTimes          TaskConditionType = 1071
	TaskConditionType_kTaskCondition_Session_RecruiteHeroCount        TaskConditionType = 1072
	TaskConditionType_kTaskCondition_Session_BuyMallTimes             TaskConditionType = 1073
	TaskConditionType_kTaskCondition_Session_SpendResources           TaskConditionType = 1075
	TaskConditionType_kTaskCondition_Session_AccumulateDailyScore     TaskConditionType = 1076
	TaskConditionType_kTaskCondition_GuildActivity_KillBarbarian      TaskConditionType = 2001
	TaskConditionType_kTaskCondition_GuildActivity_KillBarbarianFort  TaskConditionType = 2002
)

var TaskConditionType_name = map[int32]string{
	0:    "kTaskCondition_None",
	1:    "kTaskCondition_QualityHeroCount",
	2:    "kTaskCondition_HeroCount",
	3:    "kTaskCondition_HeroLevel",
	4:    "kTaskCondition_LevelHeroCount",
	5:    "kTaskCondition_LevelArmyCount",
	6:    "kTaskCondition_BattlePower",
	7:    "kTaskCondition_BuildingLevel",
	8:    "kTaskCondition_CollectResource",
	9:    "kTaskCondition_TechLevel",
	10:   "kTaskCondition_JoinGuild",
	11:   "kTaskCondition_CompleteChapter",
	12:   "kTaskCondition_CityStrategyLevel",
	13:   "kTaskCondition_AnyHeroStar",
	14:   "kTaskCondition_StrategyBuilding",
	15:   "kTaskCondition_AnyTechLevel",
	16:   "kTaskCondition_AwakenHeroCount",
	17:   "kTaskCondition_ExpeditionPassCount",
	18:   "kTaskCondition_LevelBuildingCount",
	19:   "kTaskCondition_ResourceBuildingLevel",
	20:   "kTaskCondition_StarHeroCount",
	21:   "kTaskCondition_TechCount",
	22:   "kTaskCondition_OpenMistCount",
	23:   "kTaskCondition_WearQualityEquipmentCount",
	25:   "kTaskCondition_VipLevel",
	27:   "kTaskCondition_HadAddHeroPoint",
	28:   "kTaskCondition_HasCityTheme",
	29:   "kTaskCondition_HadRename",
	30:   "kTaskCondition_AchievementComplete",
	31:   "kTaskCondition_MaxBattlePower",
	32:   "kTaskCondition_FoundTempleCount",
	33:   "kTaskCondition_FoundPassCount",
	1000: "kTaskCondition_Session_Begin",
	1001: "kTaskCondition_Session_TechUpgradeTimes",
	1002: "kTaskCondition_Session_ItemUseTimes",
	1003: "kTaskCondition_Session_AccelateMiniutes",
	1004: "kTaskCondition_Session_GuildAssistTimes",
	1005: "kTaskCondition_Session_SpendEmoney",
	1006: "kTaskCondition_Session_KillEnemy",
	1007: "kTaskCondition_Session_LoginDayCount",
	1008: "kTaskCondition_Session_TrainingArmy",
	1009: "kTaskCondition_Session_UpgradeHeroSkillTimes",
	1011: "kTaskCondition_Session_KillBarbarians",
	1012: "kTaskCondition_Session_IncreaseBattlePower",
	1013: "kTaskCondition_Session_BuildingUpgradeTimes",
	1014: "kTaskCondition_Session_ActivityScore",
	1015: "kTaskCondition_Session_ActivityStageScore",
	1016: "kTaskCondition_Session_ActivityTrainScore",
	1017: "kTaskCondition_Session_ActivityBarbarianScore",
	1018: "kTaskCondition_Session_ActivityMapCollectScore",
	1019: "kTaskCondition_Session_ActivityBattlePowerScore",
	1020: "kTaskCondition_Session_ActivityKillEnemyScore",
	1021: "kTaskCondition_Session_DailyScore",
	1023: "kTaskCondition_Session_HeroActiveSkillTimes",
	1024: "kTaskCondition_Session_MapCollectCount",
	1025: "kTaskCondition_Session_CityCollectCount",
	1026: "kTaskCondition_Session_BarbarianFortCount",
	1027: "kTaskCondition_Session_GuildShopBuyCount",
	1028: "kTaskCondition_Session_CityShopBuyCount",
	1029: "kTaskCondition_Session_CommandCenterHero",
	1030: "kTaskCondition_Session_JoinGuildMarch",
	1031: "kTaskCondition_Session_AttackTemple",
	1032: "kTaskCondition_Session_RecruitTimes",
	1033: "kTaskCondition_Session_CreateRoleTime",
	1035: "kTaskCondition_Session_GuildTechDonateTimes",
	1036: "kTaskCondition_Session_CureTroopCount",
	1038: "kTaskCondition_Session_VillageAwardCount",
	1040: "kTaskCondition_Session_TrainTroopCount",
	1041: "kTaskCondition_Session_MapCollectTypeCount",
	1042: "kTaskCondition_Session_GuildGiftClaimCount",
	1043: "kTaskCondition_Session_IncreaseBuildingPower",
	1044: "kTaskCondition_Session_IncreaseTechPower",
	1045: "kTaskCondition_Session_IncreaseArmyPower",
	1046: "kTaskCondition_Session_AccelateTypeMinutes",
	1049: "kTaskCondition_Session_CityCollectResource",
	1053: "kTaskCondition_Session_SpendAP",
	1054: "kTaskCondition_Session_ReenforceMemberCount",
	1055: "kTaskCondition_Session_JoinGuildMarchTimes",
	1057: "kTaskCondition_Session_MapCollectMineCount",
	1058: "kTaskCondition_Session_KillEnemyCount",
	1059: "kTaskCondition_Session_PlunderResourceCount",
	1060: "kTaskCondition_Session_TypeArmyTrainCount",
	1061: "kTaskCondition_Session_RecruitQualityHeroCount",
	1062: "kTaskCondition_Session_SpendCurrency",
	1063: "kTaskCondition_Session_SendGuildGiftCount",
	1064: "kTaskCondition_Session_UpgradeEquipmentTimes",
	1065: "kTaskCondition_Session_CarrageResources",
	1066: "kTaskCondition_Session_HeroAddExp",
	1068: "kTaskCondition_Session_CureLevelTroopCount",
	1069: "kTaskCondition_Session_ActivityOpenDayCount",
	1070: "kTaskCondition_Session_MultiItemUseTimes",
	1071: "kTaskCondition_Session_StartTrainTimes",
	1072: "kTaskCondition_Session_RecruiteHeroCount",
	1073: "kTaskCondition_Session_BuyMallTimes",
	1075: "kTaskCondition_Session_SpendResources",
	1076: "kTaskCondition_Session_AccumulateDailyScore",
	2001: "kTaskCondition_GuildActivity_KillBarbarian",
	2002: "kTaskCondition_GuildActivity_KillBarbarianFort",
}
var TaskConditionType_value = map[string]int32{
	"kTaskCondition_None":                             0,
	"kTaskCondition_QualityHeroCount":                 1,
	"kTaskCondition_HeroCount":                        2,
	"kTaskCondition_HeroLevel":                        3,
	"kTaskCondition_LevelHeroCount":                   4,
	"kTaskCondition_LevelArmyCount":                   5,
	"kTaskCondition_BattlePower":                      6,
	"kTaskCondition_BuildingLevel":                    7,
	"kTaskCondition_CollectResource":                  8,
	"kTaskCondition_TechLevel":                        9,
	"kTaskCondition_JoinGuild":                        10,
	"kTaskCondition_CompleteChapter":                  11,
	"kTaskCondition_CityStrategyLevel":                12,
	"kTaskCondition_AnyHeroStar":                      13,
	"kTaskCondition_StrategyBuilding":                 14,
	"kTaskCondition_AnyTechLevel":                     15,
	"kTaskCondition_AwakenHeroCount":                  16,
	"kTaskCondition_ExpeditionPassCount":              17,
	"kTaskCondition_LevelBuildingCount":               18,
	"kTaskCondition_ResourceBuildingLevel":            19,
	"kTaskCondition_StarHeroCount":                    20,
	"kTaskCondition_TechCount":                        21,
	"kTaskCondition_OpenMistCount":                    22,
	"kTaskCondition_WearQualityEquipmentCount":        23,
	"kTaskCondition_VipLevel":                         25,
	"kTaskCondition_HadAddHeroPoint":                  27,
	"kTaskCondition_HasCityTheme":                     28,
	"kTaskCondition_HadRename":                        29,
	"kTaskCondition_AchievementComplete":              30,
	"kTaskCondition_MaxBattlePower":                   31,
	"kTaskCondition_FoundTempleCount":                 32,
	"kTaskCondition_FoundPassCount":                   33,
	"kTaskCondition_Session_Begin":                    1000,
	"kTaskCondition_Session_TechUpgradeTimes":         1001,
	"kTaskCondition_Session_ItemUseTimes":             1002,
	"kTaskCondition_Session_AccelateMiniutes":         1003,
	"kTaskCondition_Session_GuildAssistTimes":         1004,
	"kTaskCondition_Session_SpendEmoney":              1005,
	"kTaskCondition_Session_KillEnemy":                1006,
	"kTaskCondition_Session_LoginDayCount":            1007,
	"kTaskCondition_Session_TrainingArmy":             1008,
	"kTaskCondition_Session_UpgradeHeroSkillTimes":    1009,
	"kTaskCondition_Session_KillBarbarians":           1011,
	"kTaskCondition_Session_IncreaseBattlePower":      1012,
	"kTaskCondition_Session_BuildingUpgradeTimes":     1013,
	"kTaskCondition_Session_ActivityScore":            1014,
	"kTaskCondition_Session_ActivityStageScore":       1015,
	"kTaskCondition_Session_ActivityTrainScore":       1016,
	"kTaskCondition_Session_ActivityBarbarianScore":   1017,
	"kTaskCondition_Session_ActivityMapCollectScore":  1018,
	"kTaskCondition_Session_ActivityBattlePowerScore": 1019,
	"kTaskCondition_Session_ActivityKillEnemyScore":   1020,
	"kTaskCondition_Session_DailyScore":               1021,
	"kTaskCondition_Session_HeroActiveSkillTimes":     1023,
	"kTaskCondition_Session_MapCollectCount":          1024,
	"kTaskCondition_Session_CityCollectCount":         1025,
	"kTaskCondition_Session_BarbarianFortCount":       1026,
	"kTaskCondition_Session_GuildShopBuyCount":        1027,
	"kTaskCondition_Session_CityShopBuyCount":         1028,
	"kTaskCondition_Session_CommandCenterHero":        1029,
	"kTaskCondition_Session_JoinGuildMarch":           1030,
	"kTaskCondition_Session_AttackTemple":             1031,
	"kTaskCondition_Session_RecruitTimes":             1032,
	"kTaskCondition_Session_CreateRoleTime":           1033,
	"kTaskCondition_Session_GuildTechDonateTimes":     1035,
	"kTaskCondition_Session_CureTroopCount":           1036,
	"kTaskCondition_Session_VillageAwardCount":        1038,
	"kTaskCondition_Session_TrainTroopCount":          1040,
	"kTaskCondition_Session_MapCollectTypeCount":      1041,
	"kTaskCondition_Session_GuildGiftClaimCount":      1042,
	"kTaskCondition_Session_IncreaseBuildingPower":    1043,
	"kTaskCondition_Session_IncreaseTechPower":        1044,
	"kTaskCondition_Session_IncreaseArmyPower":        1045,
	"kTaskCondition_Session_AccelateTypeMinutes":      1046,
	"kTaskCondition_Session_CityCollectResource":      1049,
	"kTaskCondition_Session_SpendAP":                  1053,
	"kTaskCondition_Session_ReenforceMemberCount":     1054,
	"kTaskCondition_Session_JoinGuildMarchTimes":      1055,
	"kTaskCondition_Session_MapCollectMineCount":      1057,
	"kTaskCondition_Session_KillEnemyCount":           1058,
	"kTaskCondition_Session_PlunderResourceCount":     1059,
	"kTaskCondition_Session_TypeArmyTrainCount":       1060,
	"kTaskCondition_Session_RecruitQualityHeroCount":  1061,
	"kTaskCondition_Session_SpendCurrency":            1062,
	"kTaskCondition_Session_SendGuildGiftCount":       1063,
	"kTaskCondition_Session_UpgradeEquipmentTimes":    1064,
	"kTaskCondition_Session_CarrageResources":         1065,
	"kTaskCondition_Session_HeroAddExp":               1066,
	"kTaskCondition_Session_CureLevelTroopCount":      1068,
	"kTaskCondition_Session_ActivityOpenDayCount":     1069,
	"kTaskCondition_Session_MultiItemUseTimes":        1070,
	"kTaskCondition_Session_StartTrainTimes":          1071,
	"kTaskCondition_Session_RecruiteHeroCount":        1072,
	"kTaskCondition_Session_BuyMallTimes":             1073,
	"kTaskCondition_Session_SpendResources":           1075,
	"kTaskCondition_Session_AccumulateDailyScore":     1076,
	"kTaskCondition_GuildActivity_KillBarbarian":      2001,
	"kTaskCondition_GuildActivity_KillBarbarianFort":  2002,
}

func (x TaskConditionType) String() string {
	return proto.EnumName(TaskConditionType_name, int32(x))
}
func (TaskConditionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor57, []int{2} }

type MileStoneContidionType int32

const (
	MileStoneContidionType_kMileStoneCondition_None                    MileStoneContidionType = 0
	MileStoneContidionType_kMileStoneCondition_KillBarbarianCount      MileStoneContidionType = 1
	MileStoneContidionType_kMileStoneCondition_GuildMemberCount        MileStoneContidionType = 2
	MileStoneContidionType_kMileStoneCondition_CastleLevelCount        MileStoneContidionType = 3
	MileStoneContidionType_kMileStoneCondition_TempleFirstCaptureCount MileStoneContidionType = 4
	MileStoneContidionType_kMileStoneCondition_PassFirstCaptureCount   MileStoneContidionType = 5
	MileStoneContidionType_kMileStoneCondition_TempleCaptureCount      MileStoneContidionType = 6
	MileStoneContidionType_kMileStoneCondition_PassCaptureCount        MileStoneContidionType = 7
	MileStoneContidionType_kMileStoneCondition_OpenMist                MileStoneContidionType = 8
	MileStoneContidionType_kMileStoneCondition_BuildFort               MileStoneContidionType = 9
	MileStoneContidionType_kMileStoneCondition_KillBarbarianFortCount  MileStoneContidionType = 10
	MileStoneContidionType_kMileStoneCondition_ProduceArmy             MileStoneContidionType = 11
	MileStoneContidionType_kMileStoneCondition_GuildPowerRank          MileStoneContidionType = 12
	MileStoneContidionType_kMileStoneCondition_FinishMist              MileStoneContidionType = 13
	MileStoneContidionType_kMileStoneCondition_GuildCaptureTempleRank  MileStoneContidionType = 14
)

var MileStoneContidionType_name = map[int32]string{
	0:  "kMileStoneCondition_None",
	1:  "kMileStoneCondition_KillBarbarianCount",
	2:  "kMileStoneCondition_GuildMemberCount",
	3:  "kMileStoneCondition_CastleLevelCount",
	4:  "kMileStoneCondition_TempleFirstCaptureCount",
	5:  "kMileStoneCondition_PassFirstCaptureCount",
	6:  "kMileStoneCondition_TempleCaptureCount",
	7:  "kMileStoneCondition_PassCaptureCount",
	8:  "kMileStoneCondition_OpenMist",
	9:  "kMileStoneCondition_BuildFort",
	10: "kMileStoneCondition_KillBarbarianFortCount",
	11: "kMileStoneCondition_ProduceArmy",
	12: "kMileStoneCondition_GuildPowerRank",
	13: "kMileStoneCondition_FinishMist",
	14: "kMileStoneCondition_GuildCaptureTempleRank",
}
var MileStoneContidionType_value = map[string]int32{
	"kMileStoneCondition_None":                    0,
	"kMileStoneCondition_KillBarbarianCount":      1,
	"kMileStoneCondition_GuildMemberCount":        2,
	"kMileStoneCondition_CastleLevelCount":        3,
	"kMileStoneCondition_TempleFirstCaptureCount": 4,
	"kMileStoneCondition_PassFirstCaptureCount":   5,
	"kMileStoneCondition_TempleCaptureCount":      6,
	"kMileStoneCondition_PassCaptureCount":        7,
	"kMileStoneCondition_OpenMist":                8,
	"kMileStoneCondition_BuildFort":               9,
	"kMileStoneCondition_KillBarbarianFortCount":  10,
	"kMileStoneCondition_ProduceArmy":             11,
	"kMileStoneCondition_GuildPowerRank":          12,
	"kMileStoneCondition_FinishMist":              13,
	"kMileStoneCondition_GuildCaptureTempleRank":  14,
}

func (x MileStoneContidionType) String() string {
	return proto.EnumName(MileStoneContidionType_name, int32(x))
}
func (MileStoneContidionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor57, []int{3} }

type MileStoneConditionStatus int32

const (
	MileStoneConditionStatus_kMileStoneConditionStatus_NotOpen MileStoneConditionStatus = 0
	MileStoneConditionStatus_kMileStoneConditionStatus_Open    MileStoneConditionStatus = 1
	MileStoneConditionStatus_kMileStoneConditionStatus_Finish  MileStoneConditionStatus = 2
)

var MileStoneConditionStatus_name = map[int32]string{
	0: "kMileStoneConditionStatus_NotOpen",
	1: "kMileStoneConditionStatus_Open",
	2: "kMileStoneConditionStatus_Finish",
}
var MileStoneConditionStatus_value = map[string]int32{
	"kMileStoneConditionStatus_NotOpen": 0,
	"kMileStoneConditionStatus_Open":    1,
	"kMileStoneConditionStatus_Finish":  2,
}

func (x MileStoneConditionStatus) String() string {
	return proto.EnumName(MileStoneConditionStatus_name, int32(x))
}
func (MileStoneConditionStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor57, []int{4} }

// 里程碑事件类型
type MileStoneEventType int32

const (
	MileStoneEventType_kMileStoneEventType_None          MileStoneEventType = 0
	MileStoneEventType_kMileStoneEventType_Temple        MileStoneEventType = 1
	MileStoneEventType_kMileStoneEventType_Pass          MileStoneEventType = 2
	MileStoneEventType_kMileStoneEventType_BarbarianFort MileStoneEventType = 3
	MileStoneEventType_kMileStoneEventType_Mist          MileStoneEventType = 4
)

var MileStoneEventType_name = map[int32]string{
	0: "kMileStoneEventType_None",
	1: "kMileStoneEventType_Temple",
	2: "kMileStoneEventType_Pass",
	3: "kMileStoneEventType_BarbarianFort",
	4: "kMileStoneEventType_Mist",
}
var MileStoneEventType_value = map[string]int32{
	"kMileStoneEventType_None":          0,
	"kMileStoneEventType_Temple":        1,
	"kMileStoneEventType_Pass":          2,
	"kMileStoneEventType_BarbarianFort": 3,
	"kMileStoneEventType_Mist":          4,
}

func (x MileStoneEventType) String() string {
	return proto.EnumName(MileStoneEventType_name, int32(x))
}
func (MileStoneEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor57, []int{5} }

// 里程碑事件类型
type MileStoneRewardTarget int32

const (
	MileStoneRewardTarget_kMileStoneRewardTarget_All       MileStoneRewardTarget = 0
	MileStoneRewardTarget_kMileStoneRewardTarget_Condition MileStoneRewardTarget = 1
	MileStoneRewardTarget_kMileStoneRewardTarget_Rank      MileStoneRewardTarget = 2
)

var MileStoneRewardTarget_name = map[int32]string{
	0: "kMileStoneRewardTarget_All",
	1: "kMileStoneRewardTarget_Condition",
	2: "kMileStoneRewardTarget_Rank",
}
var MileStoneRewardTarget_value = map[string]int32{
	"kMileStoneRewardTarget_All":       0,
	"kMileStoneRewardTarget_Condition": 1,
	"kMileStoneRewardTarget_Rank":      2,
}

func (x MileStoneRewardTarget) String() string {
	return proto.EnumName(MileStoneRewardTarget_name, int32(x))
}
func (MileStoneRewardTarget) EnumDescriptor() ([]byte, []int) { return fileDescriptor57, []int{6} }

type GuildTaskConditionType int32

const (
	GuildTaskConditionType_kGuildTaskConditionType_None                     GuildTaskConditionType = 0
	GuildTaskConditionType_kGuildTaskConditionType_UpgradeEquipmentTimes    GuildTaskConditionType = 2003
	GuildTaskConditionType_kGuildTaskConditionType_IncreaseBattlePower      GuildTaskConditionType = 2004
	GuildTaskConditionType_kGuildTaskConditionType_UpgradeHeroSkill         GuildTaskConditionType = 2005
	GuildTaskConditionType_kGuildTaskConditionType_UpgradeTech              GuildTaskConditionType = 2006
	GuildTaskConditionType_kGuildTaskConditionType_AccelateMiniutes         GuildTaskConditionType = 2007
	GuildTaskConditionType_kGuildTaskConditionType_TrainPrepare             GuildTaskConditionType = 2008
	GuildTaskConditionType_kGuildTaskConditionType_RadarEvent               GuildTaskConditionType = 2009
	GuildTaskConditionType_kGuildTaskConditionType_GuildAssist              GuildTaskConditionType = 2010
	GuildTaskConditionType_kGuildTaskConditionType_GuildTechDonate          GuildTaskConditionType = 2011
	GuildTaskConditionType_kGuildTaskConditionType_GuildShopBuyCount        GuildTaskConditionType = 2012
	GuildTaskConditionType_kGuildTaskConditionType_CityShopBuyCount         GuildTaskConditionType = 2013
	GuildTaskConditionType_kGuildTaskConditionType_RecruitTimes             GuildTaskConditionType = 2014
	GuildTaskConditionType_kGuildTaskConditionType_RecruitHeroCount         GuildTaskConditionType = 2015
	GuildTaskConditionType_kGuildTaskConditionType_RecruitPoints            GuildTaskConditionType = 2016
	GuildTaskConditionType_kGuildTaskConditionType_CollectResource          GuildTaskConditionType = 2017
	GuildTaskConditionType_kGuildTaskConditionType_CollectAnyResource       GuildTaskConditionType = 2018
	GuildTaskConditionType_kGuildTaskConditionType_CityCollectAnyResource   GuildTaskConditionType = 2019
	GuildTaskConditionType_kGuildTaskConditionType_MapCollectEmpty          GuildTaskConditionType = 2020
	GuildTaskConditionType_kGuildTaskConditionType_SpendCurrency            GuildTaskConditionType = 2021
	GuildTaskConditionType_kGuildTaskConditionType_BuyMall                  GuildTaskConditionType = 2022
	GuildTaskConditionType_kGuildTaskConditionType_BuyAnyMall               GuildTaskConditionType = 2023
	GuildTaskConditionType_kGuildTaskConditionType_CureTroop                GuildTaskConditionType = 2024
	GuildTaskConditionType_kGuildTaskConditionType_PlunderResource          GuildTaskConditionType = 2025
	GuildTaskConditionType_kGuildTaskConditionType_ExpeWin                  GuildTaskConditionType = 2026
	GuildTaskConditionType_kGuildTaskConditionType_KillBarbarians           GuildTaskConditionType = 2027
	GuildTaskConditionType_kGuildTaskConditionType_KillEnemy                GuildTaskConditionType = 2028
	GuildTaskConditionType_kGuildTaskConditionType_SpendAP                  GuildTaskConditionType = 2029
	GuildTaskConditionType_kGuildTaskConditionType_CaptureStronghold        GuildTaskConditionType = 2030
	GuildTaskConditionType_kGuildTaskConditionType_CaptureTypedStronghold   GuildTaskConditionType = 2031
	GuildTaskConditionType_kGuildTaskConditionType_CaptureLeveledStronghold GuildTaskConditionType = 2032
	GuildTaskConditionType_kGuildTaskConditionType_CaptureTemple            GuildTaskConditionType = 2033
	GuildTaskConditionType_kGuildTaskConditionType_IncreaseProsperity       GuildTaskConditionType = 2034
)

var GuildTaskConditionType_name = map[int32]string{
	0:    "kGuildTaskConditionType_None",
	2003: "kGuildTaskConditionType_UpgradeEquipmentTimes",
	2004: "kGuildTaskConditionType_IncreaseBattlePower",
	2005: "kGuildTaskConditionType_UpgradeHeroSkill",
	2006: "kGuildTaskConditionType_UpgradeTech",
	2007: "kGuildTaskConditionType_AccelateMiniutes",
	2008: "kGuildTaskConditionType_TrainPrepare",
	2009: "kGuildTaskConditionType_RadarEvent",
	2010: "kGuildTaskConditionType_GuildAssist",
	2011: "kGuildTaskConditionType_GuildTechDonate",
	2012: "kGuildTaskConditionType_GuildShopBuyCount",
	2013: "kGuildTaskConditionType_CityShopBuyCount",
	2014: "kGuildTaskConditionType_RecruitTimes",
	2015: "kGuildTaskConditionType_RecruitHeroCount",
	2016: "kGuildTaskConditionType_RecruitPoints",
	2017: "kGuildTaskConditionType_CollectResource",
	2018: "kGuildTaskConditionType_CollectAnyResource",
	2019: "kGuildTaskConditionType_CityCollectAnyResource",
	2020: "kGuildTaskConditionType_MapCollectEmpty",
	2021: "kGuildTaskConditionType_SpendCurrency",
	2022: "kGuildTaskConditionType_BuyMall",
	2023: "kGuildTaskConditionType_BuyAnyMall",
	2024: "kGuildTaskConditionType_CureTroop",
	2025: "kGuildTaskConditionType_PlunderResource",
	2026: "kGuildTaskConditionType_ExpeWin",
	2027: "kGuildTaskConditionType_KillBarbarians",
	2028: "kGuildTaskConditionType_KillEnemy",
	2029: "kGuildTaskConditionType_SpendAP",
	2030: "kGuildTaskConditionType_CaptureStronghold",
	2031: "kGuildTaskConditionType_CaptureTypedStronghold",
	2032: "kGuildTaskConditionType_CaptureLeveledStronghold",
	2033: "kGuildTaskConditionType_CaptureTemple",
	2034: "kGuildTaskConditionType_IncreaseProsperity",
}
var GuildTaskConditionType_value = map[string]int32{
	"kGuildTaskConditionType_None":                     0,
	"kGuildTaskConditionType_UpgradeEquipmentTimes":    2003,
	"kGuildTaskConditionType_IncreaseBattlePower":      2004,
	"kGuildTaskConditionType_UpgradeHeroSkill":         2005,
	"kGuildTaskConditionType_UpgradeTech":              2006,
	"kGuildTaskConditionType_AccelateMiniutes":         2007,
	"kGuildTaskConditionType_TrainPrepare":             2008,
	"kGuildTaskConditionType_RadarEvent":               2009,
	"kGuildTaskConditionType_GuildAssist":              2010,
	"kGuildTaskConditionType_GuildTechDonate":          2011,
	"kGuildTaskConditionType_GuildShopBuyCount":        2012,
	"kGuildTaskConditionType_CityShopBuyCount":         2013,
	"kGuildTaskConditionType_RecruitTimes":             2014,
	"kGuildTaskConditionType_RecruitHeroCount":         2015,
	"kGuildTaskConditionType_RecruitPoints":            2016,
	"kGuildTaskConditionType_CollectResource":          2017,
	"kGuildTaskConditionType_CollectAnyResource":       2018,
	"kGuildTaskConditionType_CityCollectAnyResource":   2019,
	"kGuildTaskConditionType_MapCollectEmpty":          2020,
	"kGuildTaskConditionType_SpendCurrency":            2021,
	"kGuildTaskConditionType_BuyMall":                  2022,
	"kGuildTaskConditionType_BuyAnyMall":               2023,
	"kGuildTaskConditionType_CureTroop":                2024,
	"kGuildTaskConditionType_PlunderResource":          2025,
	"kGuildTaskConditionType_ExpeWin":                  2026,
	"kGuildTaskConditionType_KillBarbarians":           2027,
	"kGuildTaskConditionType_KillEnemy":                2028,
	"kGuildTaskConditionType_SpendAP":                  2029,
	"kGuildTaskConditionType_CaptureStronghold":        2030,
	"kGuildTaskConditionType_CaptureTypedStronghold":   2031,
	"kGuildTaskConditionType_CaptureLeveledStronghold": 2032,
	"kGuildTaskConditionType_CaptureTemple":            2033,
	"kGuildTaskConditionType_IncreaseProsperity":       2034,
}

func (x GuildTaskConditionType) String() string {
	return proto.EnumName(GuildTaskConditionType_name, int32(x))
}
func (GuildTaskConditionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor57, []int{7} }

// 任务数据
type TaskData struct {
	TaskId     uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Status     uint32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Value      uint64 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	AcceptTime uint64 `protobuf:"varint,4,opt,name=accept_time,json=acceptTime" json:"accept_time,omitempty"`
}

func (m *TaskData) Reset()                    { *m = TaskData{} }
func (m *TaskData) String() string            { return proto.CompactTextString(m) }
func (*TaskData) ProtoMessage()               {}
func (*TaskData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{0} }

func (m *TaskData) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskData) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TaskData) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TaskData) GetAcceptTime() uint64 {
	if m != nil {
		return m.AcceptTime
	}
	return 0
}

// 主线章节数据
type ChapterData struct {
	ChapterId uint32      `protobuf:"varint,1,opt,name=chapter_id,json=chapterId" json:"chapter_id,omitempty"`
	IsReward  bool        `protobuf:"varint,2,opt,name=is_reward,json=isReward" json:"is_reward,omitempty"`
	Tasks     []*TaskData `protobuf:"bytes,3,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *ChapterData) Reset()                    { *m = ChapterData{} }
func (m *ChapterData) String() string            { return proto.CompactTextString(m) }
func (*ChapterData) ProtoMessage()               {}
func (*ChapterData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{1} }

func (m *ChapterData) GetChapterId() uint32 {
	if m != nil {
		return m.ChapterId
	}
	return 0
}

func (m *ChapterData) GetIsReward() bool {
	if m != nil {
		return m.IsReward
	}
	return false
}

func (m *ChapterData) GetTasks() []*TaskData {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// 支线任务数据
type BranchData struct {
	AcceptBranches []uint32    `protobuf:"varint,1,rep,packed,name=accept_branches,json=acceptBranches" json:"accept_branches,omitempty"`
	Tasks          []*TaskData `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *BranchData) Reset()                    { *m = BranchData{} }
func (m *BranchData) String() string            { return proto.CompactTextString(m) }
func (*BranchData) ProtoMessage()               {}
func (*BranchData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{2} }

func (m *BranchData) GetAcceptBranches() []uint32 {
	if m != nil {
		return m.AcceptBranches
	}
	return nil
}

func (m *BranchData) GetTasks() []*TaskData {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// 每日活跃任务数据
type DailyData struct {
	Date  uint32      `protobuf:"varint,1,opt,name=date" json:"date,omitempty"`
	Score uint32      `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Tasks []*TaskData `protobuf:"bytes,3,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *DailyData) Reset()                    { *m = DailyData{} }
func (m *DailyData) String() string            { return proto.CompactTextString(m) }
func (*DailyData) ProtoMessage()               {}
func (*DailyData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{3} }

func (m *DailyData) GetDate() uint32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *DailyData) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *DailyData) GetTasks() []*TaskData {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type DramaStoryTask struct {
	DramaStoryId uint32              `protobuf:"varint,1,opt,name=drama_story_id,json=dramaStoryId" json:"drama_story_id,omitempty"`
	ChapterId    uint32              `protobuf:"varint,2,opt,name=chapter_id,json=chapterId" json:"chapter_id,omitempty"`
	TaskData     *DramaStoryTaskData `protobuf:"bytes,3,opt,name=task_data,json=taskData" json:"task_data,omitempty"`
}

func (m *DramaStoryTask) Reset()                    { *m = DramaStoryTask{} }
func (m *DramaStoryTask) String() string            { return proto.CompactTextString(m) }
func (*DramaStoryTask) ProtoMessage()               {}
func (*DramaStoryTask) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{4} }

func (m *DramaStoryTask) GetDramaStoryId() uint32 {
	if m != nil {
		return m.DramaStoryId
	}
	return 0
}

func (m *DramaStoryTask) GetChapterId() uint32 {
	if m != nil {
		return m.ChapterId
	}
	return 0
}

func (m *DramaStoryTask) GetTaskData() *DramaStoryTaskData {
	if m != nil {
		return m.TaskData
	}
	return nil
}

type DramaStoryGroupReward struct {
	ChapterId    uint32                 `protobuf:"varint,1,opt,name=chapter_id,json=chapterId" json:"chapter_id,omitempty"`
	GroupId      uint32                 `protobuf:"varint,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	RewardStatus DramaStoryRewardStatus `protobuf:"varint,3,opt,name=reward_status,json=rewardStatus,enum=protomsg.DramaStoryRewardStatus" json:"reward_status,omitempty"`
}

func (m *DramaStoryGroupReward) Reset()                    { *m = DramaStoryGroupReward{} }
func (m *DramaStoryGroupReward) String() string            { return proto.CompactTextString(m) }
func (*DramaStoryGroupReward) ProtoMessage()               {}
func (*DramaStoryGroupReward) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{5} }

func (m *DramaStoryGroupReward) GetChapterId() uint32 {
	if m != nil {
		return m.ChapterId
	}
	return 0
}

func (m *DramaStoryGroupReward) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *DramaStoryGroupReward) GetRewardStatus() DramaStoryRewardStatus {
	if m != nil {
		return m.RewardStatus
	}
	return DramaStoryRewardStatus_kRewardStatus_NotCanReceive
}

type DramaStoryTaskInfo struct {
	TaskInfo                       []*DramaStoryTask             `protobuf:"bytes,1,rep,name=task_info,json=taskInfo" json:"task_info,omitempty"`
	GroupRewardStatus              []*DramaStoryGroupReward      `protobuf:"bytes,2,rep,name=group_reward_status,json=groupRewardStatus" json:"group_reward_status,omitempty"`
	PlayerReputationFromActivity   uint64                        `protobuf:"varint,3,opt,name=PlayerReputationFromActivity" json:"PlayerReputationFromActivity,omitempty"`
	PlayerReputationFromStronghold uint64                        `protobuf:"varint,4,opt,name=PlayerReputationFromStronghold" json:"PlayerReputationFromStronghold,omitempty"`
	ChangeRewardStatus             []*DramaStoryTaskRewardStatus `protobuf:"bytes,5,rep,name=change_reward_status,json=changeRewardStatus" json:"change_reward_status,omitempty"`
	KillFortNum                    uint64                        `protobuf:"varint,6,opt,name=kill_fort_num,json=killFortNum" json:"kill_fort_num,omitempty"`
	EventMailNotice                []uint32                      `protobuf:"varint,7,rep,packed,name=event_mail_notice,json=eventMailNotice" json:"event_mail_notice,omitempty"`
	DramaStoryId                   uint32                        `protobuf:"varint,8,opt,name=drama_story_id,json=dramaStoryId" json:"drama_story_id,omitempty"`
	ChapterId                      uint64                        `protobuf:"varint,9,opt,name=chapter_id,json=chapterId" json:"chapter_id,omitempty"`
	ChapterMailNotice              []uint32                      `protobuf:"varint,10,rep,packed,name=chapter_mail_notice,json=chapterMailNotice" json:"chapter_mail_notice,omitempty"`
}

func (m *DramaStoryTaskInfo) Reset()                    { *m = DramaStoryTaskInfo{} }
func (m *DramaStoryTaskInfo) String() string            { return proto.CompactTextString(m) }
func (*DramaStoryTaskInfo) ProtoMessage()               {}
func (*DramaStoryTaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{6} }

func (m *DramaStoryTaskInfo) GetTaskInfo() []*DramaStoryTask {
	if m != nil {
		return m.TaskInfo
	}
	return nil
}

func (m *DramaStoryTaskInfo) GetGroupRewardStatus() []*DramaStoryGroupReward {
	if m != nil {
		return m.GroupRewardStatus
	}
	return nil
}

func (m *DramaStoryTaskInfo) GetPlayerReputationFromActivity() uint64 {
	if m != nil {
		return m.PlayerReputationFromActivity
	}
	return 0
}

func (m *DramaStoryTaskInfo) GetPlayerReputationFromStronghold() uint64 {
	if m != nil {
		return m.PlayerReputationFromStronghold
	}
	return 0
}

func (m *DramaStoryTaskInfo) GetChangeRewardStatus() []*DramaStoryTaskRewardStatus {
	if m != nil {
		return m.ChangeRewardStatus
	}
	return nil
}

func (m *DramaStoryTaskInfo) GetKillFortNum() uint64 {
	if m != nil {
		return m.KillFortNum
	}
	return 0
}

func (m *DramaStoryTaskInfo) GetEventMailNotice() []uint32 {
	if m != nil {
		return m.EventMailNotice
	}
	return nil
}

func (m *DramaStoryTaskInfo) GetDramaStoryId() uint32 {
	if m != nil {
		return m.DramaStoryId
	}
	return 0
}

func (m *DramaStoryTaskInfo) GetChapterId() uint64 {
	if m != nil {
		return m.ChapterId
	}
	return 0
}

func (m *DramaStoryTaskInfo) GetChapterMailNotice() []uint32 {
	if m != nil {
		return m.ChapterMailNotice
	}
	return nil
}

type MileStoneBaseData struct {
	MileStoneId uint32 `protobuf:"varint,1,opt,name=mile_stone_id,json=mileStoneId" json:"mile_stone_id,omitempty"`
	BeginTime   int64  `protobuf:"varint,3,opt,name=begin_time,json=beginTime" json:"begin_time,omitempty"`
	EndTime     int64  `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *MileStoneBaseData) Reset()                    { *m = MileStoneBaseData{} }
func (m *MileStoneBaseData) String() string            { return proto.CompactTextString(m) }
func (*MileStoneBaseData) ProtoMessage()               {}
func (*MileStoneBaseData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{7} }

func (m *MileStoneBaseData) GetMileStoneId() uint32 {
	if m != nil {
		return m.MileStoneId
	}
	return 0
}

func (m *MileStoneBaseData) GetBeginTime() int64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *MileStoneBaseData) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type MileStoneTaskBaseData struct {
	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Count  uint64 `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
}

func (m *MileStoneTaskBaseData) Reset()                    { *m = MileStoneTaskBaseData{} }
func (m *MileStoneTaskBaseData) String() string            { return proto.CompactTextString(m) }
func (*MileStoneTaskBaseData) ProtoMessage()               {}
func (*MileStoneTaskBaseData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{8} }

func (m *MileStoneTaskBaseData) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *MileStoneTaskBaseData) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MileStoneGuildData struct {
	Task []*MileStoneTaskBaseData `protobuf:"bytes,3,rep,name=task" json:"task,omitempty"`
}

func (m *MileStoneGuildData) Reset()                    { *m = MileStoneGuildData{} }
func (m *MileStoneGuildData) String() string            { return proto.CompactTextString(m) }
func (*MileStoneGuildData) ProtoMessage()               {}
func (*MileStoneGuildData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{9} }

func (m *MileStoneGuildData) GetTask() []*MileStoneTaskBaseData {
	if m != nil {
		return m.Task
	}
	return nil
}

type MileStonePlayerTaskData struct {
	Task []*MileStoneTaskBaseData `protobuf:"bytes,3,rep,name=task" json:"task,omitempty"`
}

func (m *MileStonePlayerTaskData) Reset()                    { *m = MileStonePlayerTaskData{} }
func (m *MileStonePlayerTaskData) String() string            { return proto.CompactTextString(m) }
func (*MileStonePlayerTaskData) ProtoMessage()               {}
func (*MileStonePlayerTaskData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{10} }

func (m *MileStonePlayerTaskData) GetTask() []*MileStoneTaskBaseData {
	if m != nil {
		return m.Task
	}
	return nil
}

type MileStoneGuildCompleteInfo struct {
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	Value   uint64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *MileStoneGuildCompleteInfo) Reset()                    { *m = MileStoneGuildCompleteInfo{} }
func (m *MileStoneGuildCompleteInfo) String() string            { return proto.CompactTextString(m) }
func (*MileStoneGuildCompleteInfo) ProtoMessage()               {}
func (*MileStoneGuildCompleteInfo) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{11} }

func (m *MileStoneGuildCompleteInfo) GetGuildId() uint64 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *MileStoneGuildCompleteInfo) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MileStoneGuildCompleteAllInfo struct {
	GuildInfo []*MileStoneGuildCompleteInfo `protobuf:"bytes,7,rep,name=guild_info,json=guildInfo" json:"guild_info,omitempty"`
}

func (m *MileStoneGuildCompleteAllInfo) Reset()                    { *m = MileStoneGuildCompleteAllInfo{} }
func (m *MileStoneGuildCompleteAllInfo) String() string            { return proto.CompactTextString(m) }
func (*MileStoneGuildCompleteAllInfo) ProtoMessage()               {}
func (*MileStoneGuildCompleteAllInfo) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{12} }

func (m *MileStoneGuildCompleteAllInfo) GetGuildInfo() []*MileStoneGuildCompleteInfo {
	if m != nil {
		return m.GuildInfo
	}
	return nil
}

type MileStonePlayerRewardInfo struct {
	MileStoneId uint32 `protobuf:"varint,1,opt,name=mile_stone_id,json=mileStoneId" json:"mile_stone_id,omitempty"`
	IsComplete  bool   `protobuf:"varint,2,opt,name=is_complete,json=isComplete" json:"is_complete,omitempty"`
	IsGetReward bool   `protobuf:"varint,3,opt,name=is_get_reward,json=isGetReward" json:"is_get_reward,omitempty"`
	EndTime     int64  `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Value       uint64 `protobuf:"varint,5,opt,name=value" json:"value,omitempty"`
	MyValue     uint64 `protobuf:"varint,6,opt,name=my_value,json=myValue" json:"my_value,omitempty"`
	Rank        uint32 `protobuf:"varint,7,opt,name=rank" json:"rank,omitempty"`
}

func (m *MileStonePlayerRewardInfo) Reset()                    { *m = MileStonePlayerRewardInfo{} }
func (m *MileStonePlayerRewardInfo) String() string            { return proto.CompactTextString(m) }
func (*MileStonePlayerRewardInfo) ProtoMessage()               {}
func (*MileStonePlayerRewardInfo) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{13} }

func (m *MileStonePlayerRewardInfo) GetMileStoneId() uint32 {
	if m != nil {
		return m.MileStoneId
	}
	return 0
}

func (m *MileStonePlayerRewardInfo) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *MileStonePlayerRewardInfo) GetIsGetReward() bool {
	if m != nil {
		return m.IsGetReward
	}
	return false
}

func (m *MileStonePlayerRewardInfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *MileStonePlayerRewardInfo) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MileStonePlayerRewardInfo) GetMyValue() uint64 {
	if m != nil {
		return m.MyValue
	}
	return 0
}

func (m *MileStonePlayerRewardInfo) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type MileStonePlayerRewardInfoList struct {
	List []*MileStonePlayerRewardInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *MileStonePlayerRewardInfoList) Reset()                    { *m = MileStonePlayerRewardInfoList{} }
func (m *MileStonePlayerRewardInfoList) String() string            { return proto.CompactTextString(m) }
func (*MileStonePlayerRewardInfoList) ProtoMessage()               {}
func (*MileStonePlayerRewardInfoList) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{14} }

func (m *MileStonePlayerRewardInfoList) GetList() []*MileStonePlayerRewardInfo {
	if m != nil {
		return m.List
	}
	return nil
}

// 里程碑的奖励信息
type MileStoneData struct {
	MileStoneId uint32 `protobuf:"varint,1,opt,name=mile_stone_id,json=mileStoneId" json:"mile_stone_id,omitempty"`
	IsComplete  bool   `protobuf:"varint,2,opt,name=is_complete,json=isComplete" json:"is_complete,omitempty"`
	EndTime     int64  `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Value       uint64 `protobuf:"varint,5,opt,name=value" json:"value,omitempty"`
	Rank        uint32 `protobuf:"varint,6,opt,name=rank" json:"rank,omitempty"`
}

func (m *MileStoneData) Reset()                    { *m = MileStoneData{} }
func (m *MileStoneData) String() string            { return proto.CompactTextString(m) }
func (*MileStoneData) ProtoMessage()               {}
func (*MileStoneData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{15} }

func (m *MileStoneData) GetMileStoneId() uint32 {
	if m != nil {
		return m.MileStoneId
	}
	return 0
}

func (m *MileStoneData) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *MileStoneData) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *MileStoneData) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MileStoneData) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type MileStoneRankGuildInfo struct {
	GuildId         uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	GuildName       string `protobuf:"bytes,2,opt,name=guild_name,json=guildName" json:"guild_name,omitempty"`
	GuildShortName  string `protobuf:"bytes,3,opt,name=guild_short_name,json=guildShortName" json:"guild_short_name,omitempty"`
	GuildIcon       uint32 `protobuf:"varint,4,opt,name=guild_icon,json=guildIcon" json:"guild_icon,omitempty"`
	Value           uint64 `protobuf:"varint,5,opt,name=value" json:"value,omitempty"`
	GuildMasterId   uint64 `protobuf:"varint,6,opt,name=guild_master_id,json=guildMasterId" json:"guild_master_id,omitempty"`
	GuildMasterName string `protobuf:"bytes,7,opt,name=guild_master_name,json=guildMasterName" json:"guild_master_name,omitempty"`
	GuildMasterHead string `protobuf:"bytes,8,opt,name=guild_master_head,json=guildMasterHead" json:"guild_master_head,omitempty"`
	UpdateTime      int64  `protobuf:"varint,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Rank            uint32 `protobuf:"varint,10,opt,name=rank" json:"rank,omitempty"`
}

func (m *MileStoneRankGuildInfo) Reset()                    { *m = MileStoneRankGuildInfo{} }
func (m *MileStoneRankGuildInfo) String() string            { return proto.CompactTextString(m) }
func (*MileStoneRankGuildInfo) ProtoMessage()               {}
func (*MileStoneRankGuildInfo) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{16} }

func (m *MileStoneRankGuildInfo) GetGuildId() uint64 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *MileStoneRankGuildInfo) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *MileStoneRankGuildInfo) GetGuildShortName() string {
	if m != nil {
		return m.GuildShortName
	}
	return ""
}

func (m *MileStoneRankGuildInfo) GetGuildIcon() uint32 {
	if m != nil {
		return m.GuildIcon
	}
	return 0
}

func (m *MileStoneRankGuildInfo) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MileStoneRankGuildInfo) GetGuildMasterId() uint64 {
	if m != nil {
		return m.GuildMasterId
	}
	return 0
}

func (m *MileStoneRankGuildInfo) GetGuildMasterName() string {
	if m != nil {
		return m.GuildMasterName
	}
	return ""
}

func (m *MileStoneRankGuildInfo) GetGuildMasterHead() string {
	if m != nil {
		return m.GuildMasterHead
	}
	return ""
}

func (m *MileStoneRankGuildInfo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *MileStoneRankGuildInfo) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type MileStoneRankList struct {
	List []*MileStoneRankGuildInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *MileStoneRankList) Reset()                    { *m = MileStoneRankList{} }
func (m *MileStoneRankList) String() string            { return proto.CompactTextString(m) }
func (*MileStoneRankList) ProtoMessage()               {}
func (*MileStoneRankList) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{17} }

func (m *MileStoneRankList) GetList() []*MileStoneRankGuildInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type GuildTaskData struct {
	Tasks []*TaskData `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *GuildTaskData) Reset()                    { *m = GuildTaskData{} }
func (m *GuildTaskData) String() string            { return proto.CompactTextString(m) }
func (*GuildTaskData) ProtoMessage()               {}
func (*GuildTaskData) Descriptor() ([]byte, []int) { return fileDescriptor57, []int{18} }

func (m *GuildTaskData) GetTasks() []*TaskData {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskData)(nil), "protomsg.TaskData")
	proto.RegisterType((*ChapterData)(nil), "protomsg.ChapterData")
	proto.RegisterType((*BranchData)(nil), "protomsg.BranchData")
	proto.RegisterType((*DailyData)(nil), "protomsg.DailyData")
	proto.RegisterType((*DramaStoryTask)(nil), "protomsg.DramaStoryTask")
	proto.RegisterType((*DramaStoryGroupReward)(nil), "protomsg.DramaStoryGroupReward")
	proto.RegisterType((*DramaStoryTaskInfo)(nil), "protomsg.DramaStoryTaskInfo")
	proto.RegisterType((*MileStoneBaseData)(nil), "protomsg.MileStoneBaseData")
	proto.RegisterType((*MileStoneTaskBaseData)(nil), "protomsg.MileStoneTaskBaseData")
	proto.RegisterType((*MileStoneGuildData)(nil), "protomsg.MileStoneGuildData")
	proto.RegisterType((*MileStonePlayerTaskData)(nil), "protomsg.MileStonePlayerTaskData")
	proto.RegisterType((*MileStoneGuildCompleteInfo)(nil), "protomsg.MileStoneGuildCompleteInfo")
	proto.RegisterType((*MileStoneGuildCompleteAllInfo)(nil), "protomsg.MileStoneGuildCompleteAllInfo")
	proto.RegisterType((*MileStonePlayerRewardInfo)(nil), "protomsg.MileStonePlayerRewardInfo")
	proto.RegisterType((*MileStonePlayerRewardInfoList)(nil), "protomsg.MileStonePlayerRewardInfoList")
	proto.RegisterType((*MileStoneData)(nil), "protomsg.MileStoneData")
	proto.RegisterType((*MileStoneRankGuildInfo)(nil), "protomsg.MileStoneRankGuildInfo")
	proto.RegisterType((*MileStoneRankList)(nil), "protomsg.MileStoneRankList")
	proto.RegisterType((*GuildTaskData)(nil), "protomsg.GuildTaskData")
	proto.RegisterEnum("protomsg.TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("protomsg.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterEnum("protomsg.TaskConditionType", TaskConditionType_name, TaskConditionType_value)
	proto.RegisterEnum("protomsg.MileStoneContidionType", MileStoneContidionType_name, MileStoneContidionType_value)
	proto.RegisterEnum("protomsg.MileStoneConditionStatus", MileStoneConditionStatus_name, MileStoneConditionStatus_value)
	proto.RegisterEnum("protomsg.MileStoneEventType", MileStoneEventType_name, MileStoneEventType_value)
	proto.RegisterEnum("protomsg.MileStoneRewardTarget", MileStoneRewardTarget_name, MileStoneRewardTarget_value)
	proto.RegisterEnum("protomsg.GuildTaskConditionType", GuildTaskConditionType_name, GuildTaskConditionType_value)
}

func init() { proto.RegisterFile("msg_common_task.proto", fileDescriptor57) }

var fileDescriptor57 = []byte{
	// 3003 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x5a, 0x57, 0x73, 0x1c, 0xc7,
	0xb5, 0xd6, 0x22, 0xed, 0xa2, 0x41, 0x60, 0x1b, 0xcd, 0x04, 0x66, 0x70, 0x19, 0x04, 0x41, 0x12,
	0xa5, 0x4b, 0x49, 0x75, 0x4b, 0x8f, 0x00, 0x08, 0x90, 0xb8, 0x57, 0xa0, 0x70, 0x17, 0x10, 0x75,
	0xdf, 0xb6, 0x9a, 0x33, 0xcd, 0x45, 0x17, 0x66, 0x7a, 0x56, 0x3d, 0xbd, 0x14, 0xf7, 0xc5, 0x65,
	0xcb, 0xb9, 0xe4, 0x72, 0xc9, 0xb1, 0xac, 0x07, 0xdb, 0xe5, 0x1c, 0xca, 0xb1, 0x6c, 0xff, 0x04,
	0xff, 0x00, 0xe7, 0x9c, 0x65, 0x59, 0x39, 0x38, 0x27, 0x95, 0x5d, 0x7d, 0x7a, 0xe2, 0xee, 0x4c,
	0x2f, 0xe5, 0x27, 0x62, 0xfa, 0x7c, 0x7d, 0xfa, 0xe4, 0x73, 0xba, 0x97, 0x68, 0xbf, 0x1f, 0xb6,
	0x5b, 0x4e, 0xe0, 0xfb, 0x81, 0x68, 0x29, 0x1a, 0xee, 0x9e, 0xeb, 0xc8, 0x40, 0x05, 0xa4, 0x06,
	0xff, 0xf8, 0x61, 0xfb, 0xf0, 0xd1, 0x0c, 0xc0, 0x95, 0xd4, 0xa7, 0xad, 0x50, 0x05, 0xb2, 0x67,
	0x70, 0x0d, 0x89, 0x6a, 0xdb, 0x34, 0xdc, 0xbd, 0x40, 0x15, 0x25, 0x07, 0x51, 0x55, 0x73, 0x68,
	0x71, 0x77, 0xae, 0x32, 0x5f, 0x59, 0x98, 0x6e, 0x4e, 0xe8, 0xcf, 0x75, 0x97, 0x1c, 0x40, 0x13,
	0xa1, 0xa2, 0xaa, 0x1b, 0xce, 0x8d, 0x98, 0x75, 0xf3, 0x45, 0xf6, 0xa1, 0xf1, 0xeb, 0xd4, 0xeb,
	0xb2, 0xb9, 0xd1, 0xf9, 0xca, 0xc2, 0x58, 0xd3, 0x7c, 0x90, 0x13, 0x68, 0x8a, 0x3a, 0x0e, 0xeb,
	0xa8, 0x96, 0xe2, 0x3e, 0x9b, 0x1b, 0x03, 0x1a, 0x32, 0x4b, 0xdb, 0xdc, 0x67, 0x8d, 0x10, 0x4d,
	0xad, 0xec, 0xd0, 0x8e, 0x62, 0x12, 0x8e, 0x3d, 0x86, 0x90, 0x63, 0x3e, 0xd3, 0x93, 0x27, 0xa3,
	0x95, 0x75, 0x97, 0x1c, 0x41, 0x93, 0x3c, 0x6c, 0x49, 0xf6, 0x28, 0x95, 0x2e, 0x9c, 0x5f, 0x6b,
	0xd6, 0x78, 0xd8, 0x84, 0x6f, 0xb2, 0x80, 0xc6, 0xb5, 0x8c, 0xe1, 0xdc, 0xe8, 0xfc, 0xe8, 0xc2,
	0xd4, 0x79, 0x72, 0x2e, 0x56, 0xfb, 0x5c, 0xac, 0x55, 0xd3, 0x00, 0x1a, 0x2d, 0x84, 0x96, 0x25,
	0x15, 0xce, 0x0e, 0x9c, 0x79, 0x2b, 0xaa, 0x47, 0x32, 0x5e, 0x85, 0x45, 0x16, 0xce, 0x55, 0xe6,
	0x47, 0x17, 0xa6, 0x9b, 0x33, 0x66, 0x79, 0x39, 0x5a, 0x4d, 0x0f, 0x18, 0x19, 0x7e, 0xc0, 0xe4,
	0x05, 0xca, 0xbd, 0x1e, 0xf0, 0x27, 0x68, 0xcc, 0xa5, 0x8a, 0x45, 0xda, 0xc0, 0xdf, 0xda, 0x5a,
	0xa1, 0x13, 0x48, 0x16, 0x19, 0xd1, 0x7c, 0xbc, 0x0e, 0x0d, 0x9e, 0xa8, 0xa0, 0x99, 0x0b, 0xda,
	0x81, 0x5b, 0xda, 0x7f, 0x9a, 0x4a, 0x4e, 0xa3, 0x99, 0x8c, 0x4b, 0x53, 0xf3, 0xed, 0x71, 0x13,
	0xdc, 0xba, 0xdb, 0x67, 0xe0, 0x91, 0x7e, 0x03, 0xdf, 0x8f, 0x26, 0xc1, 0xed, 0x2e, 0x55, 0x14,
	0x3c, 0x39, 0x75, 0xfe, 0x68, 0x2a, 0x45, 0xfe, 0x44, 0x90, 0xa7, 0xa6, 0xa2, 0xbf, 0x1a, 0x1f,
	0xaa, 0xa0, 0xfd, 0x29, 0xe0, 0xa2, 0x0c, 0xba, 0x9d, 0xc8, 0x31, 0x43, 0x9c, 0x7a, 0x08, 0xd5,
	0xda, 0x1a, 0x9d, 0x0a, 0x54, 0x85, 0xef, 0x75, 0x97, 0xac, 0xa2, 0x69, 0xe3, 0xec, 0x56, 0x14,
	0x73, 0x5a, 0xa4, 0x99, 0xf3, 0xf3, 0x45, 0x22, 0x99, 0xc3, 0xb6, 0x00, 0xd7, 0xdc, 0x23, 0x33,
	0x5f, 0x8d, 0x6f, 0x8e, 0x21, 0x92, 0x97, 0x7d, 0x5d, 0x5c, 0x0b, 0xc8, 0x7d, 0x91, 0xb2, 0x5c,
	0x5c, 0x0b, 0xc0, 0xe5, 0x53, 0xe7, 0xe7, 0xca, 0x94, 0x35, 0x8a, 0xc2, 0xb6, 0x07, 0xd1, 0x5e,
	0x23, 0x6f, 0x5e, 0x34, 0x13, 0x14, 0x27, 0x8a, 0x18, 0x64, 0x8c, 0xd1, 0x9c, 0x6d, 0xa7, 0x1f,
	0x46, 0x3c, 0xb2, 0x8c, 0x8e, 0x6e, 0x7a, 0xb4, 0xc7, 0x64, 0x93, 0x75, 0xba, 0x8a, 0x2a, 0x1e,
	0x88, 0x35, 0x19, 0xf8, 0x4b, 0x8e, 0xe2, 0xd7, 0xb9, 0xea, 0x45, 0x19, 0x65, 0xc5, 0x90, 0x35,
	0x74, 0xbc, 0x88, 0xbe, 0xa5, 0x64, 0x20, 0xda, 0x3b, 0x81, 0xe7, 0x46, 0xb9, 0x37, 0x04, 0x45,
	0xae, 0xa0, 0x7d, 0xce, 0x0e, 0x15, 0x6d, 0xd6, 0xa7, 0xdd, 0x38, 0x68, 0x77, 0xba, 0xd4, 0x3c,
	0x59, 0xe3, 0x13, 0xc3, 0x21, 0xa7, 0x63, 0x03, 0x4d, 0xef, 0x72, 0xcf, 0x6b, 0x5d, 0x0b, 0xa4,
	0x6a, 0x89, 0xae, 0x3f, 0x37, 0x01, 0xe2, 0x4c, 0xe9, 0xc5, 0xb5, 0x40, 0xaa, 0xcb, 0x5d, 0x9f,
	0x2c, 0xa2, 0x59, 0x76, 0x9d, 0x09, 0xd5, 0xf2, 0x29, 0xf7, 0x5a, 0x22, 0x50, 0xdc, 0x61, 0x73,
	0x55, 0x48, 0xc5, 0x3a, 0x10, 0x36, 0x28, 0xf7, 0x2e, 0xc3, 0x72, 0x41, 0xb4, 0xd7, 0x86, 0x46,
	0xfb, 0x24, 0x1c, 0x99, 0x89, 0xbc, 0x73, 0x68, 0x6f, 0x4c, 0xce, 0x1e, 0x89, 0xe0, 0xc8, 0xd9,
	0x88, 0x94, 0x1e, 0xda, 0x78, 0x04, 0xcd, 0x6e, 0x70, 0x8f, 0x6d, 0xa9, 0x40, 0xb0, 0x65, 0x1a,
	0x32, 0x48, 0xef, 0x06, 0x9a, 0xf6, 0xb9, 0xc7, 0xb4, 0x20, 0x82, 0xa5, 0x01, 0x3e, 0xe5, 0xc7,
	0x48, 0x23, 0xc7, 0x55, 0xd6, 0xe6, 0xc2, 0x54, 0x41, 0xed, 0xcf, 0xd1, 0xe6, 0x24, 0xac, 0xe8,
	0x22, 0xa8, 0x33, 0x80, 0x09, 0x37, 0x2d, 0x91, 0xa3, 0xcd, 0x2a, 0x13, 0x2e, 0xd4, 0xc7, 0x35,
	0xb4, 0x3f, 0x39, 0x52, 0x1b, 0x3a, 0x39, 0xb6, 0xb4, 0x40, 0xef, 0x43, 0xe3, 0x4e, 0xd0, 0x15,
	0x6a, 0x6e, 0xdc, 0x14, 0x62, 0xf8, 0x68, 0xac, 0x23, 0x92, 0xf0, 0xb9, 0xd8, 0xe5, 0x9e, 0x0b,
	0x4c, 0xee, 0x41, 0x63, 0x7a, 0x57, 0x54, 0x6f, 0x32, 0xb1, 0x5b, 0x78, 0x66, 0x13, 0xc0, 0x8d,
	0xcb, 0xe8, 0x60, 0x42, 0x36, 0xd1, 0x94, 0x74, 0x8d, 0xff, 0x88, 0xdf, 0x06, 0x3a, 0x9c, 0x17,
	0x6d, 0x25, 0xf0, 0x3b, 0x1e, 0x53, 0x0c, 0xb2, 0x4d, 0x57, 0x07, 0xbd, 0x18, 0x2b, 0x3a, 0xd6,
	0xac, 0xc2, 0xb7, 0xd1, 0xd4, 0xb4, 0x9c, 0x91, 0x4c, 0xcb, 0x69, 0xb8, 0xe8, 0x58, 0x31, 0xbb,
	0x25, 0xcf, 0x03, 0x8e, 0x2b, 0x08, 0x45, 0x1c, 0x75, 0xde, 0x57, 0xfb, 0x03, 0xbb, 0x5c, 0x96,
	0xe6, 0xa4, 0x39, 0x59, 0x5c, 0x0b, 0x1a, 0x4f, 0x55, 0xd0, 0xa1, 0x3e, 0x2b, 0x98, 0x78, 0x87,
	0x23, 0x6e, 0x26, 0x26, 0x4e, 0xa0, 0x29, 0x1e, 0xea, 0x66, 0x0c, 0xfc, 0xa3, 0x6e, 0x86, 0x78,
	0x18, 0x9f, 0xa8, 0x99, 0xf0, 0xb0, 0xd5, 0x66, 0x2a, 0x6e, 0x78, 0xa3, 0x00, 0x99, 0xe2, 0xe1,
	0x45, 0xa6, 0xa2, 0xd2, 0x5a, 0x1e, 0x39, 0xa9, 0x75, 0xc6, 0xb3, 0x0d, 0xf9, 0x10, 0xaa, 0xf9,
	0xbd, 0x96, 0x21, 0x98, 0x14, 0xac, 0xfa, 0xbd, 0x2b, 0x40, 0x22, 0x68, 0x4c, 0x52, 0xb1, 0x3b,
	0x57, 0x35, 0x7d, 0x4a, 0xff, 0xdd, 0xf8, 0xff, 0x8c, 0x31, 0xfb, 0xb5, 0x7c, 0x80, 0x87, 0x8a,
	0xfc, 0x37, 0x1a, 0xf3, 0x78, 0xa8, 0xa2, 0xf2, 0x79, 0xaa, 0xc0, 0x8c, 0xfd, 0xdb, 0x9a, 0xb0,
	0xa1, 0xf1, 0x64, 0x05, 0x4d, 0x27, 0x98, 0x9b, 0x4e, 0xa4, 0xa1, 0x46, 0x7b, 0xdd, 0x06, 0x89,
	0xb5, 0x9e, 0xc8, 0x68, 0xfd, 0xf4, 0x08, 0x3a, 0x90, 0xc8, 0xd6, 0xa4, 0x62, 0xf7, 0x62, 0xec,
	0x77, 0x5b, 0x38, 0x1e, 0x8b, 0xe3, 0x4a, 0x50, 0xdf, 0x88, 0x36, 0x19, 0x45, 0xcc, 0x65, 0xea,
	0xeb, 0xe6, 0x8e, 0x0d, 0x39, 0xdc, 0x81, 0x1a, 0x48, 0xa3, 0x4a, 0x30, 0xd9, 0x9c, 0x81, 0xf5,
	0x2d, 0xbd, 0x0c, 0xc8, 0x84, 0x11, 0x77, 0x02, 0x01, 0x5a, 0x4c, 0xc7, 0xa1, 0xe7, 0x04, 0xa2,
	0x44, 0x8f, 0xb3, 0xa8, 0x6e, 0x36, 0xf9, 0x34, 0x8c, 0xea, 0x9d, 0xf1, 0xef, 0x34, 0x2c, 0x6f,
	0xc0, 0xea, 0xba, 0xab, 0x8b, 0x6c, 0x0e, 0x07, 0x72, 0x54, 0x41, 0x8e, 0x7a, 0x06, 0x09, 0x82,
	0xf4, 0x63, 0x77, 0x18, 0x35, 0x75, 0x36, 0x8f, 0xbd, 0xc4, 0x28, 0x78, 0xa6, 0xdb, 0xd1, 0xb3,
	0x8d, 0xb1, 0xfd, 0x24, 0xd8, 0x1e, 0x99, 0x25, 0x30, 0x7f, 0x6c, 0x68, 0x94, 0x31, 0xf4, 0x7a,
	0xa6, 0xa0, 0x6a, 0x3b, 0x43, 0x48, 0xdd, 0x9b, 0x0b, 0xa9, 0xf9, 0x82, 0x90, 0xca, 0xb9, 0x24,
	0x8a, 0xa7, 0xfb, 0xd1, 0x34, 0x2c, 0x25, 0xb5, 0x28, 0x19, 0xa6, 0x2a, 0x43, 0x86, 0xa9, 0xc5,
	0xd7, 0x2a, 0x66, 0xf0, 0xdd, 0xee, 0x75, 0x18, 0x99, 0x45, 0xd3, 0xbb, 0xf1, 0xc7, 0xe5, 0x40,
	0x30, 0x7c, 0x4b, 0x6e, 0x69, 0x83, 0x72, 0x81, 0x2b, 0x64, 0x2f, 0xaa, 0x27, 0x4b, 0x66, 0x3e,
	0xc4, 0x23, 0x84, 0xa0, 0x99, 0x64, 0x11, 0xc6, 0x3f, 0x3c, 0x4a, 0xf6, 0xa3, 0xd9, 0x64, 0x2d,
	0x6e, 0xd6, 0x78, 0x8c, 0x1c, 0x46, 0x07, 0x92, 0x65, 0x10, 0x3b, 0xa1, 0x8d, 0x93, 0x83, 0x68,
	0x6f, 0x9e, 0x76, 0x81, 0xc9, 0xab, 0x3d, 0x3c, 0x91, 0xe3, 0x7f, 0x29, 0x10, 0x81, 0xc4, 0x55,
	0x72, 0x08, 0xed, 0x4f, 0xc1, 0x5e, 0x70, 0x95, 0x7a, 0x5b, 0x4c, 0x5e, 0x67, 0x12, 0xd7, 0x72,
	0x70, 0xe0, 0x83, 0x27, 0x73, 0x72, 0x9b, 0xc4, 0xc4, 0x68, 0x71, 0x07, 0x21, 0xbd, 0x16, 0x75,
	0xea, 0x18, 0x62, 0x3e, 0x23, 0x13, 0x1c, 0x40, 0x24, 0xb3, 0xb8, 0x7a, 0x83, 0x39, 0x5d, 0xc5,
	0x70, 0x85, 0xec, 0x43, 0x38, 0xb3, 0xbe, 0xa4, 0x73, 0x1c, 0x8f, 0x24, 0x1a, 0x98, 0xd5, 0x38,
	0x37, 0xf1, 0xe8, 0xe2, 0xb3, 0xf3, 0x68, 0x56, 0x13, 0x56, 0x02, 0xe1, 0x72, 0x3d, 0x7d, 0x80,
	0xc9, 0x63, 0x78, 0xb2, 0xda, 0x8a, 0x4e, 0x3d, 0x85, 0x4e, 0xf4, 0x11, 0xfe, 0xaf, 0x4b, 0x3d,
	0xae, 0x7a, 0x97, 0x98, 0x0c, 0x56, 0x74, 0x5f, 0xc3, 0x15, 0x72, 0x14, 0xcd, 0xf5, 0x81, 0x52,
	0xea, 0x48, 0x09, 0xf5, 0x01, 0x76, 0x9d, 0x79, 0x78, 0x94, 0x9c, 0x44, 0xc7, 0xfa, 0xa8, 0x40,
	0x49, 0x19, 0x8c, 0x95, 0x41, 0x96, 0xa4, 0xdf, 0x33, 0x90, 0x71, 0x72, 0x1c, 0x1d, 0xee, 0x83,
	0x2c, 0x53, 0xa5, 0x3c, 0xb6, 0x19, 0x3c, 0xca, 0x24, 0x9e, 0x20, 0xf3, 0xe8, 0x68, 0x3f, 0x5d,
	0xbb, 0x83, 0x8b, 0xb6, 0x91, 0xa3, 0x4a, 0x1a, 0xe8, 0x78, 0x1f, 0x62, 0x25, 0xf0, 0x3c, 0xe6,
	0xa8, 0x26, 0x0b, 0x83, 0xae, 0x74, 0x18, 0xae, 0x15, 0x68, 0xb2, 0xcd, 0x9c, 0x1d, 0xc3, 0x61,
	0xb2, 0x80, 0xfa, 0x3f, 0x01, 0x17, 0xc6, 0xed, 0xa8, 0x90, 0xbf, 0x71, 0x4a, 0x74, 0xf9, 0xc2,
	0x53, 0xe4, 0x34, 0x9a, 0xef, 0xc7, 0x70, 0xd5, 0xdb, 0x52, 0x92, 0x2a, 0xd6, 0xee, 0x99, 0x73,
	0xf6, 0x14, 0xe8, 0xba, 0x24, 0xc0, 0x1d, 0x5b, 0x8a, 0x4a, 0x3c, 0x5d, 0xe0, 0xb2, 0x98, 0x43,
	0xac, 0x33, 0x9e, 0x21, 0x27, 0xd0, 0x91, 0x41, 0x26, 0xa9, 0x36, 0xf5, 0x02, 0x79, 0x97, 0x1e,
	0xa5, 0xbb, 0x4c, 0xa4, 0x8e, 0xc1, 0xe4, 0x2c, 0x6a, 0xf4, 0x61, 0x56, 0x6f, 0x74, 0x98, 0xf9,
	0x73, 0x93, 0x86, 0xa1, 0xc1, 0xcd, 0x92, 0x33, 0xe8, 0x64, 0x91, 0x03, 0x63, 0x71, 0x0c, 0x8c,
	0x90, 0x05, 0x74, 0xba, 0x0f, 0x16, 0xdb, 0x3e, 0xef, 0xac, 0xbd, 0x05, 0xee, 0xd4, 0xba, 0xa7,
	0xa2, 0xed, 0x2b, 0x71, 0x95, 0xa1, 0xee, 0x2f, 0xd8, 0xff, 0x60, 0x87, 0x89, 0x0d, 0x1e, 0x2a,
	0x83, 0x38, 0x40, 0xee, 0x40, 0x0b, 0x7d, 0x88, 0x87, 0x19, 0x95, 0x51, 0xec, 0xaf, 0x3e, 0xd2,
	0xe5, 0x1d, 0x9f, 0x89, 0x08, 0x7d, 0x90, 0x1c, 0x41, 0x07, 0xfb, 0xd0, 0x57, 0x78, 0xc7, 0x08,
	0x7b, 0xa8, 0xc0, 0x92, 0x97, 0xa8, 0xbb, 0xe4, 0xba, 0x5a, 0xdc, 0xcd, 0x80, 0x0b, 0x85, 0x8f,
	0x14, 0xb8, 0xe3, 0x12, 0x0d, 0xb5, 0xf3, 0xb7, 0x77, 0x98, 0xcf, 0xf0, 0xd1, 0xa2, 0x24, 0xa2,
	0x6e, 0x93, 0xe9, 0xd6, 0x81, 0x8f, 0x15, 0x38, 0x62, 0xc9, 0xd9, 0xe1, 0xec, 0x3a, 0x33, 0x42,
	0x46, 0xc9, 0x7f, 0xbc, 0x20, 0x93, 0x36, 0xe8, 0x8d, 0x6c, 0xa6, 0x9c, 0x28, 0x88, 0x9e, 0xb5,
	0xa0, 0x2b, 0xdc, 0x6d, 0xa6, 0x99, 0x18, 0x7d, 0xe7, 0x0b, 0xf8, 0x00, 0x28, 0xf5, 0xf9, 0x49,
	0x72, 0x72, 0xd0, 0x45, 0x2c, 0x0c, 0x21, 0xf3, 0xf4, 0xd0, 0x8d, 0x9f, 0xa9, 0x92, 0x3b, 0xd0,
	0xad, 0x25, 0x10, 0xed, 0xab, 0x87, 0x3a, 0x6d, 0x49, 0x5d, 0x68, 0x5c, 0x21, 0x7e, 0xb6, 0x4a,
	0x16, 0xd0, 0xa9, 0x12, 0xf4, 0xba, 0x62, 0xfe, 0x43, 0x61, 0x84, 0x7c, 0xce, 0xc6, 0x77, 0xc9,
	0x71, 0x98, 0x47, 0x15, 0xdb, 0xe0, 0x82, 0x77, 0x15, 0x0b, 0xf1, 0xf3, 0x36, 0xb4, 0xe9, 0x0a,
	0x61, 0xc8, 0x43, 0x65, 0x78, 0xbf, 0x50, 0x25, 0xb7, 0x0e, 0x58, 0x3a, 0x46, 0x6f, 0x75, 0x98,
	0x70, 0x57, 0xfd, 0x40, 0xb0, 0x1e, 0x7e, 0xb1, 0x4a, 0xce, 0x0c, 0xe4, 0x72, 0x0c, 0xfc, 0x5f,
	0xee, 0x79, 0xab, 0x82, 0xf9, 0x3d, 0xfc, 0x52, 0x95, 0xdc, 0x36, 0x10, 0xf3, 0x31, 0xec, 0x81,
	0xa0, 0xcd, 0xc5, 0x05, 0x1a, 0x95, 0xb8, 0x97, 0x6d, 0x06, 0xd8, 0x96, 0x94, 0x0b, 0x2e, 0xda,
	0xba, 0x22, 0xe2, 0x57, 0xaa, 0xe4, 0xbf, 0xd0, 0x1d, 0x25, 0xc8, 0xc8, 0xa8, 0x50, 0x2d, 0xf4,
	0xbd, 0xcf, 0xe8, 0xf5, 0x6a, 0x95, 0x2c, 0xa2, 0x33, 0x16, 0x71, 0x97, 0xa9, 0xbc, 0x4a, 0x25,
	0xa7, 0x22, 0xc4, 0x7f, 0xa8, 0x92, 0xbb, 0xd0, 0x62, 0x99, 0x27, 0x84, 0x23, 0x19, 0x0d, 0x59,
	0x36, 0xa4, 0xfe, 0x58, 0x25, 0x77, 0xa3, 0xdb, 0xcb, 0x62, 0x21, 0x4a, 0xec, 0x9c, 0xb3, 0xff,
	0x64, 0x33, 0x4b, 0xdc, 0xa5, 0xb7, 0x9c, 0x40, 0x32, 0xfc, 0xe7, 0x2a, 0x39, 0x87, 0x6e, 0x1b,
	0x06, 0x55, 0xb4, 0xcd, 0x0c, 0xfe, 0x2f, 0x37, 0x83, 0x07, 0x73, 0x1a, 0xfc, 0x5f, 0xab, 0xe4,
	0x3c, 0xba, 0x73, 0x08, 0x3e, 0xb1, 0x8e, 0xd9, 0xf3, 0xb7, 0x2a, 0xb9, 0x07, 0x9d, 0x1b, 0xb2,
	0x67, 0x83, 0x76, 0xa2, 0xfe, 0x62, 0x36, 0xfd, 0xbd, 0x4a, 0xee, 0x45, 0x77, 0x0d, 0x3d, 0x28,
	0x31, 0xab, 0xd9, 0xf5, 0x8f, 0x9b, 0x11, 0x2f, 0x89, 0x37, 0xb3, 0xe7, 0x9f, 0x55, 0x72, 0x76,
	0xa0, 0x1e, 0xc7, 0x7b, 0x60, 0x66, 0x32, 0xb8, 0xd7, 0x6c, 0x7e, 0xd3, 0x01, 0x04, 0xfc, 0x59,
	0x26, 0x8c, 0xfe, 0x55, 0x25, 0xb7, 0xa3, 0xb3, 0x25, 0x3b, 0x52, 0x85, 0x4d, 0x40, 0xbf, 0xb1,
	0x66, 0xc9, 0x3c, 0x5d, 0xf9, 0x72, 0xe8, 0x37, 0xd5, 0x2c, 0x7e, 0x4b, 0xec, 0xbf, 0x16, 0xc8,
	0x08, 0xff, 0x58, 0x8d, 0xdc, 0x39, 0x50, 0xc1, 0x73, 0x79, 0xbd, 0xb5, 0x13, 0x74, 0x96, 0xbb,
	0x51, 0x76, 0xbd, 0x79, 0x98, 0x30, 0x39, 0xf4, 0x5b, 0x6c, 0xcc, 0x57, 0x02, 0xdf, 0xa7, 0xc2,
	0x5d, 0x61, 0x02, 0xc6, 0x72, 0x19, 0xe0, 0xb7, 0xd6, 0x2c, 0xd9, 0x95, 0x8c, 0x08, 0x1b, 0x54,
	0x3a, 0x3b, 0xf8, 0x6d, 0x35, 0x4b, 0x9a, 0x2f, 0x29, 0x45, 0x9d, 0x5d, 0x53, 0x89, 0xf1, 0xdb,
	0x6d, 0xc8, 0x26, 0x73, 0x64, 0x97, 0x47, 0x55, 0xeb, 0x1d, 0xb6, 0xf3, 0x57, 0x24, 0xa3, 0x8a,
	0x35, 0x03, 0x0f, 0x72, 0x0f, 0xbf, 0xb3, 0x66, 0x71, 0xba, 0x19, 0xee, 0x99, 0xb3, 0x73, 0x21,
	0x10, 0xd1, 0x95, 0x22, 0xc4, 0x8f, 0x5b, 0xb9, 0x77, 0x25, 0xdb, 0x96, 0x41, 0xd0, 0x31, 0x86,
	0x7b, 0x97, 0xcd, 0x70, 0x57, 0xb8, 0xe7, 0xd1, 0x36, 0x83, 0x01, 0xd6, 0xc0, 0xdf, 0x5d, 0xb3,
	0xc4, 0x13, 0x24, 0x69, 0x86, 0xf7, 0x13, 0x35, 0x4b, 0x5d, 0x4a, 0x83, 0x4f, 0x4f, 0xbb, 0x66,
	0xc3, 0x7b, 0x6c, 0x1b, 0x40, 0xd5, 0x8b, 0xfc, 0x9a, 0x5a, 0xf1, 0x28, 0xf7, 0xcd, 0x86, 0xf7,
	0xd6, 0x2c, 0x85, 0x35, 0xa9, 0x7c, 0x51, 0x41, 0x33, 0xb5, 0xef, 0x7d, 0x36, 0x85, 0xe3, 0x2d,
	0xda, 0xa2, 0x06, 0xfe, 0xfe, 0x9b, 0x81, 0xeb, 0x22, 0x6f, 0xe0, 0x1f, 0xb0, 0x69, 0x10, 0xb7,
	0x3a, 0xb8, 0x31, 0x71, 0x01, 0xdd, 0xee, 0x83, 0xb6, 0x0d, 0x99, 0x9c, 0x4b, 0x46, 0xde, 0x27,
	0x6b, 0xe4, 0xd4, 0xc0, 0xf4, 0x92, 0x6b, 0x78, 0x4b, 0x9b, 0xf8, 0xc3, 0xb6, 0x98, 0x69, 0x32,
	0x26, 0xae, 0x05, 0xd2, 0x61, 0x1b, 0xcc, 0xbf, 0xca, 0xa4, 0xb1, 0xe4, 0x47, 0x6c, 0x72, 0xe4,
	0x33, 0xc2, 0x04, 0xd9, 0x47, 0x6f, 0xce, 0xb9, 0x1b, 0x5c, 0x44, 0xce, 0xfd, 0x58, 0x6d, 0x48,
	0x47, 0x83, 0x82, 0x68, 0xb0, 0x1f, 0xb7, 0xc9, 0xbf, 0xe9, 0x75, 0x85, 0xcb, 0x64, 0x6c, 0x11,
	0xb3, 0xe3, 0x13, 0xb6, 0x6a, 0x04, 0xd7, 0x4c, 0xe9, 0x9b, 0x2e, 0x62, 0xf0, 0x9f, 0xac, 0x59,
	0x3a, 0x42, 0x94, 0xab, 0x03, 0xd7, 0xaa, 0x4f, 0xd5, 0x2c, 0x5d, 0x10, 0x6c, 0xbf, 0xd2, 0x95,
	0x92, 0x09, 0xa7, 0x87, 0x3f, 0x6d, 0x93, 0x67, 0x8b, 0x09, 0x37, 0x0d, 0x67, 0x60, 0xfd, 0x99,
	0xda, 0xf0, 0x11, 0x21, 0x99, 0x71, 0x8d, 0x07, 0x3e, 0x6b, 0xad, 0x90, 0x54, 0x4a, 0xda, 0x66,
	0xb1, 0x91, 0x42, 0xfc, 0xb9, 0x9a, 0xa5, 0xc7, 0x40, 0xef, 0x70, 0xdd, 0xd5, 0x1b, 0x1d, 0xfc,
	0x79, 0x6b, 0x40, 0x76, 0x25, 0x83, 0x19, 0x3a, 0x93, 0xe5, 0x5f, 0xb0, 0xf9, 0x2a, 0x6e, 0x78,
	0x7a, 0x96, 0x4f, 0x06, 0xa7, 0x2f, 0xda, 0x72, 0x6a, 0xa3, 0xeb, 0x29, 0x9e, 0x1b, 0x1f, 0xbf,
	0x64, 0xab, 0x39, 0xfa, 0x92, 0xa1, 0x4c, 0xe1, 0x01, 0xf0, 0x97, 0x6d, 0xbc, 0x23, 0xbf, 0xb2,
	0xd4, 0xa3, 0x5f, 0xb1, 0x95, 0xec, 0xe5, 0x6e, 0x6f, 0x83, 0xc6, 0x9d, 0xf4, 0xab, 0xb6, 0xf0,
	0x05, 0xdf, 0xa7, 0xb6, 0xfe, 0x9a, 0xdd, 0x24, 0x4e, 0xd7, 0xef, 0xea, 0x3a, 0x90, 0xe9, 0xec,
	0x5f, 0x2f, 0xb2, 0x7a, 0xee, 0x09, 0x24, 0x3f, 0xf4, 0xe1, 0x6f, 0xd5, 0x0b, 0xe2, 0xd7, 0xb2,
	0x41, 0xf7, 0x61, 0xfc, 0xed, 0xfa, 0xe2, 0x63, 0xe3, 0x99, 0x47, 0xbc, 0x95, 0x40, 0x28, 0xee,
	0xc6, 0x0f, 0x0e, 0xfa, 0x3e, 0x93, 0x25, 0xe5, 0x5f, 0x1d, 0x16, 0xd1, 0xd9, 0x22, 0x6a, 0xee,
	0x90, 0xf8, 0xf1, 0x41, 0xdf, 0x1a, 0x0b, 0xb0, 0xa6, 0x84, 0x64, 0x8a, 0xce, 0x48, 0x19, 0x72,
	0x85, 0x86, 0xca, 0x33, 0x91, 0x66, 0x90, 0xa3, 0xe4, 0x2e, 0x74, 0x7b, 0x11, 0xd2, 0xb4, 0xde,
	0x35, 0x2e, 0x43, 0xb5, 0x42, 0x3b, 0xaa, 0x2b, 0x59, 0xfc, 0x44, 0x71, 0x27, 0xba, 0xad, 0x68,
	0x83, 0xbe, 0x10, 0x0d, 0xc2, 0xc7, 0xcb, 0xf4, 0x8b, 0x2e, 0x59, 0x59, 0xec, 0x44, 0x99, 0xd4,
	0x70, 0xd7, 0xca, 0x22, 0xab, 0x70, 0xab, 0x2d, 0x40, 0xc6, 0x57, 0x5b, 0x5c, 0x83, 0x7b, 0x5b,
	0x01, 0x02, 0x9a, 0x16, 0x38, 0x6d, 0x92, 0x9c, 0x43, 0x8b, 0x43, 0x4d, 0x9f, 0xce, 0x59, 0x08,
	0xee, 0x8b, 0x45, 0xe2, 0xc9, 0xc0, 0xed, 0x3a, 0x50, 0x08, 0xf1, 0x14, 0xdc, 0x4f, 0xcb, 0x7c,
	0x04, 0xbd, 0xac, 0x49, 0xc5, 0x2e, 0xde, 0x03, 0x57, 0xe5, 0x02, 0xdc, 0x1a, 0x17, 0x3c, 0xdc,
	0x01, 0x1d, 0xa6, 0xcb, 0x04, 0x34, 0x3f, 0x15, 0x18, 0x83, 0x18, 0x3b, 0x02, 0xcf, 0x99, 0xc5,
	0xc7, 0x2b, 0x68, 0x6e, 0x10, 0x1f, 0xbd, 0xb4, 0x9d, 0x41, 0x27, 0x77, 0xcb, 0x88, 0xad, 0xcb,
	0x81, 0xd2, 0xb6, 0xc3, 0xb7, 0x94, 0xc8, 0x15, 0xc1, 0x00, 0x53, 0x81, 0xc7, 0x9b, 0x52, 0x8c,
	0xd1, 0x00, 0x8f, 0x2c, 0x7e, 0xa3, 0x92, 0xf9, 0x15, 0x68, 0xf5, 0xba, 0xae, 0xaf, 0x03, 0xe9,
	0x90, 0x2c, 0xc7, 0xe9, 0x70, 0x1c, 0x1d, 0x2e, 0xa2, 0x46, 0x93, 0x60, 0xa5, 0x6c, 0xb7, 0x0e,
	0x11, 0x3c, 0x92, 0xd7, 0x31, 0xa5, 0xe6, 0xb3, 0x75, 0xb4, 0x8c, 0x09, 0x58, 0x7d, 0x6c, 0xf1,
	0x0d, 0x99, 0x1f, 0xc1, 0xcc, 0x0f, 0x09, 0xdb, 0x54, 0xb6, 0x99, 0xca, 0xcb, 0x96, 0xa5, 0xb4,
	0x96, 0x3c, 0x0f, 0xdf, 0x92, 0x37, 0x4b, 0x8e, 0x9e, 0xd8, 0x08, 0x57, 0xe0, 0xfd, 0xa3, 0x18,
	0x05, 0x5e, 0x1c, 0x59, 0x7c, 0x7a, 0x0a, 0x1d, 0x48, 0x1e, 0x97, 0xf3, 0x6f, 0x97, 0x3a, 0xec,
	0x8b, 0x49, 0xb1, 0xfd, 0xf4, 0x1d, 0xa9, 0x04, 0x51, 0xdc, 0xed, 0xbe, 0x53, 0x87, 0x9a, 0x5a,
	0xb2, 0xa7, 0xe8, 0x96, 0xfb, 0xdd, 0x3a, 0xb4, 0x02, 0xfb, 0x29, 0xc9, 0xb5, 0x1b, 0x7f, 0xaf,
	0x0e, 0xad, 0xc0, 0x0e, 0xd7, 0x83, 0x21, 0xfe, 0xbe, 0x95, 0xf1, 0xc0, 0x83, 0xc6, 0x0f, 0xea,
	0x30, 0x35, 0x94, 0xc0, 0xa1, 0x77, 0x6d, 0x4a, 0xd6, 0xa1, 0x92, 0xe1, 0x1f, 0xd6, 0xe1, 0x35,
	0xa3, 0x04, 0xda, 0xa4, 0x2e, 0x95, 0x10, 0x06, 0xf8, 0x47, 0x56, 0x61, 0x33, 0xaf, 0x24, 0xf8,
	0xc7, 0x75, 0x98, 0x12, 0x6c, 0xc8, 0xf4, 0xfe, 0x80, 0x7f, 0x52, 0x87, 0xb1, 0xc5, 0x86, 0xce,
	0xdd, 0xbb, 0x7e, 0x6a, 0x35, 0xc5, 0xc0, 0x35, 0xed, 0x67, 0x56, 0x53, 0xe4, 0xae, 0x48, 0x3f,
	0xb7, 0x72, 0x8e, 0xa0, 0x69, 0x23, 0xff, 0x45, 0x1d, 0xda, 0xb3, 0x1d, 0x0e, 0x4f, 0x7b, 0x21,
	0xfe, 0xa5, 0xd5, 0x24, 0xfd, 0x03, 0xf7, 0xaf, 0xea, 0xd0, 0x9a, 0xed, 0xe8, 0x25, 0xd1, 0x4b,
	0x36, 0xfc, 0xda, 0xb4, 0x66, 0x8b, 0x4d, 0x0a, 0x36, 0xfd, 0xc6, 0x2a, 0x53, 0x3a, 0x4f, 0xaf,
	0xfa, 0x1d, 0xd5, 0xc3, 0x4f, 0x59, 0xb5, 0xcd, 0x4f, 0xa2, 0xbf, 0xad, 0x93, 0xd3, 0xe8, 0x44,
	0x19, 0x36, 0x9a, 0x71, 0xf0, 0xd3, 0xd6, 0xc8, 0x5b, 0xee, 0xf6, 0x96, 0x84, 0x01, 0xfe, 0xae,
	0x0e, 0x73, 0x64, 0x99, 0x76, 0xf1, 0xed, 0x12, 0x3f, 0x63, 0x55, 0xa8, 0x6f, 0x86, 0xc7, 0xcf,
	0x5a, 0x85, 0x5c, 0xbd, 0xd1, 0x61, 0x0f, 0x73, 0x81, 0x9f, 0xab, 0xc3, 0x24, 0x58, 0x82, 0xea,
	0x7b, 0x15, 0x7b, 0xde, 0x2a, 0x68, 0xfa, 0xe2, 0xf7, 0x82, 0xf5, 0xe8, 0xf8, 0x46, 0xf5, 0xa2,
	0x35, 0x31, 0xa2, 0x26, 0x97, 0xfe, 0x8f, 0x11, 0xfc, 0x92, 0x3d, 0x08, 0xa2, 0xa6, 0xd8, 0xeb,
	0x30, 0x37, 0xb3, 0xe9, 0xe5, 0x3a, 0xb9, 0x0f, 0xdd, 0x3d, 0x64, 0x13, 0x4c, 0x45, 0xb9, 0x6d,
	0xaf, 0x58, 0xa3, 0x21, 0xd7, 0x80, 0xf1, 0xab, 0xd6, 0x68, 0x8e, 0xcb, 0xe8, 0xa6, 0x0c, 0xc2,
	0x0e, 0x93, 0x5c, 0xf5, 0xf0, 0xef, 0xeb, 0x57, 0x27, 0xe0, 0x37, 0xc2, 0x7b, 0xfe, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x5b, 0xb6, 0xdf, 0xf3, 0x49, 0x27, 0x00, 0x00,
}
