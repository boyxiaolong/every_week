// Code generated by protoc-gen-go. DO NOT EDIT.
// source: episode.proto

package protomsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 玩家引导进度通知
type MsgGS2CLPlayerAllEpisodeNotice struct {
	Data *EpisodeDatas `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *MsgGS2CLPlayerAllEpisodeNotice) Reset()                    { *m = MsgGS2CLPlayerAllEpisodeNotice{} }
func (m *MsgGS2CLPlayerAllEpisodeNotice) String() string            { return proto.CompactTextString(m) }
func (*MsgGS2CLPlayerAllEpisodeNotice) ProtoMessage()               {}
func (*MsgGS2CLPlayerAllEpisodeNotice) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *MsgGS2CLPlayerAllEpisodeNotice) GetData() *EpisodeDatas {
	if m != nil {
		return m.Data
	}
	return nil
}

// 请求记录关键节点
type MsgCL2GSEpisodeRecordRequest struct {
	GuideId uint32 `protobuf:"varint,1,opt,name=guide_id,json=guideId" json:"guide_id,omitempty"`
}

func (m *MsgCL2GSEpisodeRecordRequest) Reset()                    { *m = MsgCL2GSEpisodeRecordRequest{} }
func (m *MsgCL2GSEpisodeRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*MsgCL2GSEpisodeRecordRequest) ProtoMessage()               {}
func (*MsgCL2GSEpisodeRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *MsgCL2GSEpisodeRecordRequest) GetGuideId() uint32 {
	if m != nil {
		return m.GuideId
	}
	return 0
}

type MsgGS2CLEpisodeRecordReply struct {
	GuideId   uint32 `protobuf:"varint,1,opt,name=guide_id,json=guideId" json:"guide_id,omitempty"`
	ErrorCode int32  `protobuf:"varint,99,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *MsgGS2CLEpisodeRecordReply) Reset()                    { *m = MsgGS2CLEpisodeRecordReply{} }
func (m *MsgGS2CLEpisodeRecordReply) String() string            { return proto.CompactTextString(m) }
func (*MsgGS2CLEpisodeRecordReply) ProtoMessage()               {}
func (*MsgGS2CLEpisodeRecordReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *MsgGS2CLEpisodeRecordReply) GetGuideId() uint32 {
	if m != nil {
		return m.GuideId
	}
	return 0
}

func (m *MsgGS2CLEpisodeRecordReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgGS2CLPlayerAllEpisodeNotice)(nil), "protomsg.MsgGS2CLPlayerAllEpisodeNotice")
	proto.RegisterType((*MsgCL2GSEpisodeRecordRequest)(nil), "protomsg.MsgCL2GSEpisodeRecordRequest")
	proto.RegisterType((*MsgGS2CLEpisodeRecordReply)(nil), "protomsg.MsgGS2CLEpisodeRecordReply")
}

func init() { proto.RegisterFile("episode.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2d, 0xc8, 0x2c,
	0xce, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xb9, 0xc5, 0xe9,
	0x52, 0x02, 0xb9, 0xc5, 0xe9, 0xf1, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9, 0x79, 0x10, 0x39, 0x25, 0x1f,
	0x2e, 0x39, 0xdf, 0xe2, 0x74, 0xf7, 0x60, 0x23, 0x67, 0x9f, 0x80, 0x9c, 0xc4, 0xca, 0xd4, 0x22,
	0xc7, 0x9c, 0x1c, 0x57, 0x88, 0x6e, 0xbf, 0xfc, 0x92, 0xcc, 0xe4, 0x54, 0x21, 0x2d, 0x2e, 0x96,
	0x94, 0xc4, 0x92, 0x44, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x31, 0x3d, 0x98, 0x61, 0x7a,
	0x50, 0x65, 0x2e, 0x89, 0x25, 0x89, 0xc5, 0x41, 0x60, 0x35, 0x4a, 0x96, 0x5c, 0x32, 0xbe, 0xc5,
	0xe9, 0xce, 0x3e, 0x46, 0xee, 0xc1, 0x50, 0xd9, 0xa0, 0xd4, 0xe4, 0xfc, 0xa2, 0x94, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x49, 0x2e, 0x8e, 0xf4, 0xd2, 0xcc, 0x94, 0xd4, 0xf8, 0xcc,
	0x14, 0xb0, 0x79, 0xbc, 0x41, 0xec, 0x60, 0xbe, 0x67, 0x8a, 0x52, 0x18, 0x97, 0x14, 0xcc, 0x21,
	0x68, 0x5a, 0x0b, 0x72, 0x2a, 0xf1, 0x68, 0x14, 0x92, 0xe5, 0xe2, 0x4a, 0x2d, 0x2a, 0xca, 0x2f,
	0x8a, 0x4f, 0xce, 0x4f, 0x49, 0x95, 0x48, 0x56, 0x60, 0xd4, 0x60, 0x0d, 0xe2, 0x04, 0x8b, 0x38,
	0xe7, 0xa7, 0xa4, 0x26, 0xb1, 0x81, 0xdd, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x8b,
	0xa3, 0x65, 0x14, 0x01, 0x00, 0x00,
}
