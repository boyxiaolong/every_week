// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg_common_expe.proto

package protomsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 远征关卡信息
type PlayerExpeLevelInfo struct {
	LevelId       uint32 `protobuf:"varint,1,opt,name=level_id,json=levelId" json:"level_id,omitempty"`
	Star          int32  `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
	IsExistReward bool   `protobuf:"varint,3,opt,name=is_exist_reward,json=isExistReward" json:"is_exist_reward,omitempty"`
}

func (m *PlayerExpeLevelInfo) Reset()                    { *m = PlayerExpeLevelInfo{} }
func (m *PlayerExpeLevelInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerExpeLevelInfo) ProtoMessage()               {}
func (*PlayerExpeLevelInfo) Descriptor() ([]byte, []int) { return fileDescriptor43, []int{0} }

func (m *PlayerExpeLevelInfo) GetLevelId() uint32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *PlayerExpeLevelInfo) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *PlayerExpeLevelInfo) GetIsExistReward() bool {
	if m != nil {
		return m.IsExistReward
	}
	return false
}

// 远征正规军编成信息
type ExpeRegularArmyInfo struct {
	PlayerId    uint64           `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	HardMode    bool             `protobuf:"varint,2,opt,name=hard_mode,json=hardMode" json:"hard_mode,omitempty"`
	ArmyData    []*MarchArmyData `protobuf:"bytes,3,rep,name=army_data,json=armyData" json:"army_data,omitempty"`
	HqData      *MarchArmyData   `protobuf:"bytes,4,opt,name=hq_data,json=hqData" json:"hq_data,omitempty"`
	CastleLevel uint32           `protobuf:"varint,5,opt,name=castle_level,json=castleLevel" json:"castle_level,omitempty"`
}

func (m *ExpeRegularArmyInfo) Reset()                    { *m = ExpeRegularArmyInfo{} }
func (m *ExpeRegularArmyInfo) String() string            { return proto.CompactTextString(m) }
func (*ExpeRegularArmyInfo) ProtoMessage()               {}
func (*ExpeRegularArmyInfo) Descriptor() ([]byte, []int) { return fileDescriptor43, []int{1} }

func (m *ExpeRegularArmyInfo) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ExpeRegularArmyInfo) GetHardMode() bool {
	if m != nil {
		return m.HardMode
	}
	return false
}

func (m *ExpeRegularArmyInfo) GetArmyData() []*MarchArmyData {
	if m != nil {
		return m.ArmyData
	}
	return nil
}

func (m *ExpeRegularArmyInfo) GetHqData() *MarchArmyData {
	if m != nil {
		return m.HqData
	}
	return nil
}

func (m *ExpeRegularArmyInfo) GetCastleLevel() uint32 {
	if m != nil {
		return m.CastleLevel
	}
	return 0
}

// 远征波次信息
type ExpeWaveInfo struct {
	WaveId       uint32      `protobuf:"varint,1,opt,name=wave_id,json=waveId" json:"wave_id,omitempty"`
	CurWave      uint32      `protobuf:"varint,2,opt,name=cur_wave,json=curWave" json:"cur_wave,omitempty"`
	MaxWave      uint32      `protobuf:"varint,3,opt,name=max_wave,json=maxWave" json:"max_wave,omitempty"`
	WaveTime     int64       `protobuf:"varint,4,opt,name=wave_time,json=waveTime" json:"wave_time,omitempty"`
	MonsterId    []uint32    `protobuf:"varint,5,rep,packed,name=monster_id,json=monsterId" json:"monster_id,omitempty"`
	MonsterCount uint32      `protobuf:"varint,6,opt,name=monster_count,json=monsterCount" json:"monster_count,omitempty"`
	RefreshPos   []*Vector2D `protobuf:"bytes,7,rep,name=refresh_pos,json=refreshPos" json:"refresh_pos,omitempty"`
}

func (m *ExpeWaveInfo) Reset()                    { *m = ExpeWaveInfo{} }
func (m *ExpeWaveInfo) String() string            { return proto.CompactTextString(m) }
func (*ExpeWaveInfo) ProtoMessage()               {}
func (*ExpeWaveInfo) Descriptor() ([]byte, []int) { return fileDescriptor43, []int{2} }

func (m *ExpeWaveInfo) GetWaveId() uint32 {
	if m != nil {
		return m.WaveId
	}
	return 0
}

func (m *ExpeWaveInfo) GetCurWave() uint32 {
	if m != nil {
		return m.CurWave
	}
	return 0
}

func (m *ExpeWaveInfo) GetMaxWave() uint32 {
	if m != nil {
		return m.MaxWave
	}
	return 0
}

func (m *ExpeWaveInfo) GetWaveTime() int64 {
	if m != nil {
		return m.WaveTime
	}
	return 0
}

func (m *ExpeWaveInfo) GetMonsterId() []uint32 {
	if m != nil {
		return m.MonsterId
	}
	return nil
}

func (m *ExpeWaveInfo) GetMonsterCount() uint32 {
	if m != nil {
		return m.MonsterCount
	}
	return 0
}

func (m *ExpeWaveInfo) GetRefreshPos() []*Vector2D {
	if m != nil {
		return m.RefreshPos
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayerExpeLevelInfo)(nil), "protomsg.PlayerExpeLevelInfo")
	proto.RegisterType((*ExpeRegularArmyInfo)(nil), "protomsg.ExpeRegularArmyInfo")
	proto.RegisterType((*ExpeWaveInfo)(nil), "protomsg.ExpeWaveInfo")
}

func init() { proto.RegisterFile("msg_common_expe.proto", fileDescriptor43) }

var fileDescriptor43 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xd1, 0x6a, 0xdb, 0x30,
	0x14, 0x86, 0xf1, 0x9c, 0xc4, 0x8e, 0x12, 0xb3, 0xa1, 0x6e, 0xd4, 0x6b, 0x19, 0x78, 0x19, 0x0c,
	0x5f, 0x85, 0xd1, 0xee, 0x05, 0xc6, 0xd6, 0x0b, 0xc3, 0x0a, 0x45, 0x0c, 0x76, 0x29, 0xce, 0xac,
	0xd3, 0xd8, 0x60, 0x45, 0xae, 0xa4, 0xa4, 0xce, 0xab, 0xee, 0x35, 0xf6, 0x02, 0x43, 0xc7, 0x09,
	0xd9, 0xd5, 0xae, 0xa4, 0xf3, 0xfd, 0x3a, 0xfa, 0xcf, 0xf9, 0xd9, 0x1b, 0xed, 0x36, 0xb2, 0x36,
	0x5a, 0x9b, 0xad, 0xc4, 0xa1, 0xc7, 0x75, 0x6f, 0x8d, 0x37, 0x3c, 0xa5, 0x43, 0xbb, 0xcd, 0xd5,
	0xeb, 0x7f, 0x1e, 0x68, 0xe8, 0x47, 0xfd, 0xea, 0xd5, 0x99, 0x8e, 0x64, 0xd5, 0xb1, 0x8b, 0x87,
	0x0e, 0x0e, 0x68, 0xef, 0x86, 0x1e, 0xbf, 0xe3, 0x1e, 0xbb, 0x6a, 0xfb, 0x68, 0xf8, 0x5b, 0x96,
	0x76, 0xa1, 0x90, 0xad, 0xca, 0xa3, 0x22, 0x2a, 0x33, 0x91, 0x50, 0x5d, 0x29, 0xce, 0xd9, 0xc4,
	0x79, 0xb0, 0xf9, 0x8b, 0x22, 0x2a, 0xa7, 0x82, 0xee, 0xfc, 0x23, 0x7b, 0xd9, 0x3a, 0x89, 0x43,
	0xeb, 0xbc, 0xb4, 0xf8, 0x0c, 0x56, 0xe5, 0x71, 0x11, 0x95, 0xa9, 0xc8, 0x5a, 0x77, 0x17, 0xa8,
	0x20, 0xb8, 0xfa, 0x1d, 0xb1, 0x8b, 0x60, 0x24, 0x70, 0xb3, 0xeb, 0xc0, 0x7e, 0xb1, 0xfa, 0x40,
	0x76, 0xd7, 0x6c, 0xde, 0xd3, 0x14, 0x27, 0xbf, 0x89, 0x48, 0x47, 0x50, 0xa9, 0x20, 0x36, 0x60,
	0x95, 0xd4, 0x46, 0x21, 0xb9, 0xa6, 0x22, 0x0d, 0xe0, 0xde, 0x28, 0xe4, 0x9f, 0xd9, 0x1c, 0xac,
	0x3e, 0x48, 0x05, 0x1e, 0xf2, 0xb8, 0x88, 0xcb, 0xc5, 0xcd, 0xe5, 0xfa, 0x94, 0xc2, 0xfa, 0x1e,
	0x6c, 0xdd, 0x04, 0x97, 0x6f, 0xe0, 0x41, 0xa4, 0x70, 0xbc, 0xf1, 0x4f, 0x2c, 0x69, 0x9e, 0xc6,
	0x9e, 0x49, 0x11, 0xfd, 0xaf, 0x67, 0xd6, 0x3c, 0x51, 0xc7, 0x7b, 0xb6, 0xac, 0xc1, 0xf9, 0x0e,
	0x25, 0xe5, 0x90, 0x4f, 0x29, 0x94, 0xc5, 0xc8, 0x28, 0xb7, 0xd5, 0x9f, 0x88, 0x2d, 0xc3, 0x72,
	0x3f, 0x61, 0x8f, 0xb4, 0xd5, 0x25, 0x4b, 0x9e, 0x61, 0x8f, 0xe7, 0x0c, 0x67, 0xa1, 0xac, 0x54,
	0x48, 0xb7, 0xde, 0x59, 0x19, 0x2a, 0x5a, 0x28, 0x13, 0x49, 0xbd, 0xb3, 0xa1, 0x2f, 0x48, 0x1a,
	0x86, 0x51, 0x8a, 0x47, 0x49, 0xc3, 0x40, 0xd2, 0x35, 0x9b, 0xd3, 0x77, 0xbe, 0xd5, 0x48, 0x63,
	0xc7, 0x22, 0x0d, 0xe0, 0x47, 0xab, 0x91, 0xbf, 0x63, 0x4c, 0x9b, 0xad, 0xf3, 0x63, 0x84, 0xd3,
	0x22, 0x2e, 0x33, 0x31, 0x3f, 0x92, 0x4a, 0xf1, 0x0f, 0x2c, 0x3b, 0xc9, 0xb5, 0xd9, 0x6d, 0x7d,
	0x3e, 0xa3, 0xbf, 0x97, 0x47, 0xf8, 0x35, 0x30, 0x7e, 0xcb, 0x16, 0x16, 0x1f, 0x2d, 0xba, 0x46,
	0xf6, 0xc6, 0xe5, 0x09, 0xa5, 0xc9, 0xcf, 0xc9, 0xec, 0xb1, 0xf6, 0xc6, 0xde, 0x28, 0xc1, 0x8e,
	0xcf, 0x1e, 0x8c, 0xfb, 0x35, 0x23, 0xf9, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x2a,
	0xf9, 0x4d, 0x92, 0x02, 0x00, 0x00,
}
