// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg_common_condition.proto

package protomsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 条件 逻辑运算 枚举
type ConditionLogicalType int32

const (
	ConditionLogicalType_kConditionLogicalType_None ConditionLogicalType = 0
	ConditionLogicalType_kConditionLogicalType_Or   ConditionLogicalType = 1
	ConditionLogicalType_kConditionLogicalType_And  ConditionLogicalType = 2
)

var ConditionLogicalType_name = map[int32]string{
	0: "kConditionLogicalType_None",
	1: "kConditionLogicalType_Or",
	2: "kConditionLogicalType_And",
}
var ConditionLogicalType_value = map[string]int32{
	"kConditionLogicalType_None": 0,
	"kConditionLogicalType_Or":   1,
	"kConditionLogicalType_And":  2,
}

func (x ConditionLogicalType) String() string {
	return proto.EnumName(ConditionLogicalType_name, int32(x))
}
func (ConditionLogicalType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{0} }

// 条件 运算符 枚举
type ConditionOperatorType int32

const (
	ConditionOperatorType_kConditionOperatorType_None          ConditionOperatorType = 0
	ConditionOperatorType_kConditionOperatorType_Equal         ConditionOperatorType = 1
	ConditionOperatorType_kConditionOperatorType_Less          ConditionOperatorType = 2
	ConditionOperatorType_kConditionOperatorType_Less_Equal    ConditionOperatorType = 3
	ConditionOperatorType_kConditionOperatorType_Greater       ConditionOperatorType = 4
	ConditionOperatorType_kConditionOperatorType_Greater_Equal ConditionOperatorType = 5
	ConditionOperatorType_kConditionOperatorType_Unequal       ConditionOperatorType = 6
)

var ConditionOperatorType_name = map[int32]string{
	0: "kConditionOperatorType_None",
	1: "kConditionOperatorType_Equal",
	2: "kConditionOperatorType_Less",
	3: "kConditionOperatorType_Less_Equal",
	4: "kConditionOperatorType_Greater",
	5: "kConditionOperatorType_Greater_Equal",
	6: "kConditionOperatorType_Unequal",
}
var ConditionOperatorType_value = map[string]int32{
	"kConditionOperatorType_None":          0,
	"kConditionOperatorType_Equal":         1,
	"kConditionOperatorType_Less":          2,
	"kConditionOperatorType_Less_Equal":    3,
	"kConditionOperatorType_Greater":       4,
	"kConditionOperatorType_Greater_Equal": 5,
	"kConditionOperatorType_Unequal":       6,
}

func (x ConditionOperatorType) String() string {
	return proto.EnumName(ConditionOperatorType_name, int32(x))
}
func (ConditionOperatorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{1} }

// 条件类型枚举
type ConditionType int32

const (
	ConditionType_kConditionType_None                      ConditionType = 0
	ConditionType_kConditionType_Condition_Group           ConditionType = 1
	ConditionType_kConditionType_City_Level                ConditionType = 2
	ConditionType_kConditionType_Server_Time               ConditionType = 3
	ConditionType_kConditionType_Server_Pass_Time          ConditionType = 4
	ConditionType_kConditionType_Player_Creation_Time      ConditionType = 5
	ConditionType_kConditionType_Player_Creation_Pass_Time ConditionType = 6
	ConditionType_kConditionType_Hero                      ConditionType = 7
	ConditionType_kConditionType_Science_Level             ConditionType = 8
	ConditionType_kConditionType_City_Have                 ConditionType = 9
	ConditionType_kConditionType_Season_Time               ConditionType = 10
)

var ConditionType_name = map[int32]string{
	0:  "kConditionType_None",
	1:  "kConditionType_Condition_Group",
	2:  "kConditionType_City_Level",
	3:  "kConditionType_Server_Time",
	4:  "kConditionType_Server_Pass_Time",
	5:  "kConditionType_Player_Creation_Time",
	6:  "kConditionType_Player_Creation_Pass_Time",
	7:  "kConditionType_Hero",
	8:  "kConditionType_Science_Level",
	9:  "kConditionType_City_Have",
	10: "kConditionType_Season_Time",
}
var ConditionType_value = map[string]int32{
	"kConditionType_None":                      0,
	"kConditionType_Condition_Group":           1,
	"kConditionType_City_Level":                2,
	"kConditionType_Server_Time":               3,
	"kConditionType_Server_Pass_Time":          4,
	"kConditionType_Player_Creation_Time":      5,
	"kConditionType_Player_Creation_Pass_Time": 6,
	"kConditionType_Hero":                      7,
	"kConditionType_Science_Level":             8,
	"kConditionType_City_Have":                 9,
	"kConditionType_Season_Time":               10,
}

func (x ConditionType) String() string {
	return proto.EnumName(ConditionType_name, int32(x))
}
func (ConditionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{2} }

func init() {
	proto.RegisterEnum("protomsg.ConditionLogicalType", ConditionLogicalType_name, ConditionLogicalType_value)
	proto.RegisterEnum("protomsg.ConditionOperatorType", ConditionOperatorType_name, ConditionOperatorType_value)
	proto.RegisterEnum("protomsg.ConditionType", ConditionType_name, ConditionType_value)
}

func init() { proto.RegisterFile("msg_common_condition.proto", fileDescriptor41) }

var fileDescriptor41 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xdf, 0x4a, 0x02, 0x41,
	0x14, 0xc6, 0x73, 0xfd, 0x93, 0x1d, 0x08, 0x86, 0xa9, 0xa8, 0xcc, 0xb4, 0xb2, 0x48, 0x24, 0xba,
	0xe9, 0x09, 0x42, 0x42, 0x2f, 0x24, 0x85, 0xec, 0x7a, 0x98, 0xd6, 0x83, 0x0c, 0xee, 0xce, 0x6c,
	0x33, 0xab, 0xe0, 0x5d, 0x0f, 0xd1, 0x03, 0x87, 0xa3, 0xbb, 0xb2, 0x32, 0x6e, 0x57, 0xe2, 0xfe,
	0x7e, 0x7c, 0x73, 0xbe, 0x39, 0xbb, 0x50, 0x0b, 0xcd, 0x94, 0xf9, 0x2a, 0x0c, 0x95, 0x64, 0xbe,
	0x92, 0x13, 0x11, 0x0b, 0x25, 0x9f, 0x23, 0xad, 0x62, 0x45, 0xab, 0xf6, 0x27, 0x34, 0xd3, 0x8e,
	0x81, 0xd3, 0x6e, 0x02, 0x07, 0x6a, 0x2a, 0x7c, 0x1e, 0x8c, 0x97, 0x11, 0xd2, 0x06, 0xd4, 0x66,
	0x2e, 0xc0, 0xde, 0x95, 0x44, 0x72, 0x40, 0xeb, 0x70, 0xe1, 0xe6, 0x43, 0x4d, 0x0a, 0xf4, 0x1a,
	0x2e, 0xdd, 0xf4, 0x55, 0x4e, 0x88, 0xd7, 0xf9, 0xf5, 0xe0, 0x2c, 0xc5, 0xc3, 0x08, 0x35, 0x8f,
	0x95, 0xb6, 0xc7, 0x36, 0xe1, 0x6a, 0xe6, 0x24, 0xc9, 0xb9, 0x37, 0x50, 0xdf, 0x23, 0xbc, 0x7d,
	0xcf, 0x79, 0x40, 0x0a, 0x39, 0x11, 0x03, 0x34, 0x86, 0x78, 0xf4, 0x01, 0x6e, 0x73, 0x84, 0x4d,
	0x4e, 0x91, 0xde, 0x41, 0x63, 0x8f, 0xd6, 0xd3, 0xc8, 0x63, 0xd4, 0xa4, 0x44, 0xdb, 0x70, 0x9f,
	0xef, 0x6c, 0xd2, 0xca, 0x39, 0x69, 0x9f, 0x12, 0xad, 0x53, 0xe9, 0xfc, 0x14, 0xe1, 0x38, 0x75,
	0xec, 0x75, 0x9c, 0xc3, 0xc9, 0x2c, 0xf3, 0x24, 0xb9, 0x86, 0x4c, 0x9c, 0x05, 0xe9, 0x3f, 0xd6,
	0xd3, 0x6a, 0x1e, 0xed, 0x2e, 0x61, 0xed, 0x88, 0x78, 0xc9, 0x06, 0xb8, 0xc0, 0x80, 0x78, 0xd9,
	0x0d, 0x5b, 0xfc, 0x81, 0x7a, 0x81, 0x9a, 0x8d, 0x45, 0x88, 0xa4, 0x48, 0x5b, 0xd0, 0x74, 0xf3,
	0x11, 0x37, 0x66, 0x2d, 0x95, 0xe8, 0x23, 0xb4, 0x76, 0xa4, 0x51, 0xc0, 0x97, 0xa8, 0x59, 0x77,
	0xd5, 0x7f, 0x35, 0x8d, 0x15, 0xcb, 0xf4, 0x09, 0xda, 0xff, 0x88, 0xdb, 0xd8, 0x8a, 0xa3, 0x77,
	0x1f, 0xb5, 0x22, 0x87, 0xd9, 0xf5, 0xaf, 0x87, 0xf2, 0x05, 0x4a, 0x1f, 0x37, 0xb5, 0xaa, 0xd9,
	0x17, 0x73, 0xdb, 0xba, 0xcf, 0x17, 0x48, 0x8e, 0x9c, 0xa5, 0xb9, 0x49, 0xc6, 0x84, 0xaf, 0x8a,
	0xfd, 0x30, 0x5e, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x95, 0xc4, 0x69, 0xbd, 0x3d, 0x03, 0x00,
	0x00,
}
