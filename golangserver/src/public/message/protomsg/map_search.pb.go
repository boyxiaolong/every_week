// Code generated by protoc-gen-go. DO NOT EDIT.
// source: map_search.proto

package protomsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MsgCL2GSMapSearchRequest struct {
	SearchType     MapSearchType `protobuf:"varint,1,opt,name=search_type,json=searchType,enum=protomsg.MapSearchType" json:"search_type,omitempty"`
	SearchLevel    uint32        `protobuf:"varint,2,opt,name=search_level,json=searchLevel" json:"search_level,omitempty"`
	CreatePosition *Vector2D     `protobuf:"bytes,3,opt,name=create_position,json=createPosition" json:"create_position,omitempty"`
}

func (m *MsgCL2GSMapSearchRequest) Reset()                    { *m = MsgCL2GSMapSearchRequest{} }
func (m *MsgCL2GSMapSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*MsgCL2GSMapSearchRequest) ProtoMessage()               {}
func (*MsgCL2GSMapSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{0} }

func (m *MsgCL2GSMapSearchRequest) GetSearchType() MapSearchType {
	if m != nil {
		return m.SearchType
	}
	return MapSearchType_kMapSearchType_Start
}

func (m *MsgCL2GSMapSearchRequest) GetSearchLevel() uint32 {
	if m != nil {
		return m.SearchLevel
	}
	return 0
}

func (m *MsgCL2GSMapSearchRequest) GetCreatePosition() *Vector2D {
	if m != nil {
		return m.CreatePosition
	}
	return nil
}

type MsgGS2CLMapSearchReply struct {
	SearchType  MapSearchType `protobuf:"varint,1,opt,name=search_type,json=searchType,enum=protomsg.MapSearchType" json:"search_type,omitempty"`
	SearchLevel uint32        `protobuf:"varint,2,opt,name=search_level,json=searchLevel" json:"search_level,omitempty"`
	EntityId    uint64        `protobuf:"varint,3,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	Position    *Vector2D     `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
	ErrorCode   int32         `protobuf:"varint,99,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *MsgGS2CLMapSearchReply) Reset()                    { *m = MsgGS2CLMapSearchReply{} }
func (m *MsgGS2CLMapSearchReply) String() string            { return proto.CompactTextString(m) }
func (*MsgGS2CLMapSearchReply) ProtoMessage()               {}
func (*MsgGS2CLMapSearchReply) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{1} }

func (m *MsgGS2CLMapSearchReply) GetSearchType() MapSearchType {
	if m != nil {
		return m.SearchType
	}
	return MapSearchType_kMapSearchType_Start
}

func (m *MsgGS2CLMapSearchReply) GetSearchLevel() uint32 {
	if m != nil {
		return m.SearchLevel
	}
	return 0
}

func (m *MsgGS2CLMapSearchReply) GetEntityId() uint64 {
	if m != nil {
		return m.EntityId
	}
	return 0
}

func (m *MsgGS2CLMapSearchReply) GetPosition() *Vector2D {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *MsgGS2CLMapSearchReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgCL2GSMapSearchRequest)(nil), "protomsg.MsgCL2GSMapSearchRequest")
	proto.RegisterType((*MsgGS2CLMapSearchReply)(nil), "protomsg.MsgGS2CLMapSearchReply")
}

func init() { proto.RegisterFile("map_search.proto", fileDescriptor30) }

var fileDescriptor30 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x89, 0xae, 0xd2, 0x9d, 0xd5, 0x75, 0x09, 0xa2, 0x65, 0x45, 0xa8, 0x7b, 0xea, 0xa9,
	0x87, 0x7a, 0x11, 0x3c, 0xf6, 0xb0, 0x08, 0x2d, 0x48, 0xea, 0x3d, 0xd4, 0x74, 0xa8, 0x85, 0xa6,
	0x89, 0x49, 0x5c, 0xe8, 0xff, 0xf2, 0x0f, 0xf9, 0x4f, 0xc4, 0xb6, 0x76, 0xbd, 0x78, 0xdc, 0x53,
	0xc2, 0x37, 0xef, 0xbd, 0x79, 0x03, 0x2b, 0x59, 0x68, 0x6e, 0xb1, 0x30, 0xe2, 0x2d, 0xd2, 0x46,
	0x39, 0x45, 0xbd, 0xfe, 0x91, 0xb6, 0x5a, 0xaf, 0xa4, 0xad, 0xb8, 0x50, 0x52, 0xaa, 0x76, 0x98,
	0xad, 0x2f, 0xf7, 0x84, 0xcb, 0x42, 0x0f, 0x74, 0xf3, 0x49, 0xc0, 0xcf, 0x6c, 0x95, 0xa4, 0xf1,
	0x36, 0xcf, 0x0a, 0x9d, 0xf7, 0x69, 0x0c, 0xdf, 0x3f, 0xd0, 0x3a, 0xfa, 0x00, 0x8b, 0x21, 0x9e,
	0xbb, 0x4e, 0xa3, 0x4f, 0x02, 0x12, 0x2e, 0xe3, 0xeb, 0xe8, 0x77, 0x49, 0x34, 0x19, 0x5e, 0x3a,
	0x8d, 0x0c, 0xec, 0xf4, 0xa7, 0x77, 0x70, 0x36, 0x3a, 0x1b, 0xdc, 0x61, 0xe3, 0x1f, 0x05, 0x24,
	0x3c, 0x67, 0x63, 0x5a, 0xfa, 0x83, 0xe8, 0x23, 0x5c, 0x08, 0x83, 0x85, 0x43, 0xae, 0x95, 0xad,
	0x5d, 0xad, 0x5a, 0xff, 0x38, 0x20, 0xe1, 0x22, 0xa6, 0xfb, 0x05, 0x3b, 0x14, 0x4e, 0x99, 0xb8,
	0x64, 0xcb, 0x41, 0xfa, 0x3c, 0x2a, 0x37, 0x5f, 0x04, 0xae, 0x32, 0x5b, 0x6d, 0xf3, 0x38, 0x49,
	0xff, 0xd4, 0xd6, 0x4d, 0x77, 0xd8, 0xd2, 0x37, 0x30, 0xc7, 0xd6, 0xd5, 0xae, 0xe3, 0x75, 0xd9,
	0xd7, 0x9d, 0x31, 0x6f, 0x00, 0x4f, 0x25, 0x8d, 0xc0, 0x9b, 0x4e, 0x99, 0xfd, 0x7b, 0xca, 0xa4,
	0xa1, 0xb7, 0x00, 0x68, 0x8c, 0x32, 0x5c, 0xa8, 0x12, 0x7d, 0x11, 0x90, 0xf0, 0x84, 0xcd, 0x7b,
	0x92, 0xa8, 0x12, 0x5f, 0x4f, 0x7b, 0xef, 0xfd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xbe,
	0x88, 0xfc, 0xe7, 0x01, 0x00, 0x00,
}
