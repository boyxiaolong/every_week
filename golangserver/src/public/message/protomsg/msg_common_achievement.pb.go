// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg_common_achievement.proto

package protomsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 成就状态
type AchievementStatus int32

const (
	AchievementStatus_kAchievementStatus_Open     AchievementStatus = 0
	AchievementStatus_kAchievementStatus_Complete AchievementStatus = 1
)

var AchievementStatus_name = map[int32]string{
	0: "kAchievementStatus_Open",
	1: "kAchievementStatus_Complete",
}
var AchievementStatus_value = map[string]int32{
	"kAchievementStatus_Open":     0,
	"kAchievementStatus_Complete": 1,
}

func (x AchievementStatus) String() string {
	return proto.EnumName(AchievementStatus_name, int32(x))
}
func (AchievementStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor36, []int{0} }

// 成就条件类型
type AchievementCheckerType int32

const (
	AchievementCheckerType_kAchievementCheckerType_None                  AchievementCheckerType = 0
	AchievementCheckerType_kAchievementCheckerType_BattlePower           AchievementCheckerType = 3101
	AchievementCheckerType_kAchievementCheckerType_UpgradeBuildingLevel  AchievementCheckerType = 3102
	AchievementCheckerType_kAchievementCheckerType_BuildingCount         AchievementCheckerType = 3103
	AchievementCheckerType_kAchievementCheckerType_BuildingLevel         AchievementCheckerType = 3104
	AchievementCheckerType_kAchievementCheckerType_TechLevel             AchievementCheckerType = 3105
	AchievementCheckerType_kAchievementCheckerType_SpeedUpTime           AchievementCheckerType = 3106
	AchievementCheckerType_kAchievementCheckerType_GrowUpTime            AchievementCheckerType = 3107
	AchievementCheckerType_kAchievementCheckerType_CityResource          AchievementCheckerType = 3108
	AchievementCheckerType_kAchievementCheckerType_CollectResource       AchievementCheckerType = 3109
	AchievementCheckerType_kAchievementCheckerType_GuildPoint            AchievementCheckerType = 3110
	AchievementCheckerType_kAchievementCheckerType_TechPoint             AchievementCheckerType = 3111
	AchievementCheckerType_kAchievementCheckerType_TechDailyPoint        AchievementCheckerType = 3112
	AchievementCheckerType_kAchievementCheckerType_TechDonateCount       AchievementCheckerType = 3113
	AchievementCheckerType_kAchievementCheckerType_GuildHelpCount        AchievementCheckerType = 3114
	AchievementCheckerType_kAchievementCheckerType_TaskCount             AchievementCheckerType = 3115
	AchievementCheckerType_kAchievementCheckerType_TaskDailyCount        AchievementCheckerType = 3116
	AchievementCheckerType_kAchievementCheckerType_ArmyCount             AchievementCheckerType = 3201
	AchievementCheckerType_kAchievementCheckerType_HeroQualityCount      AchievementCheckerType = 3202
	AchievementCheckerType_kAchievementCheckerType_HeroAwakenCount       AchievementCheckerType = 3203
	AchievementCheckerType_kAchievementCheckerType_HeroCount             AchievementCheckerType = 3204
	AchievementCheckerType_kAchievementCheckerType_HeroLevel             AchievementCheckerType = 3205
	AchievementCheckerType_kAchievementCheckerType_HeroLevelCount        AchievementCheckerType = 3206
	AchievementCheckerType_kAchievementCheckerType_HeroStarCount         AchievementCheckerType = 3207
	AchievementCheckerType_kAchievementCheckerType_ArmyLevelCount        AchievementCheckerType = 3208
	AchievementCheckerType_kAchievementCheckerType_HeroSkillLevel        AchievementCheckerType = 3209
	AchievementCheckerType_kAchievementCheckerType_GuildHolyLandCount    AchievementCheckerType = 3210
	AchievementCheckerType_kAchievementCheckerType_BeatMonsterCount      AchievementCheckerType = 3211
	AchievementCheckerType_kAchievementCheckerType_GuildHonorRewardCount AchievementCheckerType = 3212
	AchievementCheckerType_kAchievementCheckerType_GuildGiftCount        AchievementCheckerType = 3213
	AchievementCheckerType_kAchievementCheckerType_ArmyTrainingCount     AchievementCheckerType = 3214
	AchievementCheckerType_kAchievementCheckerType_Task                  AchievementCheckerType = 3301
	AchievementCheckerType_kAchievementCheckerType_ExpeStar              AchievementCheckerType = 3302
	AchievementCheckerType_kAchievementCheckerType_KillCount             AchievementCheckerType = 3303
	AchievementCheckerType_kAchievementCheckerType_DeadCount             AchievementCheckerType = 3304
	AchievementCheckerType_kAchievementCheckerType_CureCount             AchievementCheckerType = 3305
	AchievementCheckerType_kAchievementCheckerType_BeatPlayerCount       AchievementCheckerType = 3306
	AchievementCheckerType_kAchievementCheckerType_PlunderResource       AchievementCheckerType = 3307
	AchievementCheckerType_kAchievementCheckerType_BattleWinCount        AchievementCheckerType = 3308
	AchievementCheckerType_kAchievementCheckerType_BattleFailCount       AchievementCheckerType = 3309
	AchievementCheckerType_kAchievementCheckerType_ScoutCount            AchievementCheckerType = 3310
	AchievementCheckerType_kAchievementCheckerType_DefendWinCount        AchievementCheckerType = 3311
	AchievementCheckerType_kAchievementCheckerType_BeatGuildCount        AchievementCheckerType = 3312
	AchievementCheckerType_kAchievementCheckerType_BeatCampCastleCount   AchievementCheckerType = 3313
	AchievementCheckerType_kAchievementCheckerType_BeatCampArmyCount     AchievementCheckerType = 3314
	AchievementCheckerType_kAchievementCheckerType_ExpeLevel             AchievementCheckerType = 3315
	AchievementCheckerType_kAchievementCheckerType_PhotoCount            AchievementCheckerType = 3401
	AchievementCheckerType_kAchievementCheckerType_PhotoFrameCount       AchievementCheckerType = 3402
	AchievementCheckerType_kAchievementCheckerType_FaceCount             AchievementCheckerType = 3403
	AchievementCheckerType_kAchievementCheckerType_HeroPointResetCount   AchievementCheckerType = 3404
	AchievementCheckerType_kAchievementCheckerType_ChangeCampCount       AchievementCheckerType = 3405
	AchievementCheckerType_kAchievementCheckerType_ChangeNameCount       AchievementCheckerType = 3406
	AchievementCheckerType_kAchievementCheckerType_ImmgrateCount         AchievementCheckerType = 3407
	AchievementCheckerType_kAchievementCheckerType_CarriageResource      AchievementCheckerType = 3408
	AchievementCheckerType_kAchievementCheckerType_CarriageSinjuredCount AchievementCheckerType = 3409
	AchievementCheckerType_kAchievementCheckerType_BuyCount              AchievementCheckerType = 3410
	AchievementCheckerType_kAchievementCheckerType_BuyMaxCount           AchievementCheckerType = 3411
	AchievementCheckerType_kAchievementCheckerType_ShopRefreshCount      AchievementCheckerType = 3412
	AchievementCheckerType_kAchievementCheckerType_ItemUseCount          AchievementCheckerType = 3413
	AchievementCheckerType_kAchievementCheckerType_ItemMaxUseCount       AchievementCheckerType = 3414
	AchievementCheckerType_kAchievementCheckerType_CastleResource        AchievementCheckerType = 3415
	AchievementCheckerType_kAchievementCheckerType_CollectMapResource    AchievementCheckerType = 3416
	AchievementCheckerType_kAchievementCheckerType_ShieldTime            AchievementCheckerType = 3417
	AchievementCheckerType_kAchievementCheckerType_ScoutRewardCount      AchievementCheckerType = 3418
	AchievementCheckerType_kAchievementCheckerType_RecruitCount          AchievementCheckerType = 3419
	AchievementCheckerType_kAchievementCheckerType_RecruitMaxCount       AchievementCheckerType = 3420
	AchievementCheckerType_kAchievementCheckerType_GuildShopBuyCount     AchievementCheckerType = 3421
	AchievementCheckerType_kAchievementCheckerType_BuildingTypeCount     AchievementCheckerType = 3422
	AchievementCheckerType_kAchievementCheckerType_BuildingRoadCount     AchievementCheckerType = 3423
	AchievementCheckerType_kAchievementCheckerType_TaskChapter           AchievementCheckerType = 3424
	AchievementCheckerType_kAchievementCheckerType_PlunderResourceHome   AchievementCheckerType = 3425
	AchievementCheckerType_kAchievementCheckerType_EquipmentCount        AchievementCheckerType = 3501
	AchievementCheckerType_kAchievementCheckerType_EquipmentHeroCount    AchievementCheckerType = 3502
	AchievementCheckerType_kAchievementCheckerType_FaceUseCount          AchievementCheckerType = 3503
)

var AchievementCheckerType_name = map[int32]string{
	0:    "kAchievementCheckerType_None",
	3101: "kAchievementCheckerType_BattlePower",
	3102: "kAchievementCheckerType_UpgradeBuildingLevel",
	3103: "kAchievementCheckerType_BuildingCount",
	3104: "kAchievementCheckerType_BuildingLevel",
	3105: "kAchievementCheckerType_TechLevel",
	3106: "kAchievementCheckerType_SpeedUpTime",
	3107: "kAchievementCheckerType_GrowUpTime",
	3108: "kAchievementCheckerType_CityResource",
	3109: "kAchievementCheckerType_CollectResource",
	3110: "kAchievementCheckerType_GuildPoint",
	3111: "kAchievementCheckerType_TechPoint",
	3112: "kAchievementCheckerType_TechDailyPoint",
	3113: "kAchievementCheckerType_TechDonateCount",
	3114: "kAchievementCheckerType_GuildHelpCount",
	3115: "kAchievementCheckerType_TaskCount",
	3116: "kAchievementCheckerType_TaskDailyCount",
	3201: "kAchievementCheckerType_ArmyCount",
	3202: "kAchievementCheckerType_HeroQualityCount",
	3203: "kAchievementCheckerType_HeroAwakenCount",
	3204: "kAchievementCheckerType_HeroCount",
	3205: "kAchievementCheckerType_HeroLevel",
	3206: "kAchievementCheckerType_HeroLevelCount",
	3207: "kAchievementCheckerType_HeroStarCount",
	3208: "kAchievementCheckerType_ArmyLevelCount",
	3209: "kAchievementCheckerType_HeroSkillLevel",
	3210: "kAchievementCheckerType_GuildHolyLandCount",
	3211: "kAchievementCheckerType_BeatMonsterCount",
	3212: "kAchievementCheckerType_GuildHonorRewardCount",
	3213: "kAchievementCheckerType_GuildGiftCount",
	3214: "kAchievementCheckerType_ArmyTrainingCount",
	3301: "kAchievementCheckerType_Task",
	3302: "kAchievementCheckerType_ExpeStar",
	3303: "kAchievementCheckerType_KillCount",
	3304: "kAchievementCheckerType_DeadCount",
	3305: "kAchievementCheckerType_CureCount",
	3306: "kAchievementCheckerType_BeatPlayerCount",
	3307: "kAchievementCheckerType_PlunderResource",
	3308: "kAchievementCheckerType_BattleWinCount",
	3309: "kAchievementCheckerType_BattleFailCount",
	3310: "kAchievementCheckerType_ScoutCount",
	3311: "kAchievementCheckerType_DefendWinCount",
	3312: "kAchievementCheckerType_BeatGuildCount",
	3313: "kAchievementCheckerType_BeatCampCastleCount",
	3314: "kAchievementCheckerType_BeatCampArmyCount",
	3315: "kAchievementCheckerType_ExpeLevel",
	3401: "kAchievementCheckerType_PhotoCount",
	3402: "kAchievementCheckerType_PhotoFrameCount",
	3403: "kAchievementCheckerType_FaceCount",
	3404: "kAchievementCheckerType_HeroPointResetCount",
	3405: "kAchievementCheckerType_ChangeCampCount",
	3406: "kAchievementCheckerType_ChangeNameCount",
	3407: "kAchievementCheckerType_ImmgrateCount",
	3408: "kAchievementCheckerType_CarriageResource",
	3409: "kAchievementCheckerType_CarriageSinjuredCount",
	3410: "kAchievementCheckerType_BuyCount",
	3411: "kAchievementCheckerType_BuyMaxCount",
	3412: "kAchievementCheckerType_ShopRefreshCount",
	3413: "kAchievementCheckerType_ItemUseCount",
	3414: "kAchievementCheckerType_ItemMaxUseCount",
	3415: "kAchievementCheckerType_CastleResource",
	3416: "kAchievementCheckerType_CollectMapResource",
	3417: "kAchievementCheckerType_ShieldTime",
	3418: "kAchievementCheckerType_ScoutRewardCount",
	3419: "kAchievementCheckerType_RecruitCount",
	3420: "kAchievementCheckerType_RecruitMaxCount",
	3421: "kAchievementCheckerType_GuildShopBuyCount",
	3422: "kAchievementCheckerType_BuildingTypeCount",
	3423: "kAchievementCheckerType_BuildingRoadCount",
	3424: "kAchievementCheckerType_TaskChapter",
	3425: "kAchievementCheckerType_PlunderResourceHome",
	3501: "kAchievementCheckerType_EquipmentCount",
	3502: "kAchievementCheckerType_EquipmentHeroCount",
	3503: "kAchievementCheckerType_FaceUseCount",
}
var AchievementCheckerType_value = map[string]int32{
	"kAchievementCheckerType_None":                  0,
	"kAchievementCheckerType_BattlePower":           3101,
	"kAchievementCheckerType_UpgradeBuildingLevel":  3102,
	"kAchievementCheckerType_BuildingCount":         3103,
	"kAchievementCheckerType_BuildingLevel":         3104,
	"kAchievementCheckerType_TechLevel":             3105,
	"kAchievementCheckerType_SpeedUpTime":           3106,
	"kAchievementCheckerType_GrowUpTime":            3107,
	"kAchievementCheckerType_CityResource":          3108,
	"kAchievementCheckerType_CollectResource":       3109,
	"kAchievementCheckerType_GuildPoint":            3110,
	"kAchievementCheckerType_TechPoint":             3111,
	"kAchievementCheckerType_TechDailyPoint":        3112,
	"kAchievementCheckerType_TechDonateCount":       3113,
	"kAchievementCheckerType_GuildHelpCount":        3114,
	"kAchievementCheckerType_TaskCount":             3115,
	"kAchievementCheckerType_TaskDailyCount":        3116,
	"kAchievementCheckerType_ArmyCount":             3201,
	"kAchievementCheckerType_HeroQualityCount":      3202,
	"kAchievementCheckerType_HeroAwakenCount":       3203,
	"kAchievementCheckerType_HeroCount":             3204,
	"kAchievementCheckerType_HeroLevel":             3205,
	"kAchievementCheckerType_HeroLevelCount":        3206,
	"kAchievementCheckerType_HeroStarCount":         3207,
	"kAchievementCheckerType_ArmyLevelCount":        3208,
	"kAchievementCheckerType_HeroSkillLevel":        3209,
	"kAchievementCheckerType_GuildHolyLandCount":    3210,
	"kAchievementCheckerType_BeatMonsterCount":      3211,
	"kAchievementCheckerType_GuildHonorRewardCount": 3212,
	"kAchievementCheckerType_GuildGiftCount":        3213,
	"kAchievementCheckerType_ArmyTrainingCount":     3214,
	"kAchievementCheckerType_Task":                  3301,
	"kAchievementCheckerType_ExpeStar":              3302,
	"kAchievementCheckerType_KillCount":             3303,
	"kAchievementCheckerType_DeadCount":             3304,
	"kAchievementCheckerType_CureCount":             3305,
	"kAchievementCheckerType_BeatPlayerCount":       3306,
	"kAchievementCheckerType_PlunderResource":       3307,
	"kAchievementCheckerType_BattleWinCount":        3308,
	"kAchievementCheckerType_BattleFailCount":       3309,
	"kAchievementCheckerType_ScoutCount":            3310,
	"kAchievementCheckerType_DefendWinCount":        3311,
	"kAchievementCheckerType_BeatGuildCount":        3312,
	"kAchievementCheckerType_BeatCampCastleCount":   3313,
	"kAchievementCheckerType_BeatCampArmyCount":     3314,
	"kAchievementCheckerType_ExpeLevel":             3315,
	"kAchievementCheckerType_PhotoCount":            3401,
	"kAchievementCheckerType_PhotoFrameCount":       3402,
	"kAchievementCheckerType_FaceCount":             3403,
	"kAchievementCheckerType_HeroPointResetCount":   3404,
	"kAchievementCheckerType_ChangeCampCount":       3405,
	"kAchievementCheckerType_ChangeNameCount":       3406,
	"kAchievementCheckerType_ImmgrateCount":         3407,
	"kAchievementCheckerType_CarriageResource":      3408,
	"kAchievementCheckerType_CarriageSinjuredCount": 3409,
	"kAchievementCheckerType_BuyCount":              3410,
	"kAchievementCheckerType_BuyMaxCount":           3411,
	"kAchievementCheckerType_ShopRefreshCount":      3412,
	"kAchievementCheckerType_ItemUseCount":          3413,
	"kAchievementCheckerType_ItemMaxUseCount":       3414,
	"kAchievementCheckerType_CastleResource":        3415,
	"kAchievementCheckerType_CollectMapResource":    3416,
	"kAchievementCheckerType_ShieldTime":            3417,
	"kAchievementCheckerType_ScoutRewardCount":      3418,
	"kAchievementCheckerType_RecruitCount":          3419,
	"kAchievementCheckerType_RecruitMaxCount":       3420,
	"kAchievementCheckerType_GuildShopBuyCount":     3421,
	"kAchievementCheckerType_BuildingTypeCount":     3422,
	"kAchievementCheckerType_BuildingRoadCount":     3423,
	"kAchievementCheckerType_TaskChapter":           3424,
	"kAchievementCheckerType_PlunderResourceHome":   3425,
	"kAchievementCheckerType_EquipmentCount":        3501,
	"kAchievementCheckerType_EquipmentHeroCount":    3502,
	"kAchievementCheckerType_FaceUseCount":          3503,
}

func (x AchievementCheckerType) String() string {
	return proto.EnumName(AchievementCheckerType_name, int32(x))
}
func (AchievementCheckerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor36, []int{1} }

// 联盟积分增加类型
type GuildPointAddType int32

const (
	GuildPointAddType_kGuildPointAddType_Total      GuildPointAddType = 0
	GuildPointAddType_kGuildPointAddType_Build      GuildPointAddType = 1
	GuildPointAddType_kGuildPointAddType_Help       GuildPointAddType = 2
	GuildPointAddType_kGuildPointAddType_TechDonate GuildPointAddType = 3
)

var GuildPointAddType_name = map[int32]string{
	0: "kGuildPointAddType_Total",
	1: "kGuildPointAddType_Build",
	2: "kGuildPointAddType_Help",
	3: "kGuildPointAddType_TechDonate",
}
var GuildPointAddType_value = map[string]int32{
	"kGuildPointAddType_Total":      0,
	"kGuildPointAddType_Build":      1,
	"kGuildPointAddType_Help":       2,
	"kGuildPointAddType_TechDonate": 3,
}

func (x GuildPointAddType) String() string {
	return proto.EnumName(GuildPointAddType_name, int32(x))
}
func (GuildPointAddType) EnumDescriptor() ([]byte, []int) { return fileDescriptor36, []int{2} }

// 增产加速类型
type GrowUpType int32

const (
	GrowUpType_kGrowUpType_None  GrowUpType = 0
	GrowUpType_kGrowUpType_Food  GrowUpType = 12
	GrowUpType_kGrowUpType_Wood  GrowUpType = 13
	GrowUpType_kGrowUpType_Steel GrowUpType = 14
	GrowUpType_kGrowUpType_Oil   GrowUpType = 15
)

var GrowUpType_name = map[int32]string{
	0:  "kGrowUpType_None",
	12: "kGrowUpType_Food",
	13: "kGrowUpType_Wood",
	14: "kGrowUpType_Steel",
	15: "kGrowUpType_Oil",
}
var GrowUpType_value = map[string]int32{
	"kGrowUpType_None":  0,
	"kGrowUpType_Food":  12,
	"kGrowUpType_Wood":  13,
	"kGrowUpType_Steel": 14,
	"kGrowUpType_Oil":   15,
}

func (x GrowUpType) String() string {
	return proto.EnumName(GrowUpType_name, int32(x))
}
func (GrowUpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor36, []int{3} }

// 战斗力类型
type BattlePowerType int32

const (
	BattlePowerType_kBattlePowerType_Total    BattlePowerType = 0
	BattlePowerType_kBattlePowerType_Building BattlePowerType = 1
	BattlePowerType_kBattlePowerType_Tech     BattlePowerType = 2
	BattlePowerType_kBattlePowerType_Army     BattlePowerType = 3
	BattlePowerType_kBattlePowerType_Hero     BattlePowerType = 4
)

var BattlePowerType_name = map[int32]string{
	0: "kBattlePowerType_Total",
	1: "kBattlePowerType_Building",
	2: "kBattlePowerType_Tech",
	3: "kBattlePowerType_Army",
	4: "kBattlePowerType_Hero",
}
var BattlePowerType_value = map[string]int32{
	"kBattlePowerType_Total":    0,
	"kBattlePowerType_Building": 1,
	"kBattlePowerType_Tech":     2,
	"kBattlePowerType_Army":     3,
	"kBattlePowerType_Hero":     4,
}

func (x BattlePowerType) String() string {
	return proto.EnumName(BattlePowerType_name, int32(x))
}
func (BattlePowerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor36, []int{4} }

// 建筑类型
type BuildingType int32

const (
	BuildingType_kBuildingType_None       BuildingType = 0
	BuildingType_kBuildingType_Functional BuildingType = 1
	BuildingType_kBuildingType_Decorate   BuildingType = 2
)

var BuildingType_name = map[int32]string{
	0: "kBuildingType_None",
	1: "kBuildingType_Functional",
	2: "kBuildingType_Decorate",
}
var BuildingType_value = map[string]int32{
	"kBuildingType_None":       0,
	"kBuildingType_Functional": 1,
	"kBuildingType_Decorate":   2,
}

func (x BuildingType) String() string {
	return proto.EnumName(BuildingType_name, int32(x))
}
func (BuildingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor36, []int{5} }

// 成就数据
type AchievementData struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SubId      uint32 `protobuf:"varint,2,opt,name=sub_id,json=subId" json:"sub_id,omitempty"`
	Status     int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	Value      int64  `protobuf:"varint,4,opt,name=value" json:"value,omitempty"`
	LastTime   int64  `protobuf:"varint,5,opt,name=last_time,json=lastTime" json:"last_time,omitempty"`
	ConfirmSub uint32 `protobuf:"varint,6,opt,name=confirm_sub,json=confirmSub" json:"confirm_sub,omitempty"`
}

func (m *AchievementData) Reset()                    { *m = AchievementData{} }
func (m *AchievementData) String() string            { return proto.CompactTextString(m) }
func (*AchievementData) ProtoMessage()               {}
func (*AchievementData) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{0} }

func (m *AchievementData) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AchievementData) GetSubId() uint32 {
	if m != nil {
		return m.SubId
	}
	return 0
}

func (m *AchievementData) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AchievementData) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *AchievementData) GetLastTime() int64 {
	if m != nil {
		return m.LastTime
	}
	return 0
}

func (m *AchievementData) GetConfirmSub() uint32 {
	if m != nil {
		return m.ConfirmSub
	}
	return 0
}

func init() {
	proto.RegisterType((*AchievementData)(nil), "protomsg.AchievementData")
	proto.RegisterEnum("protomsg.AchievementStatus", AchievementStatus_name, AchievementStatus_value)
	proto.RegisterEnum("protomsg.AchievementCheckerType", AchievementCheckerType_name, AchievementCheckerType_value)
	proto.RegisterEnum("protomsg.GuildPointAddType", GuildPointAddType_name, GuildPointAddType_value)
	proto.RegisterEnum("protomsg.GrowUpType", GrowUpType_name, GrowUpType_value)
	proto.RegisterEnum("protomsg.BattlePowerType", BattlePowerType_name, BattlePowerType_value)
	proto.RegisterEnum("protomsg.BuildingType", BuildingType_name, BuildingType_value)
}

func init() { proto.RegisterFile("msg_common_achievement.proto", fileDescriptor36) }

var fileDescriptor36 = []byte{
	// 1255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x97, 0x69, 0x77, 0xd4, 0x36,
	0x17, 0xc7, 0x99, 0x84, 0xe4, 0xf0, 0xe8, 0x01, 0x22, 0x54, 0x48, 0x6d, 0x07, 0x0e, 0x81, 0x16,
	0x08, 0xc3, 0xd2, 0xed, 0x13, 0x24, 0x13, 0x02, 0x9c, 0x12, 0x08, 0x33, 0xe1, 0xf0, 0x72, 0xaa,
	0x8c, 0x6f, 0x66, 0xd4, 0xb1, 0x2d, 0xd7, 0x96, 0x09, 0xe9, 0xbb, 0xee, 0x7b, 0xfb, 0x09, 0xe8,
	0x4a, 0xf7, 0xed, 0x73, 0x74, 0xdf, 0xf7, 0xfd, 0x45, 0x17, 0xba, 0x2f, 0x5f, 0xa0, 0x47, 0x96,
	0xc6, 0x99, 0x26, 0x99, 0x1b, 0x5e, 0xcd, 0xf1, 0xd5, 0x6f, 0xe4, 0xbf, 0xef, 0xff, 0xea, 0x4a,
	0x22, 0xdb, 0xc3, 0xb4, 0x59, 0x6f, 0xc8, 0x30, 0x94, 0x51, 0x9d, 0x37, 0x5a, 0x02, 0xce, 0x41,
	0x08, 0x91, 0x3a, 0x1c, 0x27, 0x52, 0x49, 0xb6, 0x21, 0xff, 0x09, 0xd3, 0xe6, 0xee, 0x8b, 0x25,
	0x32, 0x34, 0xbe, 0x34, 0x3e, 0xc9, 0x15, 0x67, 0x9b, 0x49, 0x9f, 0xf0, 0x9d, 0xd2, 0x68, 0x69,
	0x6c, 0x53, 0xb5, 0x4f, 0xf8, 0x6c, 0x1b, 0x19, 0x4c, 0xb3, 0xb9, 0xba, 0xf0, 0x9d, 0xbe, 0x3c,
	0x36, 0x90, 0x66, 0x73, 0xc7, 0x7d, 0x36, 0x4c, 0x06, 0x53, 0xc5, 0x55, 0x96, 0x3a, 0xfd, 0xa3,
	0xa5, 0xb1, 0x81, 0xaa, 0x7d, 0x62, 0x5b, 0xc9, 0xc0, 0x39, 0x1e, 0x64, 0xe0, 0xac, 0x1f, 0x2d,
	0x8d, 0xf5, 0x57, 0xcd, 0x03, 0x1b, 0x21, 0xff, 0x0b, 0x78, 0xaa, 0xea, 0x4a, 0x84, 0xe0, 0x0c,
	0xe4, 0x23, 0x1b, 0x74, 0x60, 0x56, 0x84, 0xc0, 0x76, 0x92, 0xff, 0x37, 0x64, 0x34, 0x2f, 0x92,
	0xb0, 0x9e, 0x66, 0x73, 0xce, 0x60, 0xfe, 0x1a, 0x62, 0x43, 0xb5, 0x6c, 0xae, 0x7c, 0x9a, 0x6c,
	0xe9, 0x52, 0x59, 0x33, 0x2f, 0x1a, 0x21, 0x57, 0xb6, 0x57, 0x44, 0xeb, 0xa7, 0x62, 0x88, 0xe8,
	0x3a, 0xb6, 0x93, 0x8c, 0xac, 0x32, 0x58, 0x91, 0x61, 0x1c, 0x80, 0x02, 0x5a, 0x2a, 0x5f, 0x72,
	0xc9, 0x70, 0x17, 0x50, 0x69, 0x41, 0xa3, 0x0d, 0xc9, 0xec, 0x62, 0x0c, 0x6c, 0x94, 0x6c, 0x6f,
	0xaf, 0x3e, 0x54, 0x3f, 0x29, 0x23, 0xa0, 0xeb, 0xd8, 0x18, 0xb9, 0xaa, 0x17, 0x31, 0xc1, 0x95,
	0x0a, 0x60, 0x46, 0x2e, 0x40, 0x42, 0x2f, 0x38, 0xec, 0x3a, 0x72, 0xb0, 0x17, 0x79, 0x26, 0x6e,
	0x26, 0xdc, 0x87, 0x89, 0x4c, 0x04, 0xbe, 0x88, 0x9a, 0x27, 0xe0, 0x1c, 0x04, 0xf4, 0x51, 0x87,
	0x95, 0xc9, 0x9e, 0x9e, 0x93, 0x5b, 0xb6, 0x22, 0xb3, 0x48, 0xd1, 0xc7, 0x2e, 0x8b, 0x35, 0xf3,
	0x3e, 0xee, 0xb0, 0xbd, 0x64, 0x57, 0x2f, 0x76, 0x16, 0x1a, 0x2d, 0xc3, 0x3d, 0xe1, 0x60, 0x1f,
	0x57, 0x8b, 0x01, 0xfc, 0x33, 0xb1, 0x36, 0x8d, 0x3e, 0xe9, 0xb0, 0x7d, 0x64, 0x77, 0x2f, 0xf2,
	0x68, 0x22, 0x17, 0x2c, 0xf8, 0x94, 0xc3, 0xf6, 0x93, 0xab, 0x7b, 0x81, 0x15, 0xa1, 0x16, 0xab,
	0x90, 0xca, 0x2c, 0x69, 0x00, 0xbd, 0xe8, 0xb0, 0x83, 0x64, 0x5f, 0x4f, 0x54, 0x06, 0x01, 0x34,
	0x54, 0x41, 0x3f, 0x8d, 0x2b, 0xd0, 0xdf, 0x3f, 0x23, 0x45, 0xa4, 0xe8, 0x33, 0x6b, 0x7e, 0xbc,
	0xe1, 0x9e, 0x75, 0xd8, 0x01, 0xb2, 0x17, 0xe3, 0x26, 0xb9, 0x08, 0x16, 0x0d, 0xfc, 0x1c, 0xaa,
	0x35, 0x87, 0x65, 0xc4, 0x15, 0x18, 0xaf, 0x9e, 0x47, 0xa7, 0xce, 0xb5, 0x1e, 0x83, 0x20, 0x36,
	0xf0, 0x0b, 0xb8, 0x5e, 0x9e, 0xb6, 0x0d, 0xf7, 0x22, 0xae, 0x97, 0xa7, 0xed, 0x5c, 0xaf, 0x81,
	0x5f, 0x42, 0x27, 0x1d, 0x4f, 0x42, 0xcb, 0xdd, 0xe6, 0xb2, 0x43, 0x64, 0xac, 0x17, 0x77, 0x0c,
	0x12, 0x79, 0x3a, 0xe3, 0x81, 0x50, 0x16, 0xbf, 0xdd, 0xc5, 0xd2, 0xa0, 0xf1, 0xf1, 0x05, 0xde,
	0x86, 0xc8, 0xd0, 0x77, 0xb8, 0x98, 0x08, 0x4d, 0x1b, 0xee, 0xce, 0x35, 0x39, 0x53, 0xae, 0x77,
	0xb9, 0x58, 0x06, 0x0a, 0xce, 0x4c, 0x7a, 0xb7, 0x8b, 0xad, 0x17, 0x0d, 0xd7, 0x14, 0x4f, 0x0c,
	0x7b, 0x0f, 0x3a, 0xb1, 0xce, 0x56, 0xd7, 0xc4, 0xf7, 0xae, 0xa9, 0xa2, 0xd6, 0x16, 0x41, 0x60,
	0x24, 0xdf, 0xe7, 0xb2, 0x6b, 0x48, 0x19, 0xaf, 0x04, 0x19, 0x2c, 0x9e, 0xe0, 0x91, 0x6f, 0x66,
	0xbf, 0x1f, 0x35, 0x64, 0x02, 0xb8, 0x9a, 0x96, 0x51, 0xaa, 0xc0, 0x2a, 0x7f, 0xc0, 0x65, 0xd7,
	0x93, 0x43, 0x6b, 0xcc, 0x1f, 0xc9, 0xa4, 0x0a, 0x0b, 0x3c, 0xb1, 0xaf, 0x78, 0xd0, 0x5d, 0xb3,
	0x3a, 0x8f, 0x8a, 0x79, 0x65, 0xe0, 0x87, 0x5c, 0x76, 0x98, 0xec, 0xc7, 0x52, 0x33, 0x9b, 0x70,
	0x11, 0x15, 0x6d, 0xea, 0x61, 0x97, 0xed, 0xea, 0xdd, 0x51, 0x75, 0x95, 0xd2, 0xef, 0x5d, 0xb6,
	0x87, 0x8c, 0xf6, 0x42, 0x8e, 0x9c, 0x8f, 0x41, 0x3b, 0x43, 0x7f, 0x40, 0xab, 0xe2, 0x46, 0x11,
	0x58, 0x3f, 0x7e, 0x44, 0xb9, 0x49, 0xe0, 0xf6, 0xb3, 0x7f, 0x42, 0xb9, 0x4a, 0x96, 0xd8, 0xc5,
	0x7b, 0x09, 0xad, 0x71, 0xed, 0xc0, 0x4c, 0xc0, 0x17, 0x3b, 0x06, 0xfc, 0x8c, 0xd2, 0x33, 0x41,
	0x16, 0xf9, 0x90, 0x14, 0x4d, 0xec, 0x17, 0x34, 0xf5, 0x66, 0x37, 0x39, 0x2b, 0xec, 0xf2, 0xf9,
	0x15, 0x17, 0x92, 0xc3, 0x53, 0x5c, 0xd8, 0x34, 0xfc, 0xe6, 0x62, 0xfd, 0xb1, 0xd6, 0x90, 0x99,
	0x75, 0xf4, 0x77, 0x54, 0xc3, 0x24, 0xcc, 0x43, 0xe4, 0x17, 0x1a, 0xfe, 0xc0, 0x05, 0x03, 0x57,
	0x79, 0xbd, 0x18, 0xf8, 0x4f, 0x97, 0x5d, 0x4b, 0x0e, 0x60, 0x70, 0x85, 0x87, 0x71, 0x85, 0xa7,
	0x2a, 0xb0, 0xb9, 0xfe, 0x0b, 0xad, 0xae, 0xce, 0x3f, 0x96, 0xda, 0xd5, 0xdf, 0xa8, 0x87, 0xba,
	0x74, 0xcc, 0xb2, 0xfb, 0x07, 0x4d, 0xc6, 0x4c, 0x4b, 0x2a, 0xdb, 0x7a, 0x5e, 0xf3, 0x50, 0xfb,
	0x34, 0x38, 0x95, 0xf0, 0xd0, 0xca, 0x7d, 0xdd, 0xc3, 0x5e, 0x3f, 0xc5, 0x1b, 0x96, 0x7b, 0xc3,
	0xc3, 0x12, 0xa1, 0x5b, 0x44, 0xbe, 0xab, 0x54, 0x21, 0x05, 0x6b, 0xca, 0x9b, 0xa8, 0x8e, 0x4a,
	0x8b, 0x47, 0x4d, 0xc8, 0x93, 0x97, 0xd3, 0x6f, 0x5d, 0x06, 0x7d, 0xb2, 0x50, 0xfd, 0xb6, 0x87,
	0x75, 0xc2, 0xe3, 0x61, 0xd8, 0x4c, 0x8a, 0x9d, 0xeb, 0x1d, 0x0f, 0x6b, 0x3f, 0x15, 0x9e, 0x24,
	0x82, 0x37, 0xa1, 0xa8, 0xe7, 0x77, 0x3d, 0xac, 0xfd, 0x74, 0xf0, 0x9a, 0x88, 0x6e, 0xce, 0x12,
	0xb0, 0x55, 0xf2, 0x9e, 0x87, 0x2d, 0xff, 0x89, 0xcc, 0x5a, 0xfd, 0xbe, 0x87, 0x1e, 0xbc, 0xb2,
	0xc5, 0x69, 0x7e, 0xde, 0x90, 0x1f, 0xa0, 0x9a, 0x6b, 0x2d, 0x19, 0x57, 0x61, 0x3e, 0x81, 0xb4,
	0x65, 0xf0, 0x0f, 0x3d, 0xec, 0x84, 0x72, 0x5c, 0x41, 0x78, 0x26, 0xb5, 0xd9, 0xf8, 0x08, 0xcd,
	0xb3, 0x46, 0xa7, 0xf9, 0xf9, 0x82, 0xfe, 0xd8, 0xc3, 0xd6, 0x8a, 0x29, 0xfb, 0x22, 0x73, 0x9f,
	0x78, 0xd8, 0xc6, 0x60, 0x0f, 0x3f, 0xd3, 0x3c, 0x2e, 0xfe, 0xf0, 0xa9, 0x87, 0xae, 0xef, 0x96,
	0x80, 0xc0, 0xcf, 0x4f, 0x60, 0x9f, 0xe1, 0xe9, 0xd0, 0x8d, 0xa0, 0x7b, 0x37, 0xf8, 0x1c, 0x4d,
	0x47, 0x15, 0x1a, 0x49, 0x26, 0x6c, 0x91, 0x7e, 0x81, 0xa6, 0xc3, 0xa2, 0x85, 0x2d, 0x5f, 0x7a,
	0xd8, 0xda, 0xce, 0xdb, 0x86, 0xf6, 0xa6, 0x30, 0xfc, 0x2b, 0x94, 0xef, 0x1c, 0x70, 0xf5, 0x83,
	0xe1, 0xbf, 0xbe, 0x2c, 0xbe, 0x2a, 0x3b, 0xfd, 0xff, 0x1b, 0xb4, 0xa0, 0xf2, 0x73, 0x56, 0x8b,
	0xc7, 0x0a, 0x12, 0xfa, 0x2d, 0xba, 0x7c, 0x97, 0xf5, 0xf4, 0x63, 0x32, 0x04, 0xfa, 0x1d, 0x6a,
	0xfd, 0x91, 0x5b, 0x32, 0x11, 0xe7, 0xc1, 0x5c, 0xc8, 0xcb, 0x23, 0x98, 0xf5, 0x05, 0xbc, 0x74,
	0x3e, 0x7a, 0x65, 0x04, 0xb3, 0x48, 0xb7, 0x9d, 0xa2, 0x06, 0x5f, 0x1d, 0x29, 0x3f, 0x52, 0x22,
	0x5b, 0x96, 0x8e, 0xc3, 0xe3, 0xbe, 0x9f, 0x5f, 0x73, 0xb6, 0x13, 0xa7, 0xbd, 0x22, 0x5a, 0x9f,
	0x95, 0x8a, 0x07, 0x74, 0x5d, 0x8f, 0xd1, 0x3c, 0x87, 0xb4, 0x94, 0xdf, 0xbd, 0x56, 0x8e, 0xea,
	0x13, 0x2c, 0xed, 0x63, 0xbb, 0xc8, 0x8e, 0xd5, 0x26, 0x2e, 0x4e, 0xc4, 0xb4, 0xbf, 0x7c, 0x2b,
	0x21, 0xf6, 0x86, 0xa0, 0x95, 0x6c, 0x25, 0xb4, 0xbd, 0xf4, 0xd8, 0xb9, 0x64, 0x2d, 0x8b, 0x4e,
	0x49, 0xe9, 0xd3, 0x8d, 0xcb, 0xa3, 0x67, 0x75, 0x74, 0x13, 0xdb, 0x46, 0xb6, 0x74, 0x47, 0x6b,
	0x0a, 0x20, 0xa0, 0x9b, 0xd9, 0x15, 0x64, 0xa8, 0x3b, 0x7c, 0x4a, 0x04, 0x74, 0xa8, 0x7c, 0xa1,
	0x44, 0x86, 0xba, 0x6e, 0x69, 0xb9, 0x02, 0x8f, 0x0c, 0xb7, 0x97, 0xc5, 0x8a, 0x4c, 0xec, 0x20,
	0xee, 0x8a, 0xb1, 0x4e, 0x2d, 0xd1, 0x12, 0x73, 0xc9, 0xb6, 0x95, 0x7f, 0x85, 0x46, 0x8b, 0xf6,
	0xad, 0x3a, 0xa4, 0x77, 0x2e, 0xda, 0xbf, 0xea, 0x90, 0xb6, 0x97, 0xae, 0x2f, 0xdf, 0x44, 0x36,
	0x76, 0x97, 0x36, 0x1b, 0x26, 0xac, 0xdd, 0x1d, 0xe8, 0xe4, 0x47, 0x3b, 0xf4, 0x9f, 0xf8, 0x54,
	0x16, 0x35, 0x94, 0x90, 0x11, 0x0f, 0x68, 0xc9, 0x7c, 0x51, 0xf7, 0xe8, 0x24, 0x34, 0xa4, 0xee,
	0xea, 0xb4, 0x6f, 0x6e, 0x30, 0xbf, 0xff, 0xdf, 0xf0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05,
	0x01, 0xcc, 0x66, 0x26, 0x10, 0x00, 0x00,
}
