syntax = "proto3";
package protomsg;
import "google/protobuf/any.proto";
import "msg_common_mail.proto";
import "msg_common.proto";
import "msg_common_map.proto";
import "msg_common_city.proto";
import "msg_common_scout.proto";
import "msg_common_magic_lamp.proto";
import "msg_common_activity.proto";
import "msg_common_rank.proto";
import "msg_common_task.proto";
import "msg_common_drama_story.proto";
import "msg_common_npcforce.proto";
import "msg_common_wooden_stake.proto";

/**************************** 登入系统开始 ****************************/
// 移除登录web会话密钥
message MsgGM2LSRemoveSessionKeyNotice
{
    repeated string tokens  = 1;
}

message MsgUS2GSKickPlayerNotice
{
    uint64 player_id    = 1;    // 玩家ID
    uint32 reason       = 2;    // 原因
}

message MsgLS2GSKickPlayerNotice
{
    uint64 player_id    = 1;    // 玩家ID
    uint32 reason       = 2;    // 原因
}

/**************************** 登入系统结束 ****************************/

message MsgS2SLargePackage
{
    uint32 session_id   = 1;
    uint32 pack_count   = 2;
    uint32 pack_idx     = 3;
    uint32 msg_type     = 4;
    uint32 data_length  = 5;    // 数据长度
    bytes content       = 6;
}


/**************************** 开服相关 ****************************/

message MsgS2GSPlayerNotice
{
    repeated uint64 player_ids  = 1;
    uint32 msg_id               = 2;
    google.protobuf.Any content = 3;
}

message MsgS2CLPlayerNotice
{
    uint64 player_id            = 1;
    uint32 msg_id               = 2;
    google.protobuf.Any content = 3;
}

// DS请求所有服务器重新加载配置
enum ReloadType
{
    kReloadType_None    = 0;
    kReloadType_File    = 1;    // reload单个配置文档
    kReloadType_All     = 2;    // reload所有配置
}

// 服务器注册消息
message MsgServerRegist
{
    NetAddress inet_address = 1;    // 服务器对内IP和端口号
    string domain           = 2;    // 域名
    string version          = 3;    // 服务器版本
}

// 服务器Serivce Ready
message MsgServiceReady
{
}

// TS通知DS服务器Serivce Break
message MsgServiceBreak
{
    ServerAddressInfo info  = 1;
}

// DS通知服务器准备关服
message MsgServerPrepareShutdown
{
    uint32 wait_seconds = 1;
}

// DS通知服务器关服
message MsgServerShutdown
{
}

// DS通知服务器备份数据（程序开发用)
message MsgServerBackup
{
}


// DS通知LS，服务器组就绪
message MsgServerGroupReadyNotice
{
}

// 通知DS要监听服务器事件
message MsgServerEventListen
{
    int32 server_type   = 1;    // 要监听事件的服务器类型 ServerType
    string version      = 3;    // 服务器版本
    string branch       = 4;    // 分支版本
    uint32 build_id     = 5;    // Build ID
}

message ServerNetInfo
{
    uint64 session_address  = 1;    // 被监听的 SessionAddress
    NetAddress inet_address = 2;    // 服务器对内IP和端口号
}

// 通知服务器事件给目标服务器（监听者）
message MsgServerEventNotice
{
    uint32 event_type               = 1;    // 其他服务器与DS的事件类型 ServerEventType
    repeated ServerNetInfo infos    = 3;    // 被监听服务器网络信息
}

// 客户端平台对应的在线
message ClientPlatStoreInfo
{
    uint64 platform_id      = 1;
    uint32 online           = 2;
    string platform_name    = 3;
}

// 推送消息
message MsgS2RPGamePush
{
    string game_id      = 1;
    uint64 player_id    = 2;
    string content      = 3;
}

message MsgSeverReloadNotice
{
    string filename         = 1;
    ReloadType reload_type  = 2;
}

message ServerCountInfo
{
    uint32 server_type  = 1;
    uint32 count        = 2;
}

// Dispatch发送配置
message MsgServerConfigNotice
{
    uint32 user_server_count            = 1;
    uint32 allocate_db_base_rate        = 2;
    uint32 allocate_db_add_probability  = 3;
    uint32 db_allow_range_rate          = 4;
    uint32 kingdom_count                = 8;
    repeated ServerCountInfo infos      = 9;
}

// 直接向客户端发送消息
message MsgS2GSSendMsgToPlayerRequest
{
    google.protobuf.Any content = 1;
}

message MsgGS2SSendMsgToPlayerReply
{
}

// 直接向客户端发送消息
message MsgS2GSBroadcastToClientsNotice
{
    repeated uint64 players = 1;
    uint32 msg_id           = 2;
    bytes msg_data          = 3;
}

// 直接向客户端发送消息
message MsgS2GSToClientNotice
{
    uint64 player   = 1;
    uint32 msg_id   = 2;
    bytes msg_data  = 3;
}

// 发送给DBServer执行SQL
message MsgDBPostSQL
{
    uint64 associate_id = 1;    // 关联id
    string sql          = 2;    // sql语句
}

message MsgServerTestNotice
{
    uint32 index        = 1;
    uint32 count        = 2;
    int64 start_time    = 3;
}

// DS通知各个TS更新服务器版本检查开关
message MsgCheckVersionNotice
{
    bool check_version  = 1;
}

/**************************** 开服相关 ****************************/


/**************************** 雷达系统开始 ****************************/

// 雷达怪物死亡
message MsgMS2GSRadarMonsterDeadRequest
{
    uint64 region_id    = 1;
    uint64 player_id    = 2;
    uint64 monster_id   = 3;
}

message MsgGS2MSRadarMonsterDeadReply
{
}

// 城堡移动
message MsgMS2GSCastlePositionChangeNotice
{
    uint64 region_id    = 1;
    uint64 player_id    = 2;
    bool castle         = 3;
    vector2d position   = 4;
}

/**************************** 雷达系统结束 ****************************/

/**************************** 地图相关 ****************************/


message MsgMS2GSMarchIntoHomeRequest
{
    uint64 region_id            = 1;
    uint64 player_id            = 2;
    uint64 march_entity_id      = 3;
    uint32 march_index          = 4;
    ResourceData resource_data  = 5;
    ArmyData army_data          = 6;
    map<uint32, int64> effect   = 7;
}

message BattleEndHero
{
    uint32 hero_id  = 1;
    uint64 exp_add  = 2;
}

message MsgMS2GSBattleEndRequest
{
    BattleType battle_type          = 1;
    BattleVictoryType victory       = 2;    // 0平 1胜 2负
    repeated TroopData kill_troop   = 3;
    int64 region_id                 = 4;
    EntityType ememy_entity_type    = 5;
    bool is_in_guild_field          = 6;
    uint32 self_camp_id             = 7;    // 自己的阵营id
    uint32 enemy_camp_id            = 8;    // 敌人的阵营id
    uint32 monster_id               = 9;    // 只有单ememy_entity_type是怪物的时候才有效
    uint64 enemy_guild_id           = 10;   // 敌人的公会id
    repeated Resource resource      = 11;   // 获得资源
}


message MsgGS2MSBattleEndReply
{

}

// 离开战斗消息
message MsgMS2GSBattleLeaveRequest
{
    repeated TroopData dead_army        = 1;    // 兵力损失.包括重伤和死亡
    repeated TroopData sinjured_army    = 2;    // 重伤兵量
    BattleVictoryType victor            = 3;    // 胜利情况
}

// 离开战斗消息
message MsgGS2MSBattleLeaveReply
{
}


// MapServer通知GS，扣减玩家体力
message MsgMS2GSReduceAPNotice
{
    uint32 reduce_ap    = 1;    // 扣减的体力值
    uint32 total_ap     = 2;    // 当前体力值
}

message MsgMS2GSKillBarbariansRequest
{
    BattleType battle_type      = 1;
    uint32 barbarians_id        = 2;
    BattleVictoryType victory   = 3;    // 0平 1胜 2负
    bool is_first_kill          = 4;
    BattleEndHero hero1         = 10;
    BattleEndHero hero2         = 11;
    uint32 cost_ap              = 12;   // 击杀这个野蛮人消耗的体力.可能是0
    map<uint32, int64> effect   = 14;
}

message MsgGS2MSKillBarbariansReply
{
    BattleEndHero hero1                             = 1;
    BattleEndHero hero2                             = 2;

    // 击杀奖励
    repeated protomsg.Resource kill_reward          = 26;
    repeated protomsg.Resource first_kill_reward    = 27;
}

// 击杀野蛮人城寨
message MsgMS2GSKillBarbariansFortRequest
{
    uint32 barbarians_fort_id   = 1;
}

message MsgGS2MSKillBarbariansFortReply
{

}

message MsgMS2GSCastleBattleRequest
{
    BattleType battle_type      = 1;
    BattleVictoryType victory   = 2;    // 0平 1胜 2负

    uint64 army_remain_capacity = 4;
}

message MsgGS2MSCastleBattleReply
{
    // 掠夺资源
    repeated protomsg.Resource plunder_reward   = 1;
    // 损失资源
    repeated protomsg.Resource cost_resource    = 2;
}

message MsgMS2GSCastleBattlePillageRequest
{
    uint64 pillage_entity_id    = 1;
    uint64 pillage_proportion   = 2;    // 掠夺比例
    uint64 pillage_max          = 3;    // 掠夺最大值
}

message MsgMS2GSCastleBattlePillageReply
{
    uint64 pillage_entity_id            = 1;
    repeated protomsg.Resource pillages = 2;
}


message MS2GSRoundResult
{
    BattleType battle_type                  = 1;
    uint32 hero1                            = 2;    // 主将ID
    uint32 hero2                            = 3;    // 副将ID

    repeated TroopData dead_troops          = 4;    // 死亡的兵团
    repeated TroopData kill_troops          = 5;    // 击杀的兵团
    repeated TroopData sinjured_troops      = 6;    // 重伤的兵团

    bool is_partner                         = 7;    // 我是否是增援别人(增援对象可以是主堡,集结部队,或者建筑)
    protomsg.EntityType self_entity_type    = 8;    // 自己的entityType.如果是增援别人.就是我增援对象的entity_type
    uint64 region_id                        = 9;    // 所在地图ID
    uint64 entity_id                        = 10;   // entity_id
}

message MsgMS2GSRoundResultRequest
{
    repeated MS2GSRoundResult round_result  = 1;
}

message MsgGS2MSRoundResultReply
{
}

message MsgGS2MSMarchIntoHomeReply
{
}

message MsgS2GSGetPlayerCastleDataRequest
{
    uint64 player_id    = 1;
}

message MsgGS2SGetPlayerCastleDataReply
{
    uint64 entity_id    = 2;
    vector2d position   = 3;
}

// 增援到达
message MsgMS2GSReenforceArriveJoinRequest
{
    uint64 player_id                = 1;
    protomsg.EntityType entity_type = 2;
}

message MsgGS2MSReenforceArriveJoinReply
{

}

message MsgMS2GSIntoGuildMarchRequest
{
    uint64 player_id        = 1;
    uint32 march_index      = 2;
    ArmyData army           = 3;

    uint32 guild_amry_index = 4;
}

message MsgGS2MSIntoGuildMarchReply
{
}

message MsgS2GSGetPlayerMarchRequest
{
    uint64 player_id    = 1;
}

message MsgGS2SGetPlayerMarchReply
{
    EffectData effect_data  = 1;
}

message MsgS2GSPlayerMarchGoOutRequest
{
    uint64 player_id    = 1;
    uint32 march_index  = 2;
    vector2d position   = 4;
}

message MsgGS2SPlayerMarchGoOutReply
{

}

message MsgS2GSPlayerCreateGuildMarchRequest
{
    uint64 player_id            = 1;
    uint32 guild_march_index    = 2;
    MarchCommand command        = 3;
    ArmyData army_data          = 4;
}

message MsgGS2SPlayerCreateGuildMarchReply
{
    uint64 entity_id    = 1;
}

message MsgMS2GSDisbandGuildMarchRequest
{
    uint64 player_id            = 1;
    uint32 guild_march_index    = 2;
    ArmyData remain_army        = 3;
    vector2d position           = 5;
}

message MsgGS2MSDisbandGuildMarchReply
{
}

message MsgS2GSPlayerMarchMoveBackRequest
{
    uint64 player_id    = 1;
    uint32 march_index  = 2;
    bool is_force       = 3;
}

message MsgGS2SPlayerMarchMoveBackReply
{

}

message MsgMS2GSStartWarManiaRequest
{
    uint64 player_id    = 1;
}

message MsgGS2MSStartWarManiaReply
{
    int32 error_code    = 99;
}

message MsgGS2MSPlayerEventNotice
{
    uint64 player_id                = 1;
    protomsg.EventData event_data   = 2;
    uint64 region_id                = 3;
}

message MsgS2GSUpdateArmyDataRequest
{
    uint64 region_id    = 1;
    uint64 player_id    = 2;
    uint64 entity_id    = 3;
    ArmyData army_data  = 4;
}

message MsgGS2SUpdateArmyDataReply
{

}

message MsgMS2GSScoutIntoHomeRequest
{
    uint64 player_id    = 1;
    uint32 scout_index  = 2;
}

message MsgMS2GSScoutIntoHomeReply
{
}

// PM清除迷雾
message MsgGS2MSPMCleanMistNotice
{
    uint64 player_id    = 1;
}

// 通知GS迷雾解锁Action
message MsgMS2GMistUpdateRequest
{
    uint32 add_open             = 1;    // 新开迷雾块数
    bool is_clean               = 2;    // 是否已清迷雾
    uint64 region_id            = 3;
    uint32 total_pass_count     = 4;
    uint32 total_temple_count   = 5;
}

message MsgGS2MSMistUpdateReply
{

}

// 通知GS发现建筑(关卡/神庙)
message MsgMS2GSExploreFoundBuildingRequest
{
    uint32 type         = 1;    // EntityType
    uint32 count        = 2;
    uint64 region_id    = 3;
}

message MsgGS2MSExploreFoundBuildingReply
{

}


// PM清除迷雾
message MsgS2GSInstanceCloseNotice
{
    uint64 region_id    = 1;
}

message MsgMS2GSCarriageIntoHomeRequest
{
    uint64 region_id                = 1;
    uint64 player_id                = 2;
    uint32 march_index              = 3;
    protomsg.ResourceSet resources  = 4;
}

message MsgGS2MSCarriageIntoHomeReply
{

}

message MsgMS2GSCarriageDoneRequest
{
    uint64 region_id                = 1;
    uint64 player_id                = 2;
    uint32 march_index              = 3;
    protomsg.ResourceSet resources  = 4;
}

message MsgGS2MSCarriageDoneReply
{

}

message MsgMS2GSScoutPlayerRequest
{
    uint64 region_id                = 1;
    uint64 player_id                = 2;
    protomsg.EntityType entity_type = 3;
}

message MsgGS2MSScoutPlayerReply
{

}

message MsgMS2GSCastleRecycleRequest
{
    uint64 region_id    = 1;
    uint64 player_id    = 2;
}

message MsgGS2MSCastleRecycleReply
{

}

// 查看心跳包
message MsgGS2MSViewerKeepLiveRequest
{
    uint64 region_id    = 1;
    uint64 viewer_id    = 2;
    uint64 player_id    = 3;
}

// 查看心跳包回复
message MsgMS2GSViewerKeepLiveReply
{
    uint64 region_id    = 1;

    uint64 viewer_id    = 2;
    uint64 player_id    = 3;

    int32 error_code    = 99;
}

// Mapserver向Gameserver请求添加玩家状态
message MsgMS2GSAddStatusRequest
{
    uint32 status_id    = 1;
    uint32 log_param_1  = 2;
    uint32 log_param_2  = 3;
}

message MsgGS2MSAddStatusReply
{

}

// Mapserver向Gameserver请求移除玩家状态
message MsgMS2GSRemoveStatusRequest
{
    uint32 status_id    = 1;
    uint32 log_param_1  = 2;
    uint32 log_param_2  = 3;
}

message MsgGS2MSRemoveStatusReply
{

}

/**************************** 地图相关 ****************************/

//////////////////////////////////////////////////////////////////////////
///  战斗模块 开始
//////////////////////////////////////////////////////////////////////////

message MsgM2GSBattleRoundDataSyn
{
    repeated uint64 viewers             = 1;
    repeated SkillResult skill_results  = 2;
}

message MsgM2GSCastlePlunderRequest
{
    uint64 region_id                            = 1;
    repeated protomsg.Resource plunder_reward   = 2;    // 抢劫资源通过action送给GS玩家

    repeated protomsg.Resource total_plunder    = 3;    // 总共抢劫资源数量(可能在行军队伍中)
}

message MsgGS2MCastlePlunderReply
{
    repeated protomsg.Resource plunder_reward   = 1;
}

message MsgM2GSSkillCastRequest
{
    uint32 skill_group_id   = 1;
    uint32 skill_id         = 2;
}

message MsgGS2MSkillCastReply
{

}

//////////////////////////////////////////////////////////////////////////
///  战斗模块 结束
//////////////////////////////////////////////////////////////////////////

/**************************** 邮件相关 ****************************/


message MsgMAS2GSSAddMailNotice
{
    protomsg.MailInfo mail  = 1;
}

message MsgGS2MASPlayerOffline
{
    uint64 player_id    = 1;
}

message MsgMAS2GSNoticeKingdomMail
{
    protomsg.KingdomMail notice = 1;
}

/**************************** 邮件相关 ****************************/


/**************************** Local User相关 ****************************/

// GameServe服务器向local User Server发送负载情况
message MsgGS2LUSLoadInfoNotice
{
    uint32 max_count    = 1;
    uint32 warn_count   = 2;
    uint32 player_count = 3;
}

/**************************** Local User相关 ****************************/


/**************************** 内城相关 ****************************/
// 查看指定玩家内城信息
message MsgGS2GSQueryPlayerCityInfoRequest
{
    uint64 player_id    = 1;
}

message MsgGS2GSQueryPlayerCityInfoReply
{
    CityInfo info   = 1;
}

// 请求复制内城方案
message MsgGS2GSCopyCityThemeRequest
{
    uint64 player_id    = 1;
}

message MsgGS2GSCopyCityThemeReply
{
    CityThemeInfo theme = 1;
}

/**************************** 内城相关 ****************************/

/**************************** 领主相关 ****************************/
// 查看指定玩家领主信息
message MsgGS2GSQueryPlayerLordInfoRequest
{
    uint64 player_id    = 1;
}

message MsgGS2GSQueryPlayerLordInfoReply
{
    PlayerLordInfo info = 1;
}

// 查看指定玩家击杀信息
message MsgGS2GSQueryPlayerKillRequest
{
    uint64 player_id    = 1;
}

message MsgGS2GSQueryPlayerKillReply
{
    KillArmyCountInfo info  = 1;    // 击杀详情
}

// 查看指定玩家战斗统计信息
message MsgGS2GSQueryPlayerBattleStatisticsRequest
{
    uint64 player_id    = 1;
}

message MsgGS2GSQueryPlayerBattleStatisticsReply
{
    BattleStatistics info   = 1;    // 战斗统计
}
/**************************** 领主相关 ****************************/


/**************************** 英雄相关 ****************************/
// 给英雄加经验
message MsgGS2GSAddHeroExpRequest
{
    repeated HeroExpData Hero_exp   = 1;
}

message MsgGS2GSAddHeroExpReply
{
    repeated HeroExpData Hero_exp   = 1;
}
/**************************** 英雄相关 ****************************/

/**************************** 侦查相关 ****************************/
// 侦查可掠夺资源
message MsgGS2GSScoutResourceRequest
{
}

message MsgGS2GSScoutResourceReply
{
    ResourceSet resources   = 1;    // 可掠夺资源
    ScoutHp hp              = 2;    // 耐久
}

/**************************** 侦查相关 ****************************/

/**************************** 奇观相关 ****************************/

// 开启奇观请求
message MsgGS2MSSetTempleStatusRequest
{
    uint64 temple_id    = 1;
    uint32 status       = 2;
}

// 占领奇观请求
message MsgGS2MSCaptureTempleRequest
{
    uint64 temple_id    = 1;
    uint64 guild_id     = 2;
}

// 创建奇观怪
message MsgGS2MSCreateTempleMonsterRequest
{
    uint64 temple_id    = 1;
    uint64 arena_id     = 2;
    uint32 blood_count  = 3;
}

// 设置据点状态PM
message MsgGS2MSSetStrongholdStatusRequest
{
    uint64 stronghold_id    = 1;
    uint32 status           = 2;
}

// 占领据点PM
message MsgGS2MSCaptureStrongholdRequest
{
    uint64 stronghold_id    = 1;
    uint64 player_id        = 2;
}

// 据点刷怪PM
message MsgGS2MSCreateStrongholdMonsterRequest
{
    uint64 stronghold_id    = 1;
    uint32 arena_id         = 2;
}

message TempleAndPassNoticeData
{
    uint32 config_id    = 1;
    uint32 levle        = 2;
}

// 奇观通知
message MsgMS2GSTempleNotice
{
    uint64 guild_id                         = 1;
    repeated TempleAndPassNoticeData data   = 2;
}

// 关卡通知
message MsgMS2GSPassNotice
{
    uint64 guild_id                         = 1;
    repeated TempleAndPassNoticeData data   = 2;
}

/**************************** 奇观相关 ****************************/

/**************************** 关卡相关 ****************************/

// 开启关卡请求
message MsgGS2MSOpenPassRequest
{
    uint64 pass_id  = 1;
}

// 占领关卡请求
message MsgGS2MSCapturePassRequest
{
    uint64 pass_id  = 1;
    uint64 guild_id = 2;
}

/**************************** 关卡相关 ****************************/


/**************************** 资源相关 ****************************/

// 加资源请求
message MsgGS2GSAddResourceRequest
{
    repeated protomsg.Resource resource             = 1;
    uint32 source                                   = 2;    // 来源
    uint64 param1                                   = 3;
    uint64 param2                                   = 4;
    uint64 param3                                   = 5;
    uint64 param4                                   = 6;
    uint64 param5                                   = 7;
    repeated protomsg.Resource first_kill_resource  = 8;
}

// 加资源响应
message MsgGS2GSAddResourceReply
{
}

// 扣除资源请求
message MsgS2GSReduceResourceRequest
{
    repeated protomsg.Resource resource = 1;
    uint32 source                       = 2;    // 来源
    uint64 param1                       = 3;
    uint64 param2                       = 4;
    uint64 param3                       = 5;
    uint64 param4                       = 6;
    uint64 param5                       = 7;
}

// 扣除资源响应
message MsgGS2SReduceResourceReply
{
}

// 发奖励请求
message MsgS2GSGetRewardRequest
{
    repeated uint32 reward_id   = 1;
    int32 reward_action_type    = 2;
    repeated uint64 params      = 3;
}

// 发奖励回应
message MsgGS2SGetRewardReply
{
    ResourceSet resources   = 1;
}

// 采空资源
message MsgMS2GSCollectEmptyResourceRequest
{
    uint32 type = 1;
}

// 发奖励回应
message MsgGS2MSCollectEmptyResourceReply
{

}

/**************************** 资源相关 ****************************/

/**************************** 联盟建筑相关 ****************************/
// 修改建筑状态
message MsgGS2MSFinishBuildRequest
{
    uint64 entity_id                            = 1;
    protomsg.MapBuildingStatus building_status  = 2;
}

// 刷新建筑有效性
message MsgGS2MSRefershBuildingRequest
{
    uint64 guild_id = 1;
}

/**************************** 联盟建筑相关 ****************************/

/**************************** 城墙相关 ****************************/

message MsgMS2GSCityWallNotice
{
    protomsg.CityWallAllData city_wall_data = 1;
    uint64 region_id                        = 2;
    protomsg.GarrisonHeroData hero_data     = 3;
    uint32 city_wall_level                  = 4;
}

message MsgMS2GSCityWallMoveNotice
{

}

message MsgGS2MSCityWallBurnPm
{
    uint64 player_id    = 1;
}

message MsgGS2MSCityWallResetRepareTimePm
{
    uint64 player_id    = 1;
}

message MsgGS2MSCityWallSetLostDurableCountPm
{
    uint64 player_id    = 1;
    uint32 count        = 2;
}

// 获取英雄信息
message MsgMS2GSGetGarrisonHeroInfoRequest
{
    repeated uint32 hero_ids        = 1;
    uint32 cur_main_hero_id         = 2;
    uint32 cur_second_hero_id       = 3;
    uint32 cur_select_main_hero_id  = 4;
    uint32 cur_select_second_id     = 5;
}

// 获取英雄信息
message MsgMS2GSGetGarrisonHeroInfoResponse
{
    protomsg.ArmyHeroData garrison_data = 1;
}


/**************************** 城墙相关 ****************************/

/**************************** 走马灯相关  ****************************/

message MsgS2GSMagicLampNotice
{
    MagicLampType type          = 1;
    MagicLampLevel level        = 2;
    google.protobuf.Any content = 3;    // 走马灯内容
    MagicLampSendType send_type = 4;    // 发送类型
    uint64 guild_id             = 5;
    uint64 region_id            = 6;
}

/**************************** 走马灯相关 ****************************/

/**************************** 活动相关  ****************************/

message MsgS2GSAllActivityNotice
{
    protomsg.ActivityInfos infos    = 1;
}

message MsgS2GSUpdateActivityNotice
{
    protomsg.ActivityInfo info  = 1;
}

message MsgAS2SUpdateRankBoardInfoNotice
{
    RankBoardInfo info  = 1;
}

// 其他服务器通知ActivityServer，排行榜数据变化
message MsgS2ASUpdateRankDataNotice
{
    RankBoardType type      = 1;
    uint32 rank_board_id    = 2;
    RankMiscInfo info       = 3;
    uint64 score            = 4;
}

// 其他服务器通知ActivityServer，排行榜杂项数据变化
message MsgS2ASUpdateRankMiscNotice
{
    RankMiscInfo info                       = 1;
    protomsg.RankBoardDataType data_type    = 2;
}

// 删除公会通知
message MsgGuild2ASDeleteGuildNotice
{
    uint64 guild_id = 1;
}

// gameserver 到 guildserver 行为通知
message MsgGS2GuildDoActivityAcitonNotice
{
    protomsg.GuildActivityDoAction action   = 2;
}

/**************************** 活动相关 ****************************/

/**************************** 服务器开服时间相关  ****************************/

message MsgAS2SStartServerTimeNotice
{
    int64 start_server_time = 1;
}

/**************************** 里程碑开始 ****************************/

message MsgS2ASMileStoneDataNotice
{
    protomsg.MileStoneContidionType type    = 1;
    uint64 param1                           = 2;
    uint64 param2                           = 3;
    uint64 param3                           = 4;
    uint64 param4                           = 5;
    uint64 param5                           = 6;
}

// 任务同步通知
message MsgS2ASMileStoneTaskNotice
{
    uint32 task_id                                      = 1;
    uint64 value                                        = 2;
    repeated protomsg.MileStoneGuildCompleteInfo info   = 3;    // 公会完成情况信息
}

// 数量添加通知
message MsgS2ASMileStoneTaskAddNotice
{
    uint32 task_id  = 1;
    uint64 value    = 2;
}

// 数量添加通知
message MsgS2ASMileStoneTaskAddGuildNotice
{
    uint32 task_id  = 1;
    uint64 value    = 2;
    uint64 guild_id = 3;
}

message MsgAS2SMileStoneOpenNewTaskNotice
{
    uint32 task_id                      = 1;
    uint32 last_task_id                 = 2;
    repeated MileStoneBaseData datas    = 3;
}

message MsgGS2ASMileStoneEndPmNotice
{

}

// 里程碑重置PM通知
message MsgGS2ASMileStoneResetPmNotice
{

}

// 里程碑排行榜同步
message MsgMS2GuildSMileStoneRankNotice
{
    uint32 task_id                  = 1;
    protomsg.MileStoneRankList list = 2;
}

// 里程碑排行榜同步
message MsgGuildS2ASMileStoneRankNotice
{
    uint32 task_id                  = 1;
    protomsg.MileStoneRankList list = 2;
}

// 里程碑公会数据通知
message MsgMS2GuildSMileStoneRankGuildDataNotice
{
    uint32 task_id                          = 1;
    protomsg.MileStoneRankGuildInfo data    = 2;
}

// 里程碑公会数据通知
message MsgGuildS2ASMileStoneRankGuildDataNotice
{
    uint32 task_id                          = 1;
    protomsg.MileStoneRankGuildInfo data    = 2;
}

/**************************** 里程碑结束 ****************************/

/**************************** 国王相关 ****************************/

// 设置王国头衔
message MsgGS2GSSetKingTitleRequest
{
    PlayerKingdomTitleInfo info         = 1;
    repeated uint64 king_gift_players   = 2;
}

message MsgGS2GSSetKingTitleReply
{

}

/**************************** 国王相关 ****************************/


/**************************** 远征相关 ****************************/


// 请求投递关卡挑战结果(战斗结束时)
message MsgIS2GSPlayerExpePostBattleResultRequest
{
    uint64 player_id                = 1;
    bool hard_mode                  = 2;
    uint32 level_id                 = 3;
    uint64 region_id                = 4;
    bool is_win                     = 5;
    int32 star                      = 6;
    repeated int32 condition_star   = 7;
}


// 响应投递关卡挑战结果(战斗结束时)
message MsgGS2ISPlayerExpePostBattleResultReply
{
    int32 error_code    = 1;
    uint64 player_id    = 2;
    bool hard_mode      = 3;
    uint32 level_id     = 4;
    uint64 region_id    = 5;
}



/**************************** 庞贝的复苏 - 赛程控制 ****************************/
message MsgXS2GSPompeiiGetPlayerMatchPointRequest
{
}


message MsgGS2XSPompeiiGetPlayerMatchPointReply
{
    int32 error_code    = 1;
    uint64 match_point  = 2;
}



// 通知情况有变, 需要通知玩家相关信息
message MsgXS2GSPompeiiNeedNoticeRequest
{
}


message MsgGS2XSPompeiiNeedNoticeReply
{
    int32 error_code    = 1;
}

message MsgXS2GSPompeiiNeedNoticeNotice
{
}




/*****************************************************************/

/**************************** 庞贝的复仇相关 ****************************/

// 开启奇观请求
message MsgGS2MSOpenPompeiiBuildRequest
{
    uint64 build_id     = 1;
    uint64 region_id    = 2;
}

// 占领奇观请求
message MsgGS2MSCapturePompeiiBuildRequest
{
    uint64 build_id     = 1;
    uint64 guild_id     = 2;
    uint64 region_id    = 3;
}

// 完成事件
message MsgGS2MSFinishEventRequest
{
    uint64 region_id    = 1;
    uint32 event_id     = 2;
}

// 添加庞贝的复苏伤兵
message MsgGS2MSAddPompeiiWoundRequest
{
    repeated TroopData army_info    = 1;
}

// 通知公会副本开战了
message MsgPompeii2GuildWarStatusNotice
{
    uint64 guild_id = 1;
    bool is_warring = 2;
}

message MsgGS2InstanceBuildingsRequest
{

}

/*****************************************************************/


/**************************** GMServer相关 ****************************/
message MsgGM2GSGetBasePlayerInfoRequest
{
    uint64 player_id    = 1;
}

message MsgGS2GMGetBasePlayerInfoReply
{
    PlayerBaseInfo info = 1;
}

message MsgGM2GSPlayerRenameRequest
{
    uint64 player_id    = 1;
    string player_name  = 2;
}

message MsgGS2GMPlayerRenameReply
{
}

// 依据GameID分类的在线人数统计
message GameIdPlayerCountInfo
{
    int64 game_id   = 1;
    uint32 count    = 2;
}

// GameServer向GM服务器发送在线人数统计
message MsgGS2GMPlayerCountNotice
{
    NetAddress net_addr                     = 1;
    repeated GameIdPlayerCountInfo infos    = 2;    // 在线人数统计
}

// GM踢玩家下线
message MsgGM2GSKickPlayersNotice
{
    repeated uint64 players = 1;
}

// 设置特殊创号规则
message MsgGM2USSetCreateRoleRule
{
    string limit_ip     = 1;
    uint32 kingdom_id   = 2;
}

/*****************************************************************/


/**************************** 公会德比开始 ****************************/

message MsgGDS2GuildSGuildDerbyActivityStatus
{
    uint32 season_id        = 1;
    int64 begin_time        = 2;
    int64 end_time          = 3;
    int64 apply_end_time    = 4;
    uint32 status           = 5;
}

// 公会分数同步
message MsgGDS2GuildSGuildDerbyGuildScoreSync
{
    uint64 guild_id     = 1;
    uint32 score        = 2;
    uint32 season_id    = 3;
}

// 公会德比开始下一个阶段
message MsgGS2GDSGuildDerbyNextNotice
{

}

// 公会德比设置公会分数PM
message MsgGS2GuildSGuildDerbySetScore
{
    uint64 guild_id = 1;
    uint32 score    = 2;
}

// 公会德比清除时间PM
message MsgGS2GuildSGuildDerbyClearAcceptTime
{
    uint64 guild_id = 1;
}

// 公会德比设置玩家分数PM
message MsgGS2GuildSGuildDerbySetPlayerScore
{
    uint64 guild_id     = 1;
    uint64 player_id    = 2;
    uint32 score        = 3;
}

// 公会德比状态同步
message MsgGuildS2GSGuildStatusChangeNotice
{
    uint32 season_id        = 1;
    int64 begin_time        = 2;
    int64 end_time          = 3;
    int64 apply_end_time    = 4;
    uint32 status           = 5;
}

// 公会德比设置排名
message GuildDerbyGuildRank
{
    uint64 guild_id = 1;
    uint32 rank     = 2;
}

// 公会德比排名更新
message MsgGDS2GuildSGuildDerbyGuildRankNotice
{
    repeated GuildDerbyGuildRank ranks  = 1;
}


/**************************** 公会德比结束 ****************************/


// 主堡战斗开始和结束通知
message MsgS2GSCastleIsBattleNotice
{
    uint64 region_id        = 1;
    bool castle_is_battle   = 2;
}


/**************************** Plugin ****************************/
// 请求队列信息
message MsgMS2GSGetDeployInfoRequest
{
    uint32 deploy_id    = 1;
}

message MsgGS2MSGetDeployInfoReply
{
    protomsg.MarchArmyData march_army_data  = 1;
}

// 设置出城标记
message MsgMS2GSDeploySetInMapRquest
{
    uint32 deploy_id    = 1;
    bool is_in_map      = 2;
}

message MsgGS2MSDeploySetInMapReply
{

}

// 回城
message MsgMS2GSDeployGoHomeRequest
{
    protomsg.ArmyData deploy_info   = 1;
}

message MsgGS2MSDeployGoHomeReply
{
}

/**************************** report server start ****************************/
// 上传战报
message MsgS2RPSBattleReport
{
    string name         = 1;
    int64 time_stamp    = 2;
    bytes content       = 3;
}

// 消息推送
message MsgS2RPSPushMsg
{
    repeated uint64 player_id   = 1;
    string message_id           = 2;
    repeated string params      = 3;
}

// 同步玩家game id
message MsgGS2RPSPlayerGameID
{
    uint64 player_id    = 1;
    int64 game_id       = 2;
}

/**************************** report server end ****************************/

/**************************** server_time ****************************/
// 服务器时间更新
message MsgS2SServerTimeUpdateNotice
{
    int64 server_time   = 1;
}

/**************************** server_time end ****************************/
/**************************** DramaStory ****************************/
// 其他服务器通知ActivityServer，排行榜数据变化
message MsgS2ASUpdateDramaStoryRankDataNotice
{
    DramaStoryRankType type     = 1;
    protomsg.RankMiscInfo info  = 2;
    uint64 score                = 3;
}

// 更新排行值 到 game服
message MsgS2GSPlayerDramaStoryUpdateRankRequest
{
    uint64 player_id                = 1;
    DramaStoryRankTypeSystem type   = 2;
    uint64 score                    = 3;
}

message MsgS2GSPlayerDramaStoryUpdateRankReply
{
}

message MsgMS2GSPlayerStrongholdInfoUpdateRequest
{
    uint64 player_id                        = 1;
    repeated StrongholdInfo stronghold_info = 2;
}

message MsgMS2GSPlayerStrongholdInfoUpdateReply
{
}

message MsgMS2GuildSTempleInfoNotice
{
    uint64 guild_id                 = 1;
    repeated TempleInfo temple_info = 2;
}


///  NPC 使用
message MsgMS2GSNpcFortInitNotice
{
    uint32 num      = 1;
    uint32 event_id = 2;
}

message MsgMS2GSNpcDataUpdateRequest
{
    protomsg.NpcForceDataType type      = 1;
    protomsg.NpcForceFortData fort_data = 2;
}

message MsgMS2GSNpcDataUpdateReply
{
}
/**************************** DramaStory end ****************************/
/**************************** 木桩 start ****************************/
message MsgGS2MSCreateWoodenStake
{
    protomsg.WoodenStakeData wooden_stake_data  = 1;
}

message MsgGS2ASCreateEvent
{
    uint32 event_id = 1;
}
/**************************** 木桩 end ****************************/

message MsgMS2GSAddBuffRequest
{
    repeated uint32 buff_ids = 1;
    uint32 log_param_1      = 2;
    uint32 log_param_2      = 3;
}


message MsgGS2MSAddBuffReply
{

}