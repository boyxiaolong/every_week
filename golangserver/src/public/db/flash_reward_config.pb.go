// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flash_reward_config.proto

package db

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FlashRewardConfig struct {
	Conid     uint32 `protobuf:"varint,1,opt,name=conid" json:"conid,omitempty"`
	Conlv     uint32 `protobuf:"varint,2,opt,name=conlv" json:"conlv,omitempty"`
	GoodsId   uint32 `protobuf:"varint,3,opt,name=goods_id,json=goodsId" json:"goods_id,omitempty"`
	Text3     uint32 `protobuf:"varint,4,opt,name=text3" json:"text3,omitempty"`
	Countdown uint32 `protobuf:"varint,5,opt,name=countdown" json:"countdown,omitempty"`
	Malllv    uint32 `protobuf:"varint,6,opt,name=malllv" json:"malllv,omitempty"`
	Order     uint32 `protobuf:"varint,7,opt,name=order" json:"order,omitempty"`
}

func (m *FlashRewardConfig) Reset()                    { *m = FlashRewardConfig{} }
func (m *FlashRewardConfig) String() string            { return proto.CompactTextString(m) }
func (*FlashRewardConfig) ProtoMessage()               {}
func (*FlashRewardConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *FlashRewardConfig) GetConid() uint32 {
	if m != nil {
		return m.Conid
	}
	return 0
}

func (m *FlashRewardConfig) GetConlv() uint32 {
	if m != nil {
		return m.Conlv
	}
	return 0
}

func (m *FlashRewardConfig) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *FlashRewardConfig) GetText3() uint32 {
	if m != nil {
		return m.Text3
	}
	return 0
}

func (m *FlashRewardConfig) GetCountdown() uint32 {
	if m != nil {
		return m.Countdown
	}
	return 0
}

func (m *FlashRewardConfig) GetMalllv() uint32 {
	if m != nil {
		return m.Malllv
	}
	return 0
}

func (m *FlashRewardConfig) GetOrder() uint32 {
	if m != nil {
		return m.Order
	}
	return 0
}

type FlashRewardConfigSet struct {
	Set []*FlashRewardConfig `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (m *FlashRewardConfigSet) Reset()                    { *m = FlashRewardConfigSet{} }
func (m *FlashRewardConfigSet) String() string            { return proto.CompactTextString(m) }
func (*FlashRewardConfigSet) ProtoMessage()               {}
func (*FlashRewardConfigSet) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *FlashRewardConfigSet) GetSet() []*FlashRewardConfig {
	if m != nil {
		return m.Set
	}
	return nil
}

func init() {
	proto.RegisterType((*FlashRewardConfig)(nil), "db.flash_reward_config")
	proto.RegisterType((*FlashRewardConfigSet)(nil), "db.flash_reward_config_set")
}

func init() { proto.RegisterFile("flash_reward_config.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0xc7, 0xe5, 0x86, 0xa6, 0x70, 0x88, 0xc5, 0x20, 0x7a, 0x95, 0x18, 0xaa, 0x4e, 0x65, 0xc9,
	0x40, 0x5f, 0x81, 0x85, 0x35, 0x2f, 0x60, 0x25, 0x39, 0x27, 0x44, 0x32, 0x3e, 0x64, 0x9b, 0x84,
	0xa7, 0xe3, 0xd9, 0x50, 0x2e, 0x11, 0x2c, 0x19, 0x7f, 0xff, 0x2f, 0x9d, 0x0e, 0x0e, 0xad, 0xab,
	0xe2, 0xbb, 0x09, 0x76, 0xac, 0x02, 0x99, 0x86, 0x7d, 0xdb, 0x77, 0xc5, 0x67, 0xe0, 0xc4, 0x7a,
	0x43, 0xf5, 0xe9, 0x47, 0xc1, 0xfd, 0x4a, 0x42, 0x3f, 0xc0, 0xb6, 0x61, 0xdf, 0x13, 0xaa, 0xa3,
	0x3a, 0xdf, 0x95, 0x33, 0x2c, 0xaa, 0x1b, 0x70, 0xf3, 0xa7, 0xba, 0x41, 0x1f, 0xe0, 0xba, 0x63,
	0xa6, 0x68, 0x7a, 0xc2, 0x4c, 0x8c, 0x9d, 0xf0, 0x9b, 0x14, 0x92, 0xfd, 0x4e, 0x17, 0xbc, 0x9a,
	0x0b, 0x02, 0xfa, 0x09, 0x6e, 0x1a, 0xfe, 0xf2, 0x89, 0x78, 0xf4, 0xb8, 0x15, 0xe7, 0x5f, 0xd0,
	0x8f, 0x90, 0x7f, 0x54, 0xce, 0xb9, 0x01, 0x73, 0xb1, 0x16, 0x9a, 0xb6, 0x38, 0x90, 0x0d, 0xb8,
	0x9b, 0xb7, 0x04, 0x4e, 0xaf, 0xb0, 0x5f, 0xb9, 0xdf, 0x44, 0x9b, 0xf4, 0x33, 0x64, 0xd1, 0x26,
	0x54, 0xc7, 0xec, 0x7c, 0xfb, 0xb2, 0x2f, 0xa8, 0x2e, 0x56, 0x92, 0xe5, 0x94, 0xa9, 0x73, 0xf9,
	0xc8, 0xe5, 0x37, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xcb, 0x49, 0xa3, 0x2e, 0x01, 0x00, 0x00,
}
